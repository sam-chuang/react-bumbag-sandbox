import { r as react, c as createCommonjsModule, a as commonjsGlobal, g as getDefaultExportFromCjs } from './common/index-50b0b662.js';
import { g as getRegisteredStyles, a as createCache, s as serializeStyles, i as insertStyles, m as memoize$2, _ as _extends$2, w as withEmotionCache, T as ThemeContext, c as css$1, k as keyframes, G as Global, b as ThemeProvider } from './common/emotion-react.browser.esm-7461fbc5.js';
import { r as reactDom } from './common/index-ed440ea1.js';

// The debounce function receives our function as a parameter
var debounceAnimationFrame = function debounceAnimationFrame(fn) {
  // This holds the requestAnimationFrame reference, so we can cancel it if we wish
  var frame; // The debounce function returns a new function that can receive a variable number of arguments

  return function () {
    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
      params[_key] = arguments[_key];
    }

    // If the frame variable has been defined, clear it now, and queue for next frame
    if (frame) {
      cancelAnimationFrame(frame);
    } // Queue our function call for the next frame


    frame = requestAnimationFrame(function () {
      // Call our function and pass any params we received
      fn.apply(void 0, params);
    });
  };
};

function useViewportHeight(_ref) {
  var enabled = _ref.enabled;

  var _React$useState = react.useState('100vh'),
      viewportHeightValue = _React$useState[0],
      setViewportHeightValue = _React$useState[1];

  react.useEffect(function () {
    if (typeof window !== 'undefined' && enabled) {
      var setHeight = debounceAnimationFrame(function () {
        var vh = window.innerHeight;
        setViewportHeightValue(vh + "px");
      });
      setHeight();
      window.addEventListener('resize', setHeight, {
        passive: true
      });
      return function () {
        return window.removeEventListener('resize', setHeight);
      };
    }
  }, [enabled]);
  return viewportHeightValue;
}

var BumbagThemeContext = react.createContext({
  setTheme: function setTheme() {},
  theme: {}
});

var classnames$1 = createCommonjsModule(function (module) {
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else {
		window.classNames = classNames;
	}
}());
});

function insertWithoutScoping(cache, serialized) {
  if (cache.inserted[serialized.name] === undefined) {
    return cache.insert('', serialized, cache.sheet, true);
  }
}

function merge(registered, css, className) {
  var registeredStyles = [];
  var rawClassName = getRegisteredStyles(registered, registeredStyles, className);

  if (registeredStyles.length < 2) {
    return className;
  }

  return rawClassName + css(registeredStyles);
}

var createEmotion = function createEmotion(options) {
  var cache = createCache(options); // $FlowFixMe

  cache.sheet.speedy = function (value) {

    this.isSpeedy = value;
  };

  cache.compat = true;

  var css = function css() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var serialized = serializeStyles(args, cache.registered, undefined);
    insertStyles(cache, serialized, false);
    return cache.key + "-" + serialized.name;
  };

  var keyframes = function keyframes() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var serialized = serializeStyles(args, cache.registered);
    var animation = "animation-" + serialized.name;
    insertWithoutScoping(cache, {
      name: serialized.name,
      styles: "@keyframes " + animation + "{" + serialized.styles + "}"
    });
    return animation;
  };

  var injectGlobal = function injectGlobal() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    var serialized = serializeStyles(args, cache.registered);
    insertWithoutScoping(cache, serialized);
  };

  var cx = function cx() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    return merge(cache.registered, css, classnames(args));
  };

  return {
    css: css,
    cx: cx,
    injectGlobal: injectGlobal,
    keyframes: keyframes,
    hydrate: function hydrate(ids) {
      ids.forEach(function (key) {
        cache.inserted[key] = true;
      });
    },
    flush: function flush() {
      cache.registered = {};
      cache.inserted = {};
      cache.sheet.flush();
    },
    // $FlowFixMe
    sheet: cache.sheet,
    cache: cache,
    getRegisteredStyles: getRegisteredStyles.bind(null, cache.registered),
    merge: merge.bind(null, cache.registered, css)
  };
};

var classnames = function classnames(args) {
  var cls = '';

  for (var i = 0; i < args.length; i++) {
    var arg = args[i];
    if (arg == null) continue;
    var toAdd = void 0;

    switch (typeof arg) {
      case 'boolean':
        break;

      case 'object':
        {
          if (Array.isArray(arg)) {
            toAdd = classnames(arg);
          } else {
            toAdd = '';

            for (var k in arg) {
              if (arg[k] && k) {
                toAdd && (toAdd += ' ');
                toAdd += k;
              }
            }
          }

          break;
        }

      default:
        {
          toAdd = arg;
        }
    }

    if (toAdd) {
      cls && (cls += ' ');
      cls += toAdd;
    }
  }

  return cls;
};

var _createEmotion = createEmotion({
  key: 'css'
}),
    css = _createEmotion.css;

var reactPropsRegex$1 = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

var isPropValid = /* #__PURE__ */memoize$2(function (prop) {
  return reactPropsRegex$1.test(prop) || prop.charCodeAt(0) === 111
  /* o */
  && prop.charCodeAt(1) === 110
  /* n */
  && prop.charCodeAt(2) < 91;
}
/* Z+1 */
);

var testOmitPropsOnStringTag = isPropValid;

var testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {
  return key !== 'theme';
};

var getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {
  return typeof tag === 'string' && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
};
var composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {
  var shouldForwardProp;

  if (options) {
    var optionsShouldForwardProp = options.shouldForwardProp;
    shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function (propName) {
      return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
    } : optionsShouldForwardProp;
  }

  if (typeof shouldForwardProp !== 'function' && isReal) {
    shouldForwardProp = tag.__emotion_forwardProp;
  }

  return shouldForwardProp;
};

var createStyled = function createStyled(tag, options) {

  var isReal = tag.__emotion_real === tag;
  var baseTag = isReal && tag.__emotion_base || tag;
  var identifierName;
  var targetClassName;

  if (options !== undefined) {
    identifierName = options.label;
    targetClassName = options.target;
  }

  var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
  var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
  var shouldUseAs = !defaultShouldForwardProp('as');
  return function () {
    var args = arguments;
    var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];

    if (identifierName !== undefined) {
      styles.push("label:" + identifierName + ";");
    }

    if (args[0] == null || args[0].raw === undefined) {
      styles.push.apply(styles, args);
    } else {

      styles.push(args[0][0]);
      var len = args.length;
      var i = 1;

      for (; i < len; i++) {

        styles.push(args[i], args[0][i]);
      }
    } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class


    var Styled = withEmotionCache(function (props, cache, ref) {
      var finalTag = shouldUseAs && props.as || baseTag;
      var className = '';
      var classInterpolations = [];
      var mergedProps = props;

      if (props.theme == null) {
        mergedProps = {};

        for (var key in props) {
          mergedProps[key] = props[key];
        }

        mergedProps.theme = react.useContext(ThemeContext);
      }

      if (typeof props.className === 'string') {
        className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
      } else if (props.className != null) {
        className = props.className + " ";
      }

      var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
      insertStyles(cache, serialized, typeof finalTag === 'string');
      className += cache.key + "-" + serialized.name;

      if (targetClassName !== undefined) {
        className += " " + targetClassName;
      }

      var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(finalTag) : defaultShouldForwardProp;
      var newProps = {};

      for (var _key in props) {
        if (shouldUseAs && _key === 'as') continue;

        if ( // $FlowFixMe
        finalShouldForwardProp(_key)) {
          newProps[_key] = props[_key];
        }
      }

      newProps.className = className;
      newProps.ref = ref;
      var ele = /*#__PURE__*/react.createElement(finalTag, newProps); // if (!isBrowser && rules !== undefined) {
      //   let serializedNames = serialized.name
      //   let next = serialized.next
      //   while (next !== undefined) {
      //     serializedNames += ' ' + next.name
      //     next = next.next
      //   }
      //   return (
      //     <>
      //       <style
      //         {...{
      //           [`data-emotion`]: `${cache.key} ${serializedNames}`,
      //           dangerouslySetInnerHTML: { __html: rules },
      //           nonce: cache.sheet.nonce
      //         }}
      //       />
      //       {ele}
      //     </>
      //   )
      // }

      return ele;
    });
    Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + ")";
    Styled.defaultProps = tag.defaultProps;
    Styled.__emotion_real = Styled;
    Styled.__emotion_base = baseTag;
    Styled.__emotion_styles = styles;
    Styled.__emotion_forwardProp = shouldForwardProp;
    Object.defineProperty(Styled, 'toString', {
      value: function value() {
        if (targetClassName === undefined && "production" !== 'production') {
          return 'NO_COMPONENT_SELECTOR';
        } // $FlowFixMe: coerce undefined to string


        return "." + targetClassName;
      }
    });

    Styled.withComponent = function (nextTag, nextOptions) {
      return createStyled(nextTag, _extends$2({}, options, {}, nextOptions, {
        shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
      })).apply(void 0, styles);
    };

    return Styled;
  };
};

var tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', // SVG
'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];

var newStyled = createStyled.bind();
tags.forEach(function (tagName) {
  // $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type
  newStyled[tagName] = newStyled(tagName);
});

function useTheme() {
  var _React$useContext = react.useContext(BumbagThemeContext),
      setTheme = _React$useContext.setTheme;

  var theme = react.useContext(ThemeContext);
  return {
    theme: theme,
    setTheme: setTheme
  };
}

var ConditionalWrap = (function (_ref) {
  var condition = _ref.condition,
      wrap = _ref.wrap,
      children = _ref.children;
  return condition ? wrap(children) : children;
});

function useLocalStorage() {
  var _theme$modes, _theme$modes2;

  var _useTheme = useTheme(),
      theme = _useTheme.theme;

  var isEnabled = (_theme$modes = theme.modes) === null || _theme$modes === void 0 ? void 0 : _theme$modes.enableLocalStorage;
  var localStoragePrefix = (_theme$modes2 = theme.modes) === null || _theme$modes2 === void 0 ? void 0 : _theme$modes2.localStoragePrefix;
  var get = react.useCallback(function (key) {
    if (!isEnabled) return;

    if (typeof window !== 'undefined') {
      return window.localStorage.getItem(localStoragePrefix + "." + key);
    }
  }, [isEnabled, localStoragePrefix]);
  var set = react.useCallback(function (key, value) {
    if (!isEnabled) return;

    if (typeof window !== 'undefined') {
      return window.localStorage.setItem(localStoragePrefix + "." + key, value);
    }
  }, [isEnabled, localStoragePrefix]);
  return {
    get: get,
    set: set
  };
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _defineProperty$4(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends$1() {
  _extends$1 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$1.apply(this, arguments);
}

function ownKeys$3(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2$3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys$3(Object(source), true).forEach(function (key) {
        _defineProperty$4(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$3(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose$4(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

function _unsupportedIterableToArray$2(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray$2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);
}

function _arrayLikeToArray$2(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose$2(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

var omit = function omit(obj) {
  for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    keys[_key - 1] = arguments[_key];
  }

  return Object.keys(obj).reduce(function (newObject, key) {
    if (keys.indexOf(key) === -1) newObject[key] = obj[key];
    return newObject;
  }, {});
};

var bodyClassPrefix = 'bb-mode';
var cssVariablePrefix = '--bb';
var palettePrefix = cssVariablePrefix + "-palette";
function mapCSSVariables(obj) {
  return Object.entries(obj).reduce(function (cssVariables, _ref) {
    var _objectSpread2$1;

    var key = _ref[0],
        value = _ref[1];
    return _objectSpread2$3(_objectSpread2$3({}, cssVariables), {}, (_objectSpread2$1 = {}, _objectSpread2$1[palettePrefix + "-" + key] = value, _objectSpread2$1));
  }, {});
}
function getColorModesCSSVariables(theme) {
  if (!theme.palette) {
    return {
      'html,body': {}
    };
  }

  var cssVariables = mapCSSVariables(omit(theme.palette, 'modes'));
  cssVariables = Object.entries(theme.palette.modes || {}).reduce(function (cssVariables, _ref2) {
    var _objectSpread3;

    var modeKey = _ref2[0],
        value = _ref2[1];
    return _objectSpread2$3(_objectSpread2$3({}, cssVariables), {}, (_objectSpread3 = {}, _objectSpread3["&." + bodyClassPrefix + "-" + modeKey] = mapCSSVariables(value), _objectSpread3));
  }, cssVariables);
  return {
    'html,body': _objectSpread2$3({}, cssVariables)
  };
}
function getColorFromCSSVariable(selector, fallback) {
  return "var(" + palettePrefix + "-" + selector + ", " + fallback + ")";
}
function addColorModeBodyClassName(nextMode, prevMode) {
  if (prevMode) {
    document.body.classList.remove(bodyClassPrefix + "-" + prevMode);
  }

  document.body.classList.add(bodyClassPrefix + "-" + nextMode);
}
function getDefaultColorMode(mode, _ref3) {
  var localStorage = _ref3.localStorage,
      theme = _ref3.theme;

  var _ref4 = theme.modes || {},
      useSystemColorMode = _ref4.useSystemColorMode;

  var defaultMode = mode;

  if (typeof window !== 'undefined') {
    if (useSystemColorMode && window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      defaultMode = 'dark';
    }

    if (localStorage.get('mode')) {
      defaultMode = localStorage.get('mode');
    }
  }

  return defaultMode;
}

var ColorModeContext = react.createContext({
  setColorMode: function setColorMode() {},
  colorMode: 'default'
});
ColorModeProvider.defaultProps = {
  isSSR: false
};
function ColorModeProvider(props) {
  var children = props.children,
      _defaultMode = props.mode,
      isSSR = props.isSSR; ////////////////////////////////////

  var _useTheme = useTheme(),
      theme = _useTheme.theme;

  var localStorage = useLocalStorage();
  var defaultMode = react.useMemo(function () {
    return getDefaultColorMode(_defaultMode, {
      localStorage: localStorage,
      theme: theme
    });
  }, [_defaultMode]); // eslint-disable-line
  ////////////////////////////////////

  var _React$useState = react.useState(defaultMode),
      mode = _React$useState[0],
      setMode = _React$useState[1]; ////////////////////////////////////


  react.useEffect(function () {
    addColorModeBodyClassName(defaultMode);
    localStorage.set('mode', defaultMode);
  }, [defaultMode]); // eslint-disable-line
  ////////////////////////////////////

  var setColorMode = react.useCallback(function (colorMode) {
    addColorModeBodyClassName(colorMode, mode);
    localStorage.set('mode', colorMode);
    setMode(colorMode);
  }, [localStorage, mode]); ////////////////////////////////////

  var value = react.useMemo(function () {
    return {
      colorMode: mode,
      setColorMode: setColorMode
    };
  }, [mode, setColorMode]); ////////////////////////////////////

  var _React$useState2 = react.useState(false),
      mounted = _React$useState2[0],
      setMounted = _React$useState2[1];

  var useIsomorphicLayoutEffect = typeof window !== 'undefined' ? react.useLayoutEffect : react.useEffect;
  useIsomorphicLayoutEffect(function () {
    if (typeof window !== 'undefined') {
      setMounted(true);
    }
  }, []); ////////////////////////////////////

  return /*#__PURE__*/react.createElement(ConditionalWrap, {
    condition: isSSR,
    wrap: function wrap(children) {
      return /*#__PURE__*/react.createElement("div", {
        style: !mounted ? {
          visibility: 'hidden'
        } : {}
      }, children);
    }
  }, /*#__PURE__*/react.createElement(ColorModeContext.Provider, {
    value: value
  }, children));
}
function useColorMode() {
  return react.useContext(ColorModeContext);
}

var pick = function pick(obj) {
  var object = {};

  for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    props[_key - 1] = arguments[_key];
  }

  props.forEach(function (prop) {
    if (prop in obj) {
      object[prop] = obj[prop];
    }
  });
  return object;
};

function pickCSSProps(props) {
  return pick.apply(void 0, [props].concat(Object.keys(cssProps)));
}
function omitCSSProps(props) {
  return omit.apply(void 0, [props].concat(Object.keys(cssProps)));
}
var cssProps = {
  _hover: ':hover',
  _hoveractive: ':hover:active',
  _focus: ':focus',
  _visited: ':visited',
  _active: ':active',
  _disabled: ':disabled',
  _groupHover: '[role=group]:hover &',
  _groupActive: '[role=group]:active &',
  _groupFocus: '[role=group]:focus &',
  _groupVisited: '[role=group]:visited &',
  _groupDisabled: '[role=group]:disabled &',
  alignContent: 'align-content',
  alignSelf: 'align-self',
  alignItems: 'align-items',
  alignmentBaseline: 'alignment-baseline',
  all: 'all',
  animation: 'animation',
  animationDelay: 'animation-delay',
  animationDirection: 'animation-direction',
  animationDuration: 'animation-duration',
  animationFillMode: 'animation-fill-mode',
  animationIterationCount: 'animation-iteration-count',
  animationName: 'animation-name',
  animationPlayState: 'animation-play-state',
  animationTimingFunction: 'animation-timing-function',
  appearance: 'appearance',
  azimuth: 'azimuth',
  backfaceVisibility: 'backface-visibility',
  background: 'background',
  backgroundAttachment: 'background-attachment',
  backgroundBlendMode: 'background-blend-mode',
  backgroundClip: 'background-clip',
  backgroundColor: 'background-color',
  backgroundImage: 'background-image',
  backgroundImageTransform: 'background-image-transform',
  backgroundOrigin: 'background-origin',
  backgroundPosition: 'background-position',
  backgroundRepeat: 'background-repeat',
  backgroundSize: 'background-size',
  baselineShift: 'baseline-shift',
  blockSize: 'block-size',
  blockStep: 'block-step',
  blockStepAlign: 'block-step-align',
  blockStepInsert: 'block-step-insert',
  blockStepRound: 'block-step-round',
  blockStepSize: 'block-step-size',
  bookmarkLabel: 'bookmark-label',
  bookmarkLevel: 'bookmark-level',
  bookmarkState: 'bookmark-state',
  border: 'border',
  borderBlock: 'border-block',
  borderBlockColor: 'border-block-color',
  borderBlockEnd: 'border-block-end',
  borderBlockEndColor: 'border-block-end-color',
  borderBlockEndStyle: 'border-block-end-style',
  borderBlockEndWidth: 'border-block-end-width',
  borderBlockStart: 'border-block-start',
  borderBlockStartColor: 'border-block-start-color',
  borderBlockStartStyle: 'border-block-start-style',
  borderBlockStartWidth: 'border-block-start-width',
  borderBlockStyle: 'border-block-style',
  borderBlockWidth: 'border-block-width',
  borderBottom: 'border-bottom',
  borderBottomColor: 'border-bottom-color',
  borderBottomLeftRadius: 'border-bottom-left-radius',
  borderBottomRightRadius: 'border-bottom-right-radius',
  borderBottomStyle: 'border-bottom-style',
  borderBottomWidth: 'border-bottom-width',
  borderBoundary: 'border-boundary',
  borderCollapse: 'border-collapse',
  borderColor: 'border-color',
  borderImage: 'border-image',
  borderImageOutset: 'border-image-outset',
  borderImageRepeat: 'border-image-repeat',
  borderImageSlice: 'border-image-slice',
  borderImageSource: 'border-image-source',
  borderImageTransform: 'border-image-transform',
  borderImageWidth: 'border-image-width',
  borderInline: 'border-inline',
  borderInlineColor: 'border-inline-color',
  borderInlineEnd: 'border-inline-end',
  borderInlineEndColor: 'border-inline-end-color',
  borderInlineEndStyle: 'border-inline-end-style',
  borderInlineEndWidth: 'border-inline-end-width',
  borderInlineStart: 'border-inline-start',
  borderInlineStartColor: 'border-inline-start-color',
  borderInlineStartStyle: 'border-inline-start-style',
  borderInlineStartWidth: 'border-inline-start-width',
  borderInlineStyle: 'border-inline-style',
  borderInlineWidth: 'border-inline-width',
  borderLeft: 'border-left',
  borderLeftColor: 'border-left-color',
  borderLeftStyle: 'border-left-style',
  borderLeftWidth: 'border-left-width',
  borderRadius: 'border-radius',
  borderRight: 'border-right',
  borderRightColor: 'border-right-color',
  borderRightStyle: 'border-right-style',
  borderRightWidth: 'border-right-width',
  borderSpacing: 'border-spacing',
  borderStyle: 'border-style',
  borderTop: 'border-top',
  borderTopColor: 'border-top-color',
  borderTopLeftRadius: 'border-top-left-radius',
  borderTopRightRadius: 'border-top-right-radius',
  borderTopStyle: 'border-top-style',
  borderTopWidth: 'border-top-width',
  borderWidth: 'border-width',
  bottom: 'bottom',
  boxDecorationBreak: 'box-decoration-break',
  boxShadow: 'box-shadow',
  boxSizing: 'box-sizing',
  boxSnap: 'box-snap',
  breakAfter: 'break-after',
  breakBefore: 'break-before',
  breakInside: 'break-inside',
  captionSide: 'caption-side',
  caret: 'caret',
  caretAnimation: 'caret-animation',
  caretColor: 'caret-color',
  caretShape: 'caret-shape',
  chains: 'chains',
  clear: 'clear',
  clip: 'clip',
  clipPath: 'clip-path',
  clipRule: 'clip-rule',
  color: 'color',
  colorAdjust: 'color-adjust',
  colorInterpolationFilters: 'color-interpolation-filters',
  columnCount: 'column-count',
  columnFill: 'column-fill',
  columnGap: 'column-gap',
  columnRule: 'column-rule',
  columnRuleColor: 'column-rule-color',
  columnRuleStyle: 'column-rule-style',
  columnRuleWidth: 'column-rule-width',
  columnSpan: 'column-span',
  columnWidth: 'column-width',
  columns: 'columns',
  contain: 'contain',
  content: 'content',
  continue: 'continue',
  counterIncrement: 'counter-increment',
  counterReset: 'counter-reset',
  counterSet: 'counter-set',
  cue: 'cue',
  cueAfter: 'cue-after',
  cueBefore: 'cue-before',
  cursor: 'cursor',
  direction: 'direction',
  display: 'display',
  dominantBaseline: 'dominant-baseline',
  elevation: 'elevation',
  emptyCells: 'empty-cells',
  fill: 'fill',
  fillBreak: 'fill-break',
  fillColor: 'fill-color',
  fillImage: 'fill-image',
  fillOpacity: 'fill-opacity',
  fillOrigin: 'fill-origin',
  fillPosition: 'fill-position',
  fillRepeat: 'fill-repeat',
  fillRule: 'fill-rule',
  fillSize: 'fill-size',
  filter: 'filter',
  flex: 'flex',
  flexBasis: 'flex-basis',
  flexDirection: 'flex-direction',
  flexFlow: 'flex-flow',
  flexGrow: 'flex-grow',
  flexShrink: 'flex-shrink',
  flexWrap: 'flex-wrap',
  float: 'float',
  floatDefer: 'float-defer',
  floatOffset: 'float-offset',
  floatReference: 'float-reference',
  floodColor: 'flood-color',
  floodOpacity: 'flood-opacity',
  flow: 'flow',
  flowFrom: 'flow-from',
  flowInto: 'flow-into',
  font: 'font',
  fontFamily: 'font-family',
  fontFeatureSettings: 'font-feature-settings',
  fontKerning: 'font-kerning',
  fontLanguageOverride: 'font-language-override',
  fontMaxSize: 'font-max-size',
  fontMinSize: 'font-min-size',
  fontOpticalSizing: 'font-optical-sizing',
  fontPalette: 'font-palette',
  fontPresentation: 'font-presentation',
  fontSize: 'font-size',
  fontSizeAdjust: 'font-size-adjust',
  fontStretch: 'font-stretch',
  fontStyle: 'font-style',
  fontSynthesis: 'font-synthesis',
  fontVariant: 'font-variant',
  fontVariantAlternates: 'font-variant-alternates',
  fontVariantCaps: 'font-variant-caps',
  fontVariantEastAsian: 'font-variant-east-asian',
  fontVariantLigatures: 'font-variant-ligatures',
  fontVariantNumeric: 'font-variant-numeric',
  fontVariantPosition: 'font-variant-position',
  fontVariationSettings: 'font-variation-settings',
  fontWeight: 'font-weight',
  footnoteDisplay: 'footnote-display',
  footnotePolicy: 'footnote-policy',
  gap: 'gap',
  glyphOrientationVertical: 'glyph-orientation-vertical',
  grid: 'grid',
  gridArea: 'grid-area',
  gridAutoColumns: 'grid-auto-columns',
  gridAutoFlow: 'grid-auto-flow',
  gridAutoRows: 'grid-auto-rows',
  gridColumn: 'grid-column',
  gridColumnEnd: 'grid-column-end',
  gridColumnGap: 'grid-column-gap',
  gridColumnStart: 'grid-column-start',
  gridGap: 'grid-gap',
  gridRow: 'grid-row',
  gridRowEnd: 'grid-row-end',
  gridRowGap: 'grid-row-gap',
  gridRowStart: 'grid-row-start',
  gridTemplate: 'grid-template',
  gridTemplateAreas: 'grid-template-areas',
  gridTemplateColumns: 'grid-template-columns',
  gridTemplateRows: 'grid-template-rows',
  hangingPunctuation: 'hanging-punctuation',
  height: 'height',
  hyphenateCharacter: 'hyphenate-character',
  hyphenateLimitChars: 'hyphenate-limit-chars',
  hyphenateLimitLast: 'hyphenate-limit-last',
  hyphenateLimitLines: 'hyphenate-limit-lines',
  hyphenateLimitZone: 'hyphenate-limit-zone',
  hyphens: 'hyphens',
  imageOrientation: 'image-orientation',
  imageResolution: 'image-resolution',
  initialLetter: 'initial-letter',
  initialLetterAlign: 'initial-letter-align',
  initialLetterWrap: 'initial-letter-wrap',
  inlineSize: 'inline-size',
  inset: 'inset',
  insetBlock: 'inset-block',
  insetBlockEnd: 'inset-block-end',
  insetBlockStart: 'inset-block-start',
  insetInline: 'inset-inline',
  insetInlineEnd: 'inset-inline-end',
  insetInlineStart: 'inset-inline-start',
  isolation: 'isolation',
  justifyContent: 'justify-content',
  justifyItems: 'justify-items',
  justifySelf: 'justify-self',
  left: 'left',
  letterSpacing: 'letter-spacing',
  lightingColor: 'lighting-color',
  lineBreak: 'line-break',
  lineGrid: 'line-grid',
  lineHeight: 'line-height',
  lineHeightStep: 'line-height-step',
  lineSnap: 'line-snap',
  listStyle: 'list-style',
  listStyleImage: 'list-style-image',
  listStylePosition: 'list-style-position',
  listStyleType: 'list-style-type',
  margin: 'margin',
  marginBlock: 'margin-block',
  marginBlockEnd: 'margin-block-end',
  marginBlockStart: 'margin-block-start',
  marginBottom: 'margin-bottom',
  marginInline: 'margin-inline',
  marginInlineEnd: 'margin-inline-end',
  marginInlineStart: 'margin-inline-start',
  marginLeft: 'margin-left',
  marginRight: 'margin-right',
  marginTop: 'margin-top',
  marginX: 'marginX',
  marginY: 'marginY',
  marker: 'marker',
  markerEnd: 'marker-end',
  markerKnockoutLeft: 'marker-knockout-left',
  markerKnockoutRight: 'marker-knockout-right',
  markerMid: 'marker-mid',
  markerPattern: 'marker-pattern',
  markerSegment: 'marker-segment',
  markerSide: 'marker-side',
  markerStart: 'marker-start',
  marqueeDirection: 'marquee-direction',
  marqueeLoop: 'marquee-loop',
  marqueeSpeed: 'marquee-speed',
  marqueeStyle: 'marquee-style',
  mask: 'mask',
  maskBorder: 'mask-border',
  maskBorderMode: 'mask-border-mode',
  maskBorderOutset: 'mask-border-outset',
  maskBorderRepeat: 'mask-border-repeat',
  maskBorderSlice: 'mask-border-slice',
  maskBorderSource: 'mask-border-source',
  maskBorderWidth: 'mask-border-width',
  maskClip: 'mask-clip',
  maskComposite: 'mask-composite',
  maskImage: 'mask-image',
  maskMode: 'mask-mode',
  maskOrigin: 'mask-origin',
  maskPosition: 'mask-position',
  maskRepeat: 'mask-repeat',
  maskSize: 'mask-size',
  maskType: 'mask-type',
  maxBlockSize: 'max-block-size',
  maxHeight: 'max-height',
  maxInlineSize: 'max-inline-size',
  maxLines: 'max-lines',
  maxWidth: 'max-width',
  minBlockSize: 'min-block-size',
  minHeight: 'min-height',
  minInlineSize: 'min-inline-size',
  minWidth: 'min-width',
  mixBlendMode: 'mix-blend-mode',
  navDown: 'nav-down',
  navLeft: 'nav-left',
  navRight: 'nav-right',
  navUp: 'nav-up',
  objectFit: 'object-fit',
  objectPosition: 'object-position',
  offset: 'offset',
  offsetAfter: 'offset-after',
  offsetAnchor: 'offset-anchor',
  offsetBefore: 'offset-before',
  offsetDistance: 'offset-distance',
  offsetEnd: 'offset-end',
  offsetPath: 'offset-path',
  offsetPosition: 'offset-position',
  offsetRotate: 'offset-rotate',
  offsetStart: 'offset-start',
  opacity: 'opacity',
  order: 'order',
  orphans: 'orphans',
  outline: 'outline',
  outlineColor: 'outline-color',
  outlineOffset: 'outline-offset',
  outlineStyle: 'outline-style',
  outlineWidth: 'outline-width',
  overflow: 'overflow',
  overflowStyle: 'overflow-style',
  overflowWrap: 'overflow-wrap',
  overflowX: 'overflow-x',
  overflowY: 'overflow-y',
  padding: 'padding',
  paddingBlock: 'padding-block',
  paddingBlockEnd: 'padding-block-end',
  paddingBlockStart: 'padding-block-start',
  paddingBottom: 'padding-bottom',
  paddingInline: 'padding-inline',
  paddingInlineEnd: 'padding-inline-end',
  paddingInlineStart: 'padding-inline-start',
  paddingLeft: 'padding-left',
  paddingRight: 'padding-right',
  paddingTop: 'padding-top',
  paddingX: 'paddingX',
  paddingY: 'paddingY',
  page: 'page',
  pageBreakAfter: 'page-break-after',
  pageBreakBefore: 'page-break-before',
  pageBreakInside: 'page-break-inside',
  pause: 'pause',
  pauseAfter: 'pause-after',
  pauseBefore: 'pause-before',
  perspective: 'perspective',
  perspectiveOrigin: 'perspective-origin',
  pitch: 'pitch',
  pitchRange: 'pitch-range',
  placeContent: 'place-content',
  placeItems: 'place-items',
  placeSelf: 'place-self',
  playDuring: 'play-during',
  pointerEvents: 'pointer-events',
  position: 'position',
  presentationLevel: 'presentation-level',
  quotes: 'quotes',
  regionFragment: 'region-fragment',
  resize: 'resize',
  rest: 'rest',
  restAfter: 'rest-after',
  restBefore: 'rest-before',
  richness: 'richness',
  right: 'right',
  rotation: 'rotation',
  rotationPoint: 'rotation-point',
  rowGap: 'row-gap',
  rubyAlign: 'ruby-align',
  rubyMerge: 'ruby-merge',
  rubyPosition: 'ruby-position',
  running: 'running',
  scrollBehavior: 'scroll-behavior',
  scrollPadding: 'scroll-padding',
  scrollPaddingBlock: 'scroll-padding-block',
  scrollPaddingBlockEnd: 'scroll-padding-block-end',
  scrollPaddingBlockStart: 'scroll-padding-block-start',
  scrollPaddingBottom: 'scroll-padding-bottom',
  scrollPaddingInline: 'scroll-padding-inline',
  scrollPaddingInlineEnd: 'scroll-padding-inline-end',
  scrollPaddingInlineStart: 'scroll-padding-inline-start',
  scrollPaddingLeft: 'scroll-padding-left',
  scrollPaddingRight: 'scroll-padding-right',
  scrollPaddingTop: 'scroll-padding-top',
  scrollSnapAlign: 'scroll-snap-align',
  scrollSnapMargin: 'scroll-snap-margin',
  scrollSnapMarginBlock: 'scroll-snap-margin-block',
  scrollSnapMarginBlockEnd: 'scroll-snap-margin-block-end',
  scrollSnapMarginBlockStart: 'scroll-snap-margin-block-start',
  scrollSnapMarginBottom: 'scroll-snap-margin-bottom',
  scrollSnapMarginInline: 'scroll-snap-margin-inline',
  scrollSnapMarginInlineEnd: 'scroll-snap-margin-inline-end',
  scrollSnapMarginInlineStart: 'scroll-snap-margin-inline-start',
  scrollSnapMarginLeft: 'scroll-snap-margin-left',
  scrollSnapMarginRight: 'scroll-snap-margin-right',
  scrollSnapMarginTop: 'scroll-snap-margin-top',
  scrollSnapStop: 'scroll-snap-stop',
  scrollSnapType: 'scroll-snap-type',
  scrollbarGutter: 'scrollbar-gutter',
  shapeImageThreshold: 'shape-image-threshold',
  shapeInside: 'shape-inside',
  shapeMargin: 'shape-margin',
  shapeOutside: 'shape-outside',
  speak: 'speak',
  speakAs: 'speak-as',
  speakHeader: 'speak-header',
  speakNumeral: 'speak-numeral',
  speakPunctuation: 'speak-punctuation',
  speechRate: 'speech-rate',
  stress: 'stress',
  stringSet: 'string-set',
  stroke: 'stroke',
  strokeAlign: 'stroke-align',
  strokeAlignment: 'stroke-alignment',
  strokeBreak: 'stroke-break',
  strokeColor: 'stroke-color',
  strokeDashCorner: 'stroke-dash-corner',
  strokeDashJustify: 'stroke-dash-justify',
  strokeDashadjust: 'stroke-dashadjust',
  strokeDasharray: 'stroke-dasharray',
  strokeDashcorner: 'stroke-dashcorner',
  strokeDashoffset: 'stroke-dashoffset',
  strokeImage: 'stroke-image',
  strokeLinecap: 'stroke-linecap',
  strokeLinejoin: 'stroke-linejoin',
  strokeMiterlimit: 'stroke-miterlimit',
  strokeOpacity: 'stroke-opacity',
  strokeOrigin: 'stroke-origin',
  strokePosition: 'stroke-position',
  strokeRepeat: 'stroke-repeat',
  strokeSize: 'stroke-size',
  strokeWidth: 'stroke-width',
  tabSize: 'tab-size',
  tableLayout: 'table-layout',
  textAlign: 'text-align',
  textAlignAll: 'text-align-all',
  textAlignLast: 'text-align-last',
  textCombineUpright: 'text-combine-upright',
  textDecoration: 'text-decoration',
  textDecorationColor: 'text-decoration-color',
  textDecorationLine: 'text-decoration-line',
  textDecorationSkip: 'text-decoration-skip',
  textDecorationStyle: 'text-decoration-style',
  textEmphasis: 'text-emphasis',
  textEmphasisColor: 'text-emphasis-color',
  textEmphasisPosition: 'text-emphasis-position',
  textEmphasisStyle: 'text-emphasis-style',
  textIndent: 'text-indent',
  textJustify: 'text-justify',
  textOrientation: 'text-orientation',
  textOverflow: 'text-overflow',
  textShadow: 'text-shadow',
  textSpaceCollapse: 'text-space-collapse',
  textSpaceTrim: 'text-space-trim',
  textSpacing: 'text-spacing',
  textTransform: 'text-transform',
  textUnderlinePosition: 'text-underline-position',
  textWrap: 'text-wrap',
  top: 'top',
  transform: 'transform',
  transformBox: 'transform-box',
  transformOrigin: 'transform-origin',
  transformStyle: 'transform-style',
  transition: 'transition',
  transitionDelay: 'transition-delay',
  transitionDuration: 'transition-duration',
  transitionProperty: 'transition-property',
  transitionTimingFunction: 'transition-timing-function',
  unicodeBidi: 'unicode-bidi',
  userSelect: 'user-select',
  verticalAlign: 'vertical-align',
  visibility: 'visibility',
  voiceBalance: 'voice-balance',
  voiceDuration: 'voice-duration',
  voiceFamily: 'voice-family',
  voicePitch: 'voice-pitch',
  voiceRange: 'voice-range',
  voiceRate: 'voice-rate',
  voiceStress: 'voice-stress',
  voiceVolume: 'voice-volume',
  volume: 'volume',
  whiteSpace: 'white-space',
  widows: 'widows',
  width: 'width',
  willChange: 'will-change',
  wordBreak: 'word-break',
  wordSpacing: 'word-spacing',
  wordWrap: 'word-wrap',
  wrapAfter: 'wrap-after',
  wrapBefore: 'wrap-before',
  wrapFlow: 'wrap-flow',
  wrapInside: 'wrap-inside',
  wrapThrough: 'wrap-through',
  writingMode: 'writing-mode',
  zIndex: 'z-index'
};

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

var _arrayReduce = arrayReduce;

/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyOf(object) {
  return function(key) {
    return object == null ? undefined : object[key];
  };
}

var _basePropertyOf = basePropertyOf;

/** Used to map Latin Unicode letters to basic Latin letters. */
var deburredLetters = {
  // Latin-1 Supplement block.
  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
  '\xc7': 'C',  '\xe7': 'c',
  '\xd0': 'D',  '\xf0': 'd',
  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
  '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
  '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
  '\xd1': 'N',  '\xf1': 'n',
  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
  '\xc6': 'Ae', '\xe6': 'ae',
  '\xde': 'Th', '\xfe': 'th',
  '\xdf': 'ss',
  // Latin Extended-A block.
  '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
  '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
  '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
  '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
  '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
  '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
  '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
  '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
  '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
  '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
  '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
  '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
  '\u0134': 'J',  '\u0135': 'j',
  '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
  '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
  '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
  '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
  '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
  '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
  '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
  '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
  '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
  '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
  '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
  '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
  '\u0163': 't',  '\u0165': 't', '\u0167': 't',
  '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
  '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
  '\u0174': 'W',  '\u0175': 'w',
  '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
  '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
  '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
  '\u0132': 'IJ', '\u0133': 'ij',
  '\u0152': 'Oe', '\u0153': 'oe',
  '\u0149': "'n", '\u017f': 's'
};

/**
 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */
var deburrLetter = _basePropertyOf(deburredLetters);

var _deburrLetter = deburrLetter;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

var _freeGlobal = freeGlobal;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = _freeGlobal || freeSelf || Function('return this')();

var _root = root;

/** Built-in value references. */
var Symbol$1 = _root.Symbol;

var _Symbol = Symbol$1;

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

var _arrayMap = arrayMap;

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

var isArray_1 = isArray;

/** Used for built-in method references. */
var objectProto$4 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$3 = objectProto$4.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$4.toString;

/** Built-in value references. */
var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty$3.call(value, symToStringTag$1),
      tag = value[symToStringTag$1];

  try {
    value[symToStringTag$1] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}

var _getRawTag = getRawTag;

/** Used for built-in method references. */
var objectProto$3 = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto$3.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

var _objectToString = objectToString;

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? _getRawTag(value)
    : _objectToString(value);
}

var _baseGetTag = baseGetTag;

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

var isObjectLike_1 = isObjectLike;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike_1(value) && _baseGetTag(value) == symbolTag);
}

var isSymbol_1 = isSymbol;

/** Used as references for various `Number` constants. */
var INFINITY$3 = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = _Symbol ? _Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray_1(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return _arrayMap(value, baseToString) + '';
  }
  if (isSymbol_1(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY$3) ? '-0' : result;
}

var _baseToString = baseToString;

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : _baseToString(value);
}

var toString_1 = toString;

/** Used to match Latin Unicode letters (excluding mathematical operators). */
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

/** Used to compose unicode character classes. */
var rsComboMarksRange$1 = '\\u0300-\\u036f',
    reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange$1 = '\\u20d0-\\u20ff',
    rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;

/** Used to compose unicode capture groups. */
var rsCombo$1 = '[' + rsComboRange$1 + ']';

/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */
var reComboMark = RegExp(rsCombo$1, 'g');

/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */
function deburr(string) {
  string = toString_1(string);
  return string && string.replace(reLatin, _deburrLetter).replace(reComboMark, '');
}

var deburr_1 = deburr;

/** Used to match words composed of alphanumeric characters. */
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function asciiWords(string) {
  return string.match(reAsciiWord) || [];
}

var _asciiWords = asciiWords;

/** Used to detect strings that need a more robust regexp to match words. */
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */
function hasUnicodeWord(string) {
  return reHasUnicodeWord.test(string);
}

var _hasUnicodeWord = hasUnicodeWord;

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsDingbatRange = '\\u2700-\\u27bf',
    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    rsPunctuationRange = '\\u2000-\\u206f',
    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    rsVarRange = '\\ufe0e\\ufe0f',
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

/** Used to compose unicode capture groups. */
var rsApos$1 = "['\u2019]",
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsDigits = '\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptContrLower = '(?:' + rsApos$1 + '(?:d|ll|m|re|s|t|ve))?',
    rsOptContrUpper = '(?:' + rsApos$1 + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
    rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;

/** Used to match complex or compound words. */
var reUnicodeWord = RegExp([
  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
  rsUpper + '+' + rsOptContrUpper,
  rsOrdUpper,
  rsOrdLower,
  rsDigits,
  rsEmoji
].join('|'), 'g');

/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function unicodeWords(string) {
  return string.match(reUnicodeWord) || [];
}

var _unicodeWords = unicodeWords;

/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */
function words(string, pattern, guard) {
  string = toString_1(string);
  pattern = guard ? undefined : pattern;

  if (pattern === undefined) {
    return _hasUnicodeWord(string) ? _unicodeWords(string) : _asciiWords(string);
  }
  return string.match(pattern) || [];
}

var words_1 = words;

/** Used to compose unicode capture groups. */
var rsApos = "['\u2019]";

/** Used to match apostrophes. */
var reApos = RegExp(rsApos, 'g');

/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */
function createCompounder(callback) {
  return function(string) {
    return _arrayReduce(words_1(deburr_1(string).replace(reApos, '')), callback, '');
  };
}

var _createCompounder = createCompounder;

/**
 * Converts `string` to
 * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the kebab cased string.
 * @example
 *
 * _.kebabCase('Foo Bar');
 * // => 'foo-bar'
 *
 * _.kebabCase('fooBar');
 * // => 'foo-bar'
 *
 * _.kebabCase('__FOO_BAR__');
 * // => 'foo-bar'
 */
var kebabCase = _createCompounder(function(result, word, index) {
  return result + (index ? '-' : '') + word.toLowerCase();
});

var kebabCase_1 = kebabCase;

var tinycolor = createCommonjsModule(function (module) {
// TinyColor v1.4.2
// https://github.com/bgrins/TinyColor
// Brian Grinstead, MIT License

(function(Math) {

var trimLeft = /^\s+/,
    trimRight = /\s+$/,
    tinyCounter = 0,
    mathRound = Math.round,
    mathMin = Math.min,
    mathMax = Math.max,
    mathRandom = Math.random;

function tinycolor (color, opts) {

    color = (color) ? color : '';
    opts = opts || { };

    // If input is already a tinycolor, return itself
    if (color instanceof tinycolor) {
       return color;
    }
    // If we are called as a function, call using new instead
    if (!(this instanceof tinycolor)) {
        return new tinycolor(color, opts);
    }

    var rgb = inputToRGB(color);
    this._originalInput = color,
    this._r = rgb.r,
    this._g = rgb.g,
    this._b = rgb.b,
    this._a = rgb.a,
    this._roundA = mathRound(100*this._a) / 100,
    this._format = opts.format || rgb.format;
    this._gradientType = opts.gradientType;

    // Don't let the range of [0,255] come back in [0,1].
    // Potentially lose a little bit of precision here, but will fix issues where
    // .5 gets interpreted as half of the total, instead of half of 1
    // If it was supposed to be 128, this was already taken care of by `inputToRgb`
    if (this._r < 1) { this._r = mathRound(this._r); }
    if (this._g < 1) { this._g = mathRound(this._g); }
    if (this._b < 1) { this._b = mathRound(this._b); }

    this._ok = rgb.ok;
    this._tc_id = tinyCounter++;
}

tinycolor.prototype = {
    isDark: function() {
        return this.getBrightness() < 128;
    },
    isLight: function() {
        return !this.isDark();
    },
    isValid: function() {
        return this._ok;
    },
    getOriginalInput: function() {
      return this._originalInput;
    },
    getFormat: function() {
        return this._format;
    },
    getAlpha: function() {
        return this._a;
    },
    getBrightness: function() {
        //http://www.w3.org/TR/AERT#color-contrast
        var rgb = this.toRgb();
        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
    },
    getLuminance: function() {
        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
        var rgb = this.toRgb();
        var RsRGB, GsRGB, BsRGB, R, G, B;
        RsRGB = rgb.r/255;
        GsRGB = rgb.g/255;
        BsRGB = rgb.b/255;

        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}
        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}
        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}
        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);
    },
    setAlpha: function(value) {
        this._a = boundAlpha(value);
        this._roundA = mathRound(100*this._a) / 100;
        return this;
    },
    toHsv: function() {
        var hsv = rgbToHsv(this._r, this._g, this._b);
        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };
    },
    toHsvString: function() {
        var hsv = rgbToHsv(this._r, this._g, this._b);
        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);
        return (this._a == 1) ?
          "hsv("  + h + ", " + s + "%, " + v + "%)" :
          "hsva(" + h + ", " + s + "%, " + v + "%, "+ this._roundA + ")";
    },
    toHsl: function() {
        var hsl = rgbToHsl(this._r, this._g, this._b);
        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };
    },
    toHslString: function() {
        var hsl = rgbToHsl(this._r, this._g, this._b);
        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);
        return (this._a == 1) ?
          "hsl("  + h + ", " + s + "%, " + l + "%)" :
          "hsla(" + h + ", " + s + "%, " + l + "%, "+ this._roundA + ")";
    },
    toHex: function(allow3Char) {
        return rgbToHex(this._r, this._g, this._b, allow3Char);
    },
    toHexString: function(allow3Char) {
        return '#' + this.toHex(allow3Char);
    },
    toHex8: function(allow4Char) {
        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
    },
    toHex8String: function(allow4Char) {
        return '#' + this.toHex8(allow4Char);
    },
    toRgb: function() {
        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };
    },
    toRgbString: function() {
        return (this._a == 1) ?
          "rgb("  + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" :
          "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
    },
    toPercentageRgb: function() {
        return { r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a };
    },
    toPercentageRgbString: function() {
        return (this._a == 1) ?
          "rgb("  + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" :
          "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
    },
    toName: function() {
        if (this._a === 0) {
            return "transparent";
        }

        if (this._a < 1) {
            return false;
        }

        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
    },
    toFilter: function(secondColor) {
        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
        var secondHex8String = hex8String;
        var gradientType = this._gradientType ? "GradientType = 1, " : "";

        if (secondColor) {
            var s = tinycolor(secondColor);
            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
        }

        return "progid:DXImageTransform.Microsoft.gradient("+gradientType+"startColorstr="+hex8String+",endColorstr="+secondHex8String+")";
    },
    toString: function(format) {
        var formatSet = !!format;
        format = format || this._format;

        var formattedString = false;
        var hasAlpha = this._a < 1 && this._a >= 0;
        var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");

        if (needsAlphaFormat) {
            // Special case for "transparent", all other non-alpha formats
            // will return rgba when there is transparency.
            if (format === "name" && this._a === 0) {
                return this.toName();
            }
            return this.toRgbString();
        }
        if (format === "rgb") {
            formattedString = this.toRgbString();
        }
        if (format === "prgb") {
            formattedString = this.toPercentageRgbString();
        }
        if (format === "hex" || format === "hex6") {
            formattedString = this.toHexString();
        }
        if (format === "hex3") {
            formattedString = this.toHexString(true);
        }
        if (format === "hex4") {
            formattedString = this.toHex8String(true);
        }
        if (format === "hex8") {
            formattedString = this.toHex8String();
        }
        if (format === "name") {
            formattedString = this.toName();
        }
        if (format === "hsl") {
            formattedString = this.toHslString();
        }
        if (format === "hsv") {
            formattedString = this.toHsvString();
        }

        return formattedString || this.toHexString();
    },
    clone: function() {
        return tinycolor(this.toString());
    },

    _applyModification: function(fn, args) {
        var color = fn.apply(null, [this].concat([].slice.call(args)));
        this._r = color._r;
        this._g = color._g;
        this._b = color._b;
        this.setAlpha(color._a);
        return this;
    },
    lighten: function() {
        return this._applyModification(lighten, arguments);
    },
    brighten: function() {
        return this._applyModification(brighten, arguments);
    },
    darken: function() {
        return this._applyModification(darken, arguments);
    },
    desaturate: function() {
        return this._applyModification(desaturate, arguments);
    },
    saturate: function() {
        return this._applyModification(saturate, arguments);
    },
    greyscale: function() {
        return this._applyModification(greyscale, arguments);
    },
    spin: function() {
        return this._applyModification(spin, arguments);
    },

    _applyCombination: function(fn, args) {
        return fn.apply(null, [this].concat([].slice.call(args)));
    },
    analogous: function() {
        return this._applyCombination(analogous, arguments);
    },
    complement: function() {
        return this._applyCombination(complement, arguments);
    },
    monochromatic: function() {
        return this._applyCombination(monochromatic, arguments);
    },
    splitcomplement: function() {
        return this._applyCombination(splitcomplement, arguments);
    },
    triad: function() {
        return this._applyCombination(triad, arguments);
    },
    tetrad: function() {
        return this._applyCombination(tetrad, arguments);
    }
};

// If input is an object, force 1 into "1.0" to handle ratios properly
// String input requires "1.0" as input, so 1 will be treated as 1
tinycolor.fromRatio = function(color, opts) {
    if (typeof color == "object") {
        var newColor = {};
        for (var i in color) {
            if (color.hasOwnProperty(i)) {
                if (i === "a") {
                    newColor[i] = color[i];
                }
                else {
                    newColor[i] = convertToPercentage(color[i]);
                }
            }
        }
        color = newColor;
    }

    return tinycolor(color, opts);
};

// Given a string or object, convert that input to RGB
// Possible string inputs:
//
//     "red"
//     "#f00" or "f00"
//     "#ff0000" or "ff0000"
//     "#ff000000" or "ff000000"
//     "rgb 255 0 0" or "rgb (255, 0, 0)"
//     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
//     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
//     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
//     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
//     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
//     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
//
function inputToRGB(color) {

    var rgb = { r: 0, g: 0, b: 0 };
    var a = 1;
    var s = null;
    var v = null;
    var l = null;
    var ok = false;
    var format = false;

    if (typeof color == "string") {
        color = stringInputToObject(color);
    }

    if (typeof color == "object") {
        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
            rgb = rgbToRgb(color.r, color.g, color.b);
            ok = true;
            format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
        }
        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
            s = convertToPercentage(color.s);
            v = convertToPercentage(color.v);
            rgb = hsvToRgb(color.h, s, v);
            ok = true;
            format = "hsv";
        }
        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
            s = convertToPercentage(color.s);
            l = convertToPercentage(color.l);
            rgb = hslToRgb(color.h, s, l);
            ok = true;
            format = "hsl";
        }

        if (color.hasOwnProperty("a")) {
            a = color.a;
        }
    }

    a = boundAlpha(a);

    return {
        ok: ok,
        format: color.format || format,
        r: mathMin(255, mathMax(rgb.r, 0)),
        g: mathMin(255, mathMax(rgb.g, 0)),
        b: mathMin(255, mathMax(rgb.b, 0)),
        a: a
    };
}


// Conversion Functions
// --------------------

// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

// `rgbToRgb`
// Handle bounds / percentage checking to conform to CSS color spec
// <http://www.w3.org/TR/css3-color/>
// *Assumes:* r, g, b in [0, 255] or [0, 1]
// *Returns:* { r, g, b } in [0, 255]
function rgbToRgb(r, g, b){
    return {
        r: bound01(r, 255) * 255,
        g: bound01(g, 255) * 255,
        b: bound01(b, 255) * 255
    };
}

// `rgbToHsl`
// Converts an RGB color value to HSL.
// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
// *Returns:* { h, s, l } in [0,1]
function rgbToHsl(r, g, b) {

    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);

    var max = mathMax(r, g, b), min = mathMin(r, g, b);
    var h, s, l = (max + min) / 2;

    if(max == min) {
        h = s = 0; // achromatic
    }
    else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch(max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }

        h /= 6;
    }

    return { h: h, s: s, l: l };
}

// `hslToRgb`
// Converts an HSL color value to RGB.
// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
// *Returns:* { r, g, b } in the set [0, 255]
function hslToRgb(h, s, l) {
    var r, g, b;

    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);

    function hue2rgb(p, q, t) {
        if(t < 0) t += 1;
        if(t > 1) t -= 1;
        if(t < 1/6) return p + (q - p) * 6 * t;
        if(t < 1/2) return q;
        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
        return p;
    }

    if(s === 0) {
        r = g = b = l; // achromatic
    }
    else {
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hue2rgb(p, q, h + 1/3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1/3);
    }

    return { r: r * 255, g: g * 255, b: b * 255 };
}

// `rgbToHsv`
// Converts an RGB color value to HSV
// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
// *Returns:* { h, s, v } in [0,1]
function rgbToHsv(r, g, b) {

    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);

    var max = mathMax(r, g, b), min = mathMin(r, g, b);
    var h, s, v = max;

    var d = max - min;
    s = max === 0 ? 0 : d / max;

    if(max == min) {
        h = 0; // achromatic
    }
    else {
        switch(max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }
        h /= 6;
    }
    return { h: h, s: s, v: v };
}

// `hsvToRgb`
// Converts an HSV color value to RGB.
// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
// *Returns:* { r, g, b } in the set [0, 255]
 function hsvToRgb(h, s, v) {

    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);

    var i = Math.floor(h),
        f = h - i,
        p = v * (1 - s),
        q = v * (1 - f * s),
        t = v * (1 - (1 - f) * s),
        mod = i % 6,
        r = [v, q, p, p, t, v][mod],
        g = [t, v, v, q, p, p][mod],
        b = [p, p, t, v, v, q][mod];

    return { r: r * 255, g: g * 255, b: b * 255 };
}

// `rgbToHex`
// Converts an RGB color to hex
// Assumes r, g, and b are contained in the set [0, 255]
// Returns a 3 or 6 character hex
function rgbToHex(r, g, b, allow3Char) {

    var hex = [
        pad2(mathRound(r).toString(16)),
        pad2(mathRound(g).toString(16)),
        pad2(mathRound(b).toString(16))
    ];

    // Return a 3 character hex if possible
    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    }

    return hex.join("");
}

// `rgbaToHex`
// Converts an RGBA color plus alpha transparency to hex
// Assumes r, g, b are contained in the set [0, 255] and
// a in [0, 1]. Returns a 4 or 8 character rgba hex
function rgbaToHex(r, g, b, a, allow4Char) {

    var hex = [
        pad2(mathRound(r).toString(16)),
        pad2(mathRound(g).toString(16)),
        pad2(mathRound(b).toString(16)),
        pad2(convertDecimalToHex(a))
    ];

    // Return a 4 character hex if possible
    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
    }

    return hex.join("");
}

// `rgbaToArgbHex`
// Converts an RGBA color to an ARGB Hex8 string
// Rarely used, but required for "toFilter()"
function rgbaToArgbHex(r, g, b, a) {

    var hex = [
        pad2(convertDecimalToHex(a)),
        pad2(mathRound(r).toString(16)),
        pad2(mathRound(g).toString(16)),
        pad2(mathRound(b).toString(16))
    ];

    return hex.join("");
}

// `equals`
// Can be called with any tinycolor input
tinycolor.equals = function (color1, color2) {
    if (!color1 || !color2) { return false; }
    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
};

tinycolor.random = function() {
    return tinycolor.fromRatio({
        r: mathRandom(),
        g: mathRandom(),
        b: mathRandom()
    });
};


// Modification Functions
// ----------------------
// Thanks to less.js for some of the basics here
// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

function desaturate(color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.s -= amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
}

function saturate(color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.s += amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
}

function greyscale(color) {
    return tinycolor(color).desaturate(100);
}

function lighten (color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
}

function brighten(color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var rgb = tinycolor(color).toRgb();
    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));
    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));
    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));
    return tinycolor(rgb);
}

function darken (color, amount) {
    amount = (amount === 0) ? 0 : (amount || 10);
    var hsl = tinycolor(color).toHsl();
    hsl.l -= amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
}

// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
// Values outside of this range will be wrapped into this range.
function spin(color, amount) {
    var hsl = tinycolor(color).toHsl();
    var hue = (hsl.h + amount) % 360;
    hsl.h = hue < 0 ? 360 + hue : hue;
    return tinycolor(hsl);
}

// Combination Functions
// ---------------------
// Thanks to jQuery xColor for some of the ideas behind these
// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

function complement(color) {
    var hsl = tinycolor(color).toHsl();
    hsl.h = (hsl.h + 180) % 360;
    return tinycolor(hsl);
}

function triad(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [
        tinycolor(color),
        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),
        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })
    ];
}

function tetrad(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [
        tinycolor(color),
        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),
        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),
        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })
    ];
}

function splitcomplement(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [
        tinycolor(color),
        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),
        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})
    ];
}

function analogous(color, results, slices) {
    results = results || 6;
    slices = slices || 30;

    var hsl = tinycolor(color).toHsl();
    var part = 360 / slices;
    var ret = [tinycolor(color)];

    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {
        hsl.h = (hsl.h + part) % 360;
        ret.push(tinycolor(hsl));
    }
    return ret;
}

function monochromatic(color, results) {
    results = results || 6;
    var hsv = tinycolor(color).toHsv();
    var h = hsv.h, s = hsv.s, v = hsv.v;
    var ret = [];
    var modification = 1 / results;

    while (results--) {
        ret.push(tinycolor({ h: h, s: s, v: v}));
        v = (v + modification) % 1;
    }

    return ret;
}

// Utility Functions
// ---------------------

tinycolor.mix = function(color1, color2, amount) {
    amount = (amount === 0) ? 0 : (amount || 50);

    var rgb1 = tinycolor(color1).toRgb();
    var rgb2 = tinycolor(color2).toRgb();

    var p = amount / 100;

    var rgba = {
        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,
        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,
        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,
        a: ((rgb2.a - rgb1.a) * p) + rgb1.a
    };

    return tinycolor(rgba);
};


// Readability Functions
// ---------------------
// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)

// `contrast`
// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
tinycolor.readability = function(color1, color2) {
    var c1 = tinycolor(color1);
    var c2 = tinycolor(color2);
    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);
};

// `isReadable`
// Ensure that foreground and background color combinations meet WCAG2 guidelines.
// The third argument is an optional Object.
//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
// If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.

// *Example*
//    tinycolor.isReadable("#000", "#111") => false
//    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
tinycolor.isReadable = function(color1, color2, wcag2) {
    var readability = tinycolor.readability(color1, color2);
    var wcag2Parms, out;

    out = false;

    wcag2Parms = validateWCAG2Parms(wcag2);
    switch (wcag2Parms.level + wcag2Parms.size) {
        case "AAsmall":
        case "AAAlarge":
            out = readability >= 4.5;
            break;
        case "AAlarge":
            out = readability >= 3;
            break;
        case "AAAsmall":
            out = readability >= 7;
            break;
    }
    return out;

};

// `mostReadable`
// Given a base color and a list of possible foreground or background
// colors for that base, returns the most readable color.
// Optionally returns Black or White if the most readable color is unreadable.
// *Example*
//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
//    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
//    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
tinycolor.mostReadable = function(baseColor, colorList, args) {
    var bestColor = null;
    var bestScore = 0;
    var readability;
    var includeFallbackColors, level, size ;
    args = args || {};
    includeFallbackColors = args.includeFallbackColors ;
    level = args.level;
    size = args.size;

    for (var i= 0; i < colorList.length ; i++) {
        readability = tinycolor.readability(baseColor, colorList[i]);
        if (readability > bestScore) {
            bestScore = readability;
            bestColor = tinycolor(colorList[i]);
        }
    }

    if (tinycolor.isReadable(baseColor, bestColor, {"level":level,"size":size}) || !includeFallbackColors) {
        return bestColor;
    }
    else {
        args.includeFallbackColors=false;
        return tinycolor.mostReadable(baseColor,["#fff", "#000"],args);
    }
};


// Big List of Colors
// ------------------
// <http://www.w3.org/TR/css3-color/#svg-color>
var names = tinycolor.names = {
    aliceblue: "f0f8ff",
    antiquewhite: "faebd7",
    aqua: "0ff",
    aquamarine: "7fffd4",
    azure: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "000",
    blanchedalmond: "ffebcd",
    blue: "00f",
    blueviolet: "8a2be2",
    brown: "a52a2a",
    burlywood: "deb887",
    burntsienna: "ea7e5d",
    cadetblue: "5f9ea0",
    chartreuse: "7fff00",
    chocolate: "d2691e",
    coral: "ff7f50",
    cornflowerblue: "6495ed",
    cornsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "0ff",
    darkblue: "00008b",
    darkcyan: "008b8b",
    darkgoldenrod: "b8860b",
    darkgray: "a9a9a9",
    darkgreen: "006400",
    darkgrey: "a9a9a9",
    darkkhaki: "bdb76b",
    darkmagenta: "8b008b",
    darkolivegreen: "556b2f",
    darkorange: "ff8c00",
    darkorchid: "9932cc",
    darkred: "8b0000",
    darksalmon: "e9967a",
    darkseagreen: "8fbc8f",
    darkslateblue: "483d8b",
    darkslategray: "2f4f4f",
    darkslategrey: "2f4f4f",
    darkturquoise: "00ced1",
    darkviolet: "9400d3",
    deeppink: "ff1493",
    deepskyblue: "00bfff",
    dimgray: "696969",
    dimgrey: "696969",
    dodgerblue: "1e90ff",
    firebrick: "b22222",
    floralwhite: "fffaf0",
    forestgreen: "228b22",
    fuchsia: "f0f",
    gainsboro: "dcdcdc",
    ghostwhite: "f8f8ff",
    gold: "ffd700",
    goldenrod: "daa520",
    gray: "808080",
    green: "008000",
    greenyellow: "adff2f",
    grey: "808080",
    honeydew: "f0fff0",
    hotpink: "ff69b4",
    indianred: "cd5c5c",
    indigo: "4b0082",
    ivory: "fffff0",
    khaki: "f0e68c",
    lavender: "e6e6fa",
    lavenderblush: "fff0f5",
    lawngreen: "7cfc00",
    lemonchiffon: "fffacd",
    lightblue: "add8e6",
    lightcoral: "f08080",
    lightcyan: "e0ffff",
    lightgoldenrodyellow: "fafad2",
    lightgray: "d3d3d3",
    lightgreen: "90ee90",
    lightgrey: "d3d3d3",
    lightpink: "ffb6c1",
    lightsalmon: "ffa07a",
    lightseagreen: "20b2aa",
    lightskyblue: "87cefa",
    lightslategray: "789",
    lightslategrey: "789",
    lightsteelblue: "b0c4de",
    lightyellow: "ffffe0",
    lime: "0f0",
    limegreen: "32cd32",
    linen: "faf0e6",
    magenta: "f0f",
    maroon: "800000",
    mediumaquamarine: "66cdaa",
    mediumblue: "0000cd",
    mediumorchid: "ba55d3",
    mediumpurple: "9370db",
    mediumseagreen: "3cb371",
    mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a",
    mediumturquoise: "48d1cc",
    mediumvioletred: "c71585",
    midnightblue: "191970",
    mintcream: "f5fffa",
    mistyrose: "ffe4e1",
    moccasin: "ffe4b5",
    navajowhite: "ffdead",
    navy: "000080",
    oldlace: "fdf5e6",
    olive: "808000",
    olivedrab: "6b8e23",
    orange: "ffa500",
    orangered: "ff4500",
    orchid: "da70d6",
    palegoldenrod: "eee8aa",
    palegreen: "98fb98",
    paleturquoise: "afeeee",
    palevioletred: "db7093",
    papayawhip: "ffefd5",
    peachpuff: "ffdab9",
    peru: "cd853f",
    pink: "ffc0cb",
    plum: "dda0dd",
    powderblue: "b0e0e6",
    purple: "800080",
    rebeccapurple: "663399",
    red: "f00",
    rosybrown: "bc8f8f",
    royalblue: "4169e1",
    saddlebrown: "8b4513",
    salmon: "fa8072",
    sandybrown: "f4a460",
    seagreen: "2e8b57",
    seashell: "fff5ee",
    sienna: "a0522d",
    silver: "c0c0c0",
    skyblue: "87ceeb",
    slateblue: "6a5acd",
    slategray: "708090",
    slategrey: "708090",
    snow: "fffafa",
    springgreen: "00ff7f",
    steelblue: "4682b4",
    tan: "d2b48c",
    teal: "008080",
    thistle: "d8bfd8",
    tomato: "ff6347",
    turquoise: "40e0d0",
    violet: "ee82ee",
    wheat: "f5deb3",
    white: "fff",
    whitesmoke: "f5f5f5",
    yellow: "ff0",
    yellowgreen: "9acd32"
};

// Make it easy to access colors via `hexNames[hex]`
var hexNames = tinycolor.hexNames = flip(names);


// Utilities
// ---------

// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
function flip(o) {
    var flipped = { };
    for (var i in o) {
        if (o.hasOwnProperty(i)) {
            flipped[o[i]] = i;
        }
    }
    return flipped;
}

// Return a valid alpha value [0,1] with all invalid values being set to 1
function boundAlpha(a) {
    a = parseFloat(a);

    if (isNaN(a) || a < 0 || a > 1) {
        a = 1;
    }

    return a;
}

// Take input from [0, n] and return it as [0, 1]
function bound01(n, max) {
    if (isOnePointZero(n)) { n = "100%"; }

    var processPercent = isPercentage(n);
    n = mathMin(max, mathMax(0, parseFloat(n)));

    // Automatically convert percentage into number
    if (processPercent) {
        n = parseInt(n * max, 10) / 100;
    }

    // Handle floating point rounding errors
    if ((Math.abs(n - max) < 0.000001)) {
        return 1;
    }

    // Convert into [0, 1] range if it isn't already
    return (n % max) / parseFloat(max);
}

// Force a number between 0 and 1
function clamp01(val) {
    return mathMin(1, mathMax(0, val));
}

// Parse a base-16 hex value into a base-10 integer
function parseIntFromHex(val) {
    return parseInt(val, 16);
}

// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
function isOnePointZero(n) {
    return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
}

// Check to see if string passed in is a percentage
function isPercentage(n) {
    return typeof n === "string" && n.indexOf('%') != -1;
}

// Force a hex value to have 2 characters
function pad2(c) {
    return c.length == 1 ? '0' + c : '' + c;
}

// Replace a decimal with it's percentage value
function convertToPercentage(n) {
    if (n <= 1) {
        n = (n * 100) + "%";
    }

    return n;
}

// Converts a decimal to a hex value
function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
}
// Converts a hex value to a decimal
function convertHexToDecimal(h) {
    return (parseIntFromHex(h) / 255);
}

var matchers = (function() {

    // <http://www.w3.org/TR/css3-values/#integers>
    var CSS_INTEGER = "[-\\+]?\\d+%?";

    // <http://www.w3.org/TR/css3-values/#number-value>
    var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

    // Actual matching.
    // Parentheses and commas are optional, but not required.
    // Whitespace can take the place of commas or opening paren
    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";

    return {
        CSS_UNIT: new RegExp(CSS_UNIT),
        rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
        rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
        hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
        hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
        hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
        hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
    };
})();

// `isValidCSSUnit`
// Take in a single string / number and check to see if it looks like a CSS unit
// (see `matchers` above for definition).
function isValidCSSUnit(color) {
    return !!matchers.CSS_UNIT.exec(color);
}

// `stringInputToObject`
// Permissive string parsing.  Take in a number of formats, and output an object
// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
function stringInputToObject(color) {

    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();
    var named = false;
    if (names[color]) {
        color = names[color];
        named = true;
    }
    else if (color == 'transparent') {
        return { r: 0, g: 0, b: 0, a: 0, format: "name" };
    }

    // Try to match string input using regular expressions.
    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
    // Just return an object and let the conversion functions handle that.
    // This way the result will be the same whether the tinycolor is initialized with string or object.
    var match;
    if ((match = matchers.rgb.exec(color))) {
        return { r: match[1], g: match[2], b: match[3] };
    }
    if ((match = matchers.rgba.exec(color))) {
        return { r: match[1], g: match[2], b: match[3], a: match[4] };
    }
    if ((match = matchers.hsl.exec(color))) {
        return { h: match[1], s: match[2], l: match[3] };
    }
    if ((match = matchers.hsla.exec(color))) {
        return { h: match[1], s: match[2], l: match[3], a: match[4] };
    }
    if ((match = matchers.hsv.exec(color))) {
        return { h: match[1], s: match[2], v: match[3] };
    }
    if ((match = matchers.hsva.exec(color))) {
        return { h: match[1], s: match[2], v: match[3], a: match[4] };
    }
    if ((match = matchers.hex8.exec(color))) {
        return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            a: convertHexToDecimal(match[4]),
            format: named ? "name" : "hex8"
        };
    }
    if ((match = matchers.hex6.exec(color))) {
        return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            format: named ? "name" : "hex"
        };
    }
    if ((match = matchers.hex4.exec(color))) {
        return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            a: convertHexToDecimal(match[4] + '' + match[4]),
            format: named ? "name" : "hex8"
        };
    }
    if ((match = matchers.hex3.exec(color))) {
        return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            format: named ? "name" : "hex"
        };
    }

    return false;
}

function validateWCAG2Parms(parms) {
    // return valid WCAG2 parms for isReadable.
    // If input parms are invalid, return {"level":"AA", "size":"small"}
    var level, size;
    parms = parms || {"level":"AA", "size":"small"};
    level = (parms.level || "AA").toUpperCase();
    size = (parms.size || "small").toLowerCase();
    if (level !== "AA" && level !== "AAA") {
        level = "AA";
    }
    if (size !== "small" && size !== "large") {
        size = "small";
    }
    return {"level":level, "size":size};
}

// Node: Export function
if (module.exports) {
    module.exports = tinycolor;
}
// AMD/requirejs: Define the module
else {
    window.tinycolor = tinycolor;
}

})(Math);
});

var isFunction$2 = function isFunction(obj) {
  return typeof obj === 'function';
};

function get$1(obj, path, fallback, index) {
  var _path$split, _path, _path$split2;

  //@ts-ignore
  path = (_path$split = (_path = path) === null || _path === void 0 ? void 0 : (_path$split2 = _path.split) === null || _path$split2 === void 0 ? void 0 : _path$split2.call(_path, '.')) !== null && _path$split !== void 0 ? _path$split : [path];

  for (index = 0; index < path.length; index++) {
    obj = obj ? obj[path[index]] : undefined;
  }

  return obj === undefined ? fallback : obj;
}

var BLACK = '#000000';
var WHITE = '#ffffff';
function darken(scale, color) {
  return function (_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        theme = _ref.theme;

    var themeColor = palette(color, null, {
      useCSSVariables: false
    })({
      theme: theme
    });
    return tinycolor(themeColor).darken(scale * 100).toHexString();
  };
}
function lighten(scale, color) {
  return function (_temp2) {
    var _ref2 = _temp2 === void 0 ? {} : _temp2,
        theme = _ref2.theme;

    var themeColor = palette(color, null, {
      useCSSVariables: false
    })({
      theme: theme
    });
    return tinycolor(themeColor).lighten(scale * 100).toHexString();
  };
}
function shade(scale, color) {
  return function (_temp3) {
    var _ref3 = _temp3 === void 0 ? {} : _temp3,
        backgroundColor = _ref3.backgroundColor,
        colorMode = _ref3.colorMode,
        theme = _ref3.theme;

    var themeColor = palette(color, null, {
      useCSSVariables: false
    })({
      theme: theme
    });
    if (themeColor === 'transparent') return themeColor;
    var targetColor = BLACK;

    if (colorMode === 'dark') {
      targetColor = backgroundColor;
    }

    return tinycolor.mix(themeColor, targetColor, scale * 100).toHexString();
  };
}
function tint(scale, color) {
  return function (_temp4) {
    var _ref4 = _temp4 === void 0 ? {} : _temp4,
        backgroundColor = _ref4.backgroundColor,
        colorMode = _ref4.colorMode,
        theme = _ref4.theme;

    var themeColor = palette(color, null, {
      useCSSVariables: false
    })({
      theme: theme
    });
    if (themeColor === 'transparent') return themeColor;
    var targetColor = WHITE;

    if (colorMode === 'default') {
      targetColor = backgroundColor;
    }

    return tinycolor.mix(themeColor, targetColor, scale * 100).toHexString();
  };
}
function readableColor(color) {
  return function (_temp5) {
    var _ref5 = _temp5 === void 0 ? {} : _temp5,
        theme = _ref5.theme;

    var themeColor = palette(color, null, {
      useCSSVariables: false
    })({
      theme: theme
    });
    var isReadable = tinycolor.isReadable(BLACK, themeColor);

    if (!isReadable) {
      return WHITE;
    }

    return BLACK;
  };
}
function isRGB(string) {
  return /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/.test(string);
}
function isRGBA(string) {
  return /^rgba\((\d{1,3}%?),\s*(\d{1,3}%?),\s*(\d{1,3}%?),\s*(\d*(?:\.\d+)?)\)$/.test(string);
}
function isHex(string) {
  return /#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})\b/gi.test(string);
}
function isHSL(string) {
  return /^hsl\(\s*(\d+)\s*,\s*(\d*(?:\.\d+)?%)\s*,\s*(\d*(?:\.\d+)?%)\)$/.test(string);
}
function isHSLA(string) {
  return /^hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*(\d*(?:\.\d+)?)\)$/.test(string);
}
function isRGBOrHSLOrHex(string) {
  return isRGB(string) || isRGBA(string) || isHSL(string) || isHSLA(string) || isHex(string);
}

var _templateObject$19, _templateObject2$R, _templateObject3$P, _templateObject4$M;
function theme(themeKey, path, defaultValue) {
  return function (props) {
    var colorMode = props.colorMode,
        variant = props.variant;
    var selector = "" + themeKey + (path ? "." + path : '');
    var variantSelector = themeKey + ".variants." + variant + "." + path;
    var colorModeSelector = themeKey + ".modes." + colorMode + "." + path;
    var defaultTheme = get$1(props, "theme." + selector) || defaultValue;
    var variantTheme = get$1(props, "theme." + variantSelector);
    var colorModeTheme = get$1(props, "theme." + colorModeSelector);
    var defaultThemeOverrides;
    var variantThemeOverrides;
    var colorModeThemeOverrides;

    if (props.overrides) {
      defaultThemeOverrides = get$1(props, "overrides." + selector);
      variantThemeOverrides = get$1(props, "overrides." + variantSelector);
      colorModeThemeOverrides = get$1(props, "overrides." + colorModeSelector);
    }

    if (path && path.includes('styles')) {
      var defaultThemeValue = isFunction$2(defaultTheme) ? defaultTheme(props) : defaultTheme;
      var defaultThemeOverridesValue = isFunction$2(defaultThemeOverrides) ? defaultThemeOverrides(props) : defaultThemeOverrides;
      var variantThemeValue = isFunction$2(variantTheme) ? variantTheme(props) : variantTheme;
      var variantThemeOverridesValue = isFunction$2(variantThemeOverrides) ? variantThemeOverrides(props) : variantThemeOverrides;
      var colorModeThemeValue = isFunction$2(colorModeTheme) ? colorModeTheme(props) : colorModeTheme;
      var colorModeThemeOverridesValue = isFunction$2(colorModeThemeOverrides) ? colorModeThemeOverrides(props) : colorModeThemeOverrides;

      var styles = _objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3({}, defaultThemeValue), defaultThemeOverridesValue), variantThemeValue), variantThemeOverridesValue), colorModeThemeValue), colorModeThemeOverridesValue);

      if (!styles.styles) {
        styles = getCSSFromStyleObject(styles, props.theme, colorMode);
      }

      return styles;
    }

    var theme = colorModeThemeOverrides || colorModeTheme || variantThemeOverrides || variantTheme || defaultThemeOverrides || defaultTheme;
    return isFunction$2(theme) ? theme(props) : theme;
  };
}
function altitude(selector, defaultValue) {
  return function (props) {
    var altitude = theme('altitudes', selector || props.altitude, defaultValue)(props);
    return altitude;
  };
}
function border(selector, defaultValue) {
  return function (props) {
    var border = theme('borders', selector || props.border, defaultValue)(props);
    return border;
  };
}
function borderRadius(selector, defaultValue) {
  return function (props) {
    var borderRadius = theme('borderRadii', selector || props.borderRadius, defaultValue)(props);
    return borderRadius;
  };
}
function font(selector, defaultValue) {
  return function (props) {
    var color = theme('fonts', selector || props.font, defaultValue)(props);
    return color;
  };
}
function fontSize(selector, defaultValue) {
  return function (props) {
    var color = theme('fontSizes', selector || props.fontSize, defaultValue)(props);
    return color;
  };
}
function fontWeight(selector, defaultValue) {
  return function (props) {
    var color = theme('fontWeights', selector || props.fontWeight, defaultValue)(props);
    return color;
  };
}
function lineHeight(selector, defaultValue) {
  return function (props) {
    var lineHeights = theme('lineHeights', selector || props.lineHeight, defaultValue)(props);
    return lineHeights;
  };
}
function letterSpacing(selector, defaultValue) {
  return function (props) {
    var letterSpacing = theme('letterSpacings', selector || props.letterSpacing, defaultValue)(props);
    return letterSpacing;
  };
}
function palette(_selector, modes, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$useCSSVariables = _ref.useCSSVariables,
      useCSSVariables = _ref$useCSSVariables === void 0 ? true : _ref$useCSSVariables;

  return function (props) {
    var _props$theme;

    var selector = modes && modes[props.colorMode] ? modes[props.colorMode] : _selector;
    var fallback = tinycolor(selector).toHexString();

    if (selector === 'transparent') {
      fallback = 'transparent';
    }

    if (isRGBOrHSLOrHex(selector)) {
      return selector;
    }

    if (((_props$theme = props.theme) === null || _props$theme === void 0 ? void 0 : _props$theme.useCSSVariables) && useCSSVariables) {
      return getColorFromCSSVariable(selector, fallback);
    }

    var color = theme('palette', selector || props.palette)(props);
    if (!color) return fallback;
    return color;
  };
}
function space(_scalar, _scaleType) {
  if (_scaleType === void 0) {
    _scaleType = 'minor';
  }

  return function (props) {
    var scalar = _scalar;
    var scaleType = _scaleType;
    if (!scalar) return 0;

    if (typeof scalar === 'string') {
      var isNegative = false;

      if (scalar[0] === '-') {
        scalar = scalar.replace('-', '');
        isNegative = true;
      }

      if (scalar.includes('minor') || scalar.includes('major')) {
        // @ts-ignore
        var _scalar$split = scalar.split('-');

        scaleType = _scalar$split[0];
        scalar = _scalar$split[1];
        scalar = parseFloat(scalar);
        scalar = isNegative ? -scalar : scalar;
        if (isNaN(scalar)) return 0;
      } else {
        var value = theme('spacing', scalar)(props);
        return isNegative ? -value : value;
      }
    }

    if (typeof scalar === 'number') {
      var _props$theme2, _props$theme2$spacing, _props$theme3, _props$theme3$global;

      var unitSize = props === null || props === void 0 ? void 0 : (_props$theme2 = props.theme) === null || _props$theme2 === void 0 ? void 0 : (_props$theme2$spacing = _props$theme2.spacing) === null || _props$theme2$spacing === void 0 ? void 0 : _props$theme2$spacing[scaleType + "Unit"];

      var _fontSize = props === null || props === void 0 ? void 0 : (_props$theme3 = props.theme) === null || _props$theme3 === void 0 ? void 0 : (_props$theme3$global = _props$theme3.global) === null || _props$theme3$global === void 0 ? void 0 : _props$theme3$global.fontSize;

      var _value = scalar * (unitSize / _fontSize);

      return _value;
    }
  };
}
function breakpoint(breakpoint, cssStyle, config) {
  var _ref2 = config || {},
      _ref2$else = _ref2.else,
      elseStyle = _ref2$else === void 0 ? '' : _ref2$else,
      _ref2$show = _ref2.show,
      show = _ref2$show === void 0 ? false : _ref2$show;

  return function (props) {
    var _props$theme4, _props$theme4$breakpo, _props$theme5, _props$theme5$breakpo, _props$theme6, _props$theme6$breakpo, _props$theme7, _props$theme7$breakpo, _props$theme8, _props$theme8$breakpo;

    if (!breakpoint) return css$1(_templateObject$19 || (_templateObject$19 = _taggedTemplateLiteralLoose(["\n        ", ";\n      "])), elseStyle);
    var key;
    var elseKey;

    if (!show && breakpoint.includes('max')) {
      key = 'max-width';
      elseKey = 'min-width';
    } else if (!show && breakpoint.includes('min')) {
      key = 'min-width';
      elseKey = 'max-width';
    } else if (show && breakpoint.includes('max')) {
      key = 'min-width';
      elseKey = 'max-width';
    } else if (show && breakpoint.includes('min')) {
      key = 'max-width';
      elseKey = 'min-width';
    }

    var strippedBreakpoint = breakpoint;
    strippedBreakpoint = strippedBreakpoint.replace('max-', '');
    strippedBreakpoint = strippedBreakpoint.replace('min-', '');
    var minBreakpointValues = {
      mobile: 0,
      tablet: props === null || props === void 0 ? void 0 : (_props$theme4 = props.theme) === null || _props$theme4 === void 0 ? void 0 : (_props$theme4$breakpo = _props$theme4.breakpoints) === null || _props$theme4$breakpo === void 0 ? void 0 : _props$theme4$breakpo.mobile,
      desktop: props === null || props === void 0 ? void 0 : (_props$theme5 = props.theme) === null || _props$theme5 === void 0 ? void 0 : (_props$theme5$breakpo = _props$theme5.breakpoints) === null || _props$theme5$breakpo === void 0 ? void 0 : _props$theme5$breakpo.tablet,
      widescreen: props === null || props === void 0 ? void 0 : (_props$theme6 = props.theme) === null || _props$theme6 === void 0 ? void 0 : (_props$theme6$breakpo = _props$theme6.breakpoints) === null || _props$theme6$breakpo === void 0 ? void 0 : _props$theme6$breakpo.desktop,
      fullHD: props === null || props === void 0 ? void 0 : (_props$theme7 = props.theme) === null || _props$theme7 === void 0 ? void 0 : (_props$theme7$breakpo = _props$theme7.breakpoints) === null || _props$theme7$breakpo === void 0 ? void 0 : _props$theme7$breakpo.widescreen
    };
    var breakpointValue = props === null || props === void 0 ? void 0 : (_props$theme8 = props.theme) === null || _props$theme8 === void 0 ? void 0 : (_props$theme8$breakpo = _props$theme8.breakpoints) === null || _props$theme8$breakpo === void 0 ? void 0 : _props$theme8$breakpo[strippedBreakpoint];

    if (!show && breakpoint.includes('max')) {
      breakpointValue = breakpointValue - 1;
    }

    if (!show && breakpoint.includes('min')) {
      breakpointValue = minBreakpointValues[strippedBreakpoint];
    }

    if (show && breakpoint.includes('min')) {
      breakpointValue = minBreakpointValues[strippedBreakpoint] - 1;
    }

    if (!breakpoint.includes('min-') && !breakpoint.includes('max-')) {
      if (show) {
        return css$1(_templateObject2$R || (_templateObject2$R = _taggedTemplateLiteralLoose(["\n          @media screen and (max-width: ", "px) {\n            ", ";\n          }\n          @media screen and (min-width: ", "px) {\n            ", ";\n          }\n\n          @media screen and (min-width: ", "px) and (max-width: ", "px) {\n            ", ";\n          }\n        "])), minBreakpointValues[breakpoint], cssStyle, breakpointValue + 1, cssStyle, minBreakpointValues[breakpoint] + 1, breakpointValue, elseStyle);
      }

      return css$1(_templateObject3$P || (_templateObject3$P = _taggedTemplateLiteralLoose(["\n        @media screen and (min-width: ", "px) and (max-width: ", "px) {\n          ", ";\n        }\n\n        @media screen and (max-width: ", "px) {\n          ", ";\n        }\n        @media screen and (min-width: ", "px) {\n          ", ";\n        }\n      "])), minBreakpointValues[breakpoint], breakpointValue - 1, cssStyle, minBreakpointValues[breakpoint] - 1, elseStyle, breakpointValue, elseStyle);
    }

    return css$1(_templateObject4$M || (_templateObject4$M = _taggedTemplateLiteralLoose(["\n      @media screen and (", ": ", "px) {\n        ", ";\n      }\n      @media screen and (", ": ", "px) {\n        ", ";\n      }\n    "])), key, breakpointValue, cssStyle, elseKey, breakpointValue + (elseKey.includes('max') ? -1 : 1), elseStyle);
  };
}

var _templateObject$1$1, _templateObject2$1$1, _templateObject3$1$1, _templateObject4$1$1, _templateObject5$G, _templateObject6$F, _templateObject7$B, _templateObject8$A, _templateObject9$s, _templateObject10$r;
var borderAttributes = ['border'];
var borderRadiusAttributes = ['borderRadius'];
var colorAttributes = ['color', 'backgroundColor', 'borderBlockEndColor', 'borderBlockStartColor', 'borderBottomColor', 'borderColor', 'borderInlineEndColor', 'borderInlineStartColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor', 'borderBottomColor', 'caretColor', 'columnRuleColor', 'outlineColor', 'textDecorationColor', 'textEmphasisColor'];
var spaceAttributes = ['margin', 'marginLeft', 'marginRight', 'marginTop', 'marginBottom', 'marginX', 'marginY', 'padding', 'paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom', 'paddingX', 'paddingY', 'top', 'left', 'bottom', 'right', 'grid-gap', 'grid-column-gap', 'grid-row-gap'];
var fontAttributes = ['font', 'fontFamily'];
var fontSizeAttributes = ['fontSize'];
var fontWeightAttributes = ['fontWeight'];
var lineHeightAttributes = ['lineHeight'];
var letterSpacingAttributes = ['letterSpacing'];
var attributeMaps = {
  font: ['fontFamily'],
  marginY: ['marginTop', 'marginBottom'],
  paddingY: ['paddingTop', 'paddingBottom'],
  marginX: ['marginLeft', 'marginRight'],
  paddingX: ['paddingLeft', 'paddingRight']
};

function getBorderValue(_ref) {
  var theme = _ref.theme,
      value = _ref.value;
  var borderValue = border(value)({
    theme: theme
  });

  if (borderValue) {
    return borderValue.width + " solid " + borderValue.color;
  }

  return value;
}

function getBorderRadiusValue(_ref2) {
  var theme = _ref2.theme,
      value = _ref2.value;
  var borderRadiusValue = borderRadius(value)({
    theme: theme
  });

  if (borderRadiusValue) {
    return borderRadiusValue;
  }

  return value;
}

function getColorValue(_ref3) {
  var colorMode = _ref3.colorMode,
      theme = _ref3.theme,
      value = _ref3.value;
  var color = palette(value)({
    colorMode: colorMode,
    theme: theme
  });

  if (color) {
    return color;
  }

  return value;
}

function getSpaceValue(_ref4) {
  var theme = _ref4.theme,
      value = _ref4.value;
  var spacing = space(value)({
    theme: theme
  });

  if (spacing) {
    return spacing + "rem";
  }

  return value;
}

function getFontValue(_ref5) {
  var theme = _ref5.theme,
      value = _ref5.value;
  var fontValue = font(value)({
    theme: theme
  });

  if (fontValue) {
    return fontValue;
  }

  return value;
}

function getFontSizeValue(_ref6) {
  var theme = _ref6.theme,
      value = _ref6.value;
  var size = fontSize(value)({
    theme: theme
  });

  if (size) {
    return size + "rem";
  }

  return value;
}

function getFontWeightValue(_ref7) {
  var theme = _ref7.theme,
      value = _ref7.value;
  var weight = fontWeight(value)({
    theme: theme
  });

  if (weight) {
    return weight;
  }

  return value;
}

function getLineHeightValue(_ref8) {
  var theme = _ref8.theme,
      value = _ref8.value;
  var height = lineHeight(value)({
    theme: theme
  });

  if (height) {
    return height;
  }

  return value;
}

function getLetterSpacingValue(_ref9) {
  var theme = _ref9.theme,
      value = _ref9.value;
  var spacing = letterSpacing(value)({
    theme: theme
  });

  if (spacing) {
    return spacing;
  }

  return value;
}

function getCSSFromStyleObject(props, theme, colorMode, _temp) {
  var _ref10 = _temp === void 0 ? {} : _temp,
      _ref10$fromProps = _ref10.fromProps,
      fromProps = _ref10$fromProps === void 0 ? false : _ref10$fromProps,
      _ref10$disableCSSProp = _ref10.disableCSSProps,
      disableCSSProps = _ref10$disableCSSProp === void 0 ? [] : _ref10$disableCSSProp;

  var style = _objectSpread2$3({}, props);

  if (style) {
    var styleEntries = Object.entries(style);
    styleEntries = styleEntries.reduce(function (prevStyle, _ref11) {
      var attribute = _ref11[0],
          value = _ref11[1];
      var entries = [[attribute, value]];

      if (attributeMaps[attribute]) {
        entries = attributeMaps[attribute].map(function (attribute) {
          return [attribute, value];
        });
      }

      return [].concat(prevStyle, entries);
    }, []);
    style = styleEntries.reduce(function (prevStyle, _ref12) {
      var attribute = _ref12[0],
          value = _ref12[1];
      var newValue = value;

      if (attribute.includes(':')) {
        return css$1(_templateObject$1$1 || (_templateObject$1$1 = _taggedTemplateLiteralLoose(["\n          ", ";\n\n          ", " {\n            ", ";\n          }\n        "])), prevStyle, attribute, getCSSFromStyleObject(value, theme, colorMode, {
          fromProps: fromProps
        }));
      }

      if (typeof newValue === 'string') {
        newValue = {
          default: value
        };
      }

      if (attribute.includes('_')) {
        var pseudoSelector = cssProps[attribute];
        return css$1(_templateObject2$1$1 || (_templateObject2$1$1 = _taggedTemplateLiteralLoose(["\n          ", ";\n\n          ", " {\n            ", ";\n          }\n        "])), prevStyle, pseudoSelector, getCSSFromStyleObject(value, theme, colorMode, {
          fromProps: fromProps
        }));
      }

      var newStyle = Object.entries(newValue || {}).reduce(function (prevStyle, _ref13) {
        var bp = _ref13[0],
            value = _ref13[1];
        var newValue = value;

        if (borderAttributes.includes(attribute)) {
          newValue = getBorderValue({
            theme: theme,
            value: value
          });
        }

        if (borderRadiusAttributes.includes(attribute)) {
          newValue = getBorderRadiusValue({
            theme: theme,
            value: value
          });
        }

        if (colorAttributes.includes(attribute)) {
          newValue = getColorValue({
            colorMode: colorMode,
            theme: theme,
            value: value
          });
        }

        if (spaceAttributes.includes(attribute)) {
          newValue = getSpaceValue({
            theme: theme,
            value: value
          });
        }

        if (fontAttributes.includes(attribute)) {
          newValue = getFontValue({
            theme: theme,
            value: value
          });
        }

        if (fontSizeAttributes.includes(attribute)) {
          if (disableCSSProps.includes('fontSize')) {
            return {};
          }

          newValue = getFontSizeValue({
            theme: theme,
            value: value
          });
        }

        if (fontWeightAttributes.includes(attribute)) {
          newValue = getFontWeightValue({
            theme: theme,
            value: value
          });
        }

        if (lineHeightAttributes.includes(attribute)) {
          newValue = getLineHeightValue({
            theme: theme,
            value: value
          });
        }

        if (letterSpacingAttributes.includes(attribute)) {
          newValue = getLetterSpacingValue({
            theme: theme,
            value: value
          });
        }

        if (bp === 'default') {
          // @ts-ignore
          return css$1(_templateObject3$1$1 || (_templateObject3$1$1 = _taggedTemplateLiteralLoose(["\n            ", "\n            ", "\n          "])), prevStyle, css$1(_templateObject4$1$1 || (_templateObject4$1$1 = _taggedTemplateLiteralLoose(["\n                  ", ": ", " ", ";\n                "])), kebabCase_1(attribute), newValue, fromProps ? '!important' : ''));
        }

        return css$1(_templateObject5$G || (_templateObject5$G = _taggedTemplateLiteralLoose(["\n          ", ";\n          ", ";\n        "])), prevStyle, breakpoint(bp, // @ts-ignore
        css$1(_templateObject6$F || (_templateObject6$F = _taggedTemplateLiteralLoose(["\n              ", "\n            "])), css$1(_templateObject7$B || (_templateObject7$B = _taggedTemplateLiteralLoose(["\n                    ", ": ", " ", ";\n                  "])), kebabCase_1(attribute), newValue, fromProps ? '!important' : '')))({
          theme: theme
        }));
      }, css$1(_templateObject8$A || (_templateObject8$A = _taggedTemplateLiteralLoose([""]))));
      return css$1(_templateObject9$s || (_templateObject9$s = _taggedTemplateLiteralLoose(["\n        ", " ", ";\n      "])), prevStyle, newStyle);
    }, css$1(_templateObject10$r || (_templateObject10$r = _taggedTemplateLiteralLoose([""]))));
  }

  return style;
}

function useStyle(props, _ref) {
  var disableCSSProps = _ref.disableCSSProps;

  var _useTheme = useTheme(),
      theme = _useTheme.theme;

  var _useColorMode = useColorMode(),
      globalColorMode = _useColorMode.colorMode;

  var cssProps = pickCSSProps(props);
  var colorMode = props.colorMode || globalColorMode;
  return react.useMemo(function () {
    return getCSSFromStyleObject(cssProps, theme, colorMode, {
      fromProps: true,
      disableCSSProps: disableCSSProps
    });
  }, [cssProps, theme, colorMode, disableCSSProps]);
}

function useOptionsState(_ref) {
  var defaultValue = _ref.defaultValue,
      isNativeInput = _ref.isNativeInput,
      onBlur = _ref.onBlur,
      onChange = _ref.onChange,
      type = _ref.type,
      value = _ref.value;

  var _React$useState = react.useState(defaultValue || []),
      controlledValue = _React$useState[0],
      setControlledValue = _React$useState[1];

  var values = typeof value !== 'undefined' ? value : controlledValue;
  var handleChange = react.useCallback(function (e) {
    var _e$target;

    var newValue = isNativeInput ? (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.value : e.value;
    var newValues = newValue;

    if (type === 'checkbox') {
      newValues = [];

      if (values.includes(newValue)) {
        newValues = (values || []).filter(function (val) {
          return val !== newValue;
        });
      } else {
        newValues = [].concat(values || [], [newValue]);
      }
    }

    if (typeof value !== 'undefined') {
      onChange && onChange(newValues, newValue);
    } else {
      setControlledValue(newValues);
    }
  }, [isNativeInput, onChange, type, value, values]);
  var handleBlur = react.useCallback(function () {
    onBlur && onBlur(values);
  }, [onBlur, values]);
  return {
    getOptionItemProps: function getOptionItemProps(_ref2) {
      var _ref2$readOnly = _ref2.readOnly,
          readOnly = _ref2$readOnly === void 0 ? false : _ref2$readOnly,
          value = _ref2.value;
      return {
        checked: values ? values.includes(value) : false,
        onChange: !readOnly ? handleChange : undefined,
        onBlur: !readOnly ? handleBlur : undefined
      };
    }
  };
}

function useLabelPlaceholder(_ref) {
  var _ref$enabled = _ref.enabled,
      enabled = _ref$enabled === void 0 ? false : _ref$enabled,
      _ref$useValue = _ref.useValue,
      useValue = _ref$useValue === void 0 ? false : _ref$useValue,
      props = _objectWithoutPropertiesLoose$4(_ref, ["enabled", "useValue"]);

  var _React$useState = react.useState(props.defaultValue || props.value),
      controlledValue = _React$useState[0],
      setControlledValue = _React$useState[1];

  var _React$useState2 = react.useState(enabled && Boolean(props.defaultValue || props.value)),
      isFocused = _React$useState2[0],
      setIsFocused = _React$useState2[1];

  react.useEffect(function () {
    if (enabled && props.value) {
      setControlledValue(props.value);
    }
  }, [enabled, props.value]);
  react.useEffect(function () {
    setControlledValue(props.value);
  }, [props.value]);
  react.useEffect(function () {
    if (enabled) {
      setIsFocused(Boolean(controlledValue));
    }
  }, [controlledValue, enabled]);
  var onBlur = react.useCallback(function (e) {
    var _props$onBlur;

    // eslint-disable-next-line
    (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, e);

    if (enabled && !controlledValue) {
      setIsFocused(false);
    }
  }, [controlledValue, enabled, props.onBlur]);
  var onChange = react.useCallback(function () {
    var _props$onChange;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    // eslint-disable-next-line
    (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call.apply(_props$onChange, [props].concat(args));
    var e = args[0];

    if (enabled) {
      var value = useValue ? e : e.target.value;
      setControlledValue(value);
    }
  }, [enabled, props.onChange, useValue]);
  var onFocus = react.useCallback(function (e) {
    var _props$onFocus;

    // eslint-disable-next-line
    (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, e);

    if (enabled) {
      setIsFocused(true);
    }
  }, [enabled, props.onFocus]);
  return {
    isFocused: isFocused,
    inputProps: {
      onBlur: onBlur,
      onChange: onChange,
      onFocus: onFocus
    }
  };
}

var omitBy = function omitBy(obj, check) {
  obj = _objectSpread2$3({}, obj);
  Object.entries(obj).forEach(function (_ref) {
    var key = _ref[0],
        value = _ref[1];
    return check(value) && delete obj[key];
  });
  return obj;
};

var isUndefined = function isUndefined(val) {
  return typeof val === 'undefined';
};

function getDefaultPropsFromTheme(theme, _ref) {
  var _theme$variants, _theme$variants$varia, _theme$modes, _theme$modes$colorMod;

  var colorMode = _ref.colorMode,
      variant = _ref.variant;
  var themeDefaultProps = (theme === null || theme === void 0 ? void 0 : theme.defaultProps) ? omitBy(theme.defaultProps, isUndefined) : {};
  var themeVariantDefaultProps = (theme === null || theme === void 0 ? void 0 : theme.variants) ? omitBy(((_theme$variants = theme.variants) === null || _theme$variants === void 0 ? void 0 : (_theme$variants$varia = _theme$variants[variant]) === null || _theme$variants$varia === void 0 ? void 0 : _theme$variants$varia.defaultProps) || {}, isUndefined) : {};
  var themeColorModeDefaultProps = (theme === null || theme === void 0 ? void 0 : theme.modes) ? omitBy(((_theme$modes = theme.modes) === null || _theme$modes === void 0 ? void 0 : (_theme$modes$colorMod = _theme$modes[colorMode]) === null || _theme$modes$colorMod === void 0 ? void 0 : _theme$modes$colorMod.defaultProps) || {}, isUndefined) : {};
  return {
    themeDefaultProps: themeDefaultProps,
    themeVariantDefaultProps: themeVariantDefaultProps,
    themeColorModeDefaultProps: themeColorModeDefaultProps
  };
}

function useDefaultProps(props, config) {
  var _config2, _config3;

  if (props === void 0) {
    props = {};
  }

  if (config === void 0) {
    config = {};
  }

  var _config = config,
      themeKey = _config.themeKey;

  var _useTheme = useTheme(),
      theme = _useTheme.theme;

  var _useColorMode = useColorMode(),
      globalColorMode = _useColorMode.colorMode;

  var colorMode = props.colorMode || globalColorMode;
  var configDefaultProps = ((_config2 = config) === null || _config2 === void 0 ? void 0 : _config2.defaultProps) ? omitBy((_config3 = config) === null || _config3 === void 0 ? void 0 : _config3.defaultProps, isUndefined) : {};

  var _getDefaultPropsFromT = getDefaultPropsFromTheme(get$1(theme, themeKey), {
    colorMode: colorMode,
    variant: props.variant
  }),
      themeDefaultProps = _getDefaultPropsFromT.themeDefaultProps,
      themeVariantDefaultProps = _getDefaultPropsFromT.themeVariantDefaultProps,
      themeColorModeDefaultProps = _getDefaultPropsFromT.themeColorModeDefaultProps;

  var _getDefaultPropsFromT2 = getDefaultPropsFromTheme(get$1(props, "overrides." + themeKey), {
    colorMode: colorMode,
    variant: props.variant
  }),
      overridesDefaultProps = _getDefaultPropsFromT2.themeDefaultProps,
      overridesVariantDefaultProps = _getDefaultPropsFromT2.themeVariantDefaultProps,
      overridesColorModeDefaultProps = _getDefaultPropsFromT2.themeColorModeDefaultProps;

  var newProps = _objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3({}, configDefaultProps), themeDefaultProps), themeVariantDefaultProps), themeColorModeDefaultProps), overridesDefaultProps), overridesVariantDefaultProps), overridesColorModeDefaultProps), {}, {
    colorMode: colorMode
  }, omitBy(props, isUndefined));

  return {
    props: newProps,
    themeKey: themeKey
  };
}

function useDebounce(value, delay) {
  // State and setters for debounced value
  var _React$useState = react.useState(value),
      debouncedValue = _React$useState[0],
      setDebouncedValue = _React$useState[1];

  react.useEffect(function () {
    // Update debounced value after delay
    var handler = setTimeout(function () {
      setDebouncedValue(value);
    }, delay); // Cancel the timeout if value changes (also on delay change or unmount)
    // This is how we prevent debounced value from updating if value is changed ...
    // .. within the delay period. Timeout gets cleared and restarted.

    return function () {
      clearTimeout(handler);
    };
  }, [value, delay] // Only re-call effect if value or delay changes
  );
  return debouncedValue;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject$1(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

var isObject_1 = isObject$1;

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction$1(value) {
  if (!isObject_1(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = _baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

var isFunction_1 = isFunction$1;

/** Used to detect overreaching core-js shims. */
var coreJsData = _root['__core-js_shared__'];

var _coreJsData = coreJsData;

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

var _isMasked = isMasked;

/** Used for built-in method references. */
var funcProto$1 = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$1 = funcProto$1.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString$1.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

var _toSource = toSource;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto$2 = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty$2).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject_1(value) || _isMasked(value)) {
    return false;
  }
  var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
  return pattern.test(_toSource(value));
}

var _baseIsNative = baseIsNative;

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

var _getValue = getValue;

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = _getValue(object, key);
  return _baseIsNative(value) ? value : undefined;
}

var _getNative = getNative;

/* Built-in method references that are verified to be native. */
var nativeCreate = _getNative(Object, 'create');

var _nativeCreate = nativeCreate;

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
  this.size = 0;
}

var _hashClear = hashClear;

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

var _hashDelete = hashDelete;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (_nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED$2 ? undefined : result;
  }
  return hasOwnProperty$1.call(data, key) ? data[key] : undefined;
}

var _hashGet = hashGet;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

var _hashHas = hashHas;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
  return this;
}

var _hashSet = hashSet;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = _hashClear;
Hash.prototype['delete'] = _hashDelete;
Hash.prototype.get = _hashGet;
Hash.prototype.has = _hashHas;
Hash.prototype.set = _hashSet;

var _Hash = Hash;

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

var _listCacheClear = listCacheClear;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

var eq_1 = eq;

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq_1(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

var _assocIndexOf = assocIndexOf;

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = _assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

var _listCacheDelete = listCacheDelete;

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = _assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

var _listCacheGet = listCacheGet;

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return _assocIndexOf(this.__data__, key) > -1;
}

var _listCacheHas = listCacheHas;

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = _assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

var _listCacheSet = listCacheSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = _listCacheClear;
ListCache.prototype['delete'] = _listCacheDelete;
ListCache.prototype.get = _listCacheGet;
ListCache.prototype.has = _listCacheHas;
ListCache.prototype.set = _listCacheSet;

var _ListCache = ListCache;

/* Built-in method references that are verified to be native. */
var Map$1 = _getNative(_root, 'Map');

var _Map = Map$1;

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new _Hash,
    'map': new (_Map || _ListCache),
    'string': new _Hash
  };
}

var _mapCacheClear = mapCacheClear;

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

var _isKeyable = isKeyable;

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return _isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

var _getMapData = getMapData;

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = _getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

var _mapCacheDelete = mapCacheDelete;

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return _getMapData(this, key).get(key);
}

var _mapCacheGet = mapCacheGet;

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return _getMapData(this, key).has(key);
}

var _mapCacheHas = mapCacheHas;

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = _getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

var _mapCacheSet = mapCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = _mapCacheClear;
MapCache.prototype['delete'] = _mapCacheDelete;
MapCache.prototype.get = _mapCacheGet;
MapCache.prototype.has = _mapCacheHas;
MapCache.prototype.set = _mapCacheSet;

var _MapCache = MapCache;

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

var _setCacheAdd = setCacheAdd;

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

var _setCacheHas = setCacheHas;

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new _MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = _setCacheAdd;
SetCache.prototype.has = _setCacheHas;

var _SetCache = SetCache;

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

var _baseFindIndex = baseFindIndex;

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

var _baseIsNaN = baseIsNaN;

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

var _strictIndexOf = strictIndexOf;

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  return value === value
    ? _strictIndexOf(array, value, fromIndex)
    : _baseFindIndex(array, _baseIsNaN, fromIndex);
}

var _baseIndexOf = baseIndexOf;

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && _baseIndexOf(array, value, 0) > -1;
}

var _arrayIncludes = arrayIncludes;

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

var _arrayIncludesWith = arrayIncludesWith;

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

var _cacheHas = cacheHas;

/* Built-in method references that are verified to be native. */
var Set$3 = _getNative(_root, 'Set');

var _Set = Set$3;

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop$2() {
  // No operation performed.
}

var noop_1 = noop$2;

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

var _setToArray = setToArray;

/** Used as references for various `Number` constants. */
var INFINITY$2 = 1 / 0;

/**
 * Creates a set object of `values`.
 *
 * @private
 * @param {Array} values The values to add to the set.
 * @returns {Object} Returns the new set.
 */
var createSet = !(_Set && (1 / _setToArray(new _Set([,-0]))[1]) == INFINITY$2) ? noop_1 : function(values) {
  return new _Set(values);
};

var _createSet = createSet;

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */
function baseUniq(array, iteratee, comparator) {
  var index = -1,
      includes = _arrayIncludes,
      length = array.length,
      isCommon = true,
      result = [],
      seen = result;

  if (comparator) {
    isCommon = false;
    includes = _arrayIncludesWith;
  }
  else if (length >= LARGE_ARRAY_SIZE) {
    var set = iteratee ? null : _createSet(array);
    if (set) {
      return _setToArray(set);
    }
    isCommon = false;
    includes = _cacheHas;
    seen = new _SetCache;
  }
  else {
    seen = iteratee ? [] : result;
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var seenIndex = seen.length;
      while (seenIndex--) {
        if (seen[seenIndex] === computed) {
          continue outer;
        }
      }
      if (iteratee) {
        seen.push(computed);
      }
      result.push(value);
    }
    else if (!includes(seen, computed, comparator)) {
      if (seen !== result) {
        seen.push(computed);
      }
      result.push(value);
    }
  }
  return result;
}

var _baseUniq = baseUniq;

/**
 * Creates a duplicate-free version of an array, using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons, in which only the first occurrence of each element
 * is kept. The order of result values is determined by the order they occur
 * in the array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * _.uniq([2, 1, 2]);
 * // => [2, 1]
 */
function uniq(array) {
  return (array && array.length) ? _baseUniq(array) : [];
}

var uniq_1 = uniq;

function useClassName(_ref) {
  var style = _ref.style,
      prevClassName = _ref.prevClassName,
      styleProps = _ref.styleProps,
      themeKey = _ref.themeKey,
      themeKeySuffix = _ref.themeKeySuffix;

  var _useTheme = useTheme(),
      theme = _useTheme.theme;

  var newThemeKey = "" + (themeKey || '') + (themeKeySuffix ? "." + themeKeySuffix : '');
  var stringifiedStyleProps = Object.values(styleProps).filter(function (styleProp) {
    return typeof styleProp !== 'function';
  }).join('.');
  var props = react.useMemo(function () {
    return _objectSpread2$3(_objectSpread2$3({
      theme: theme
    }, styleProps), {}, {
      themeKey: newThemeKey
    });
  }, [stringifiedStyleProps]); // eslint-disable-line

  var className = react.useMemo(function () {
    var className;

    if (Array.isArray(style)) {
      className = style.map(function (style) {
        return style(props);
      });
    } else {
      className = [style(props)];
    }

    return className;
  }, [props, style]);
  var classNames$1 = classnames$1.apply(void 0, className.concat([prevClassName, newThemeKey ? "bb-" + newThemeKey.replace(/\./g, '') : undefined]));

  var uniqueClassNames = uniq_1(classNames$1.split(' ')).join(' ');

  return uniqueClassNames;
}

function getMediaQueryList(_breakpoint, theme) {
  var _theme$breakpoints, _theme$breakpoints2, _theme$breakpoints3, _theme$breakpoints4, _theme$breakpoints5;

  var minBreakpointValues = {
    mobile: 0,
    tablet: theme === null || theme === void 0 ? void 0 : (_theme$breakpoints = theme.breakpoints) === null || _theme$breakpoints === void 0 ? void 0 : _theme$breakpoints.mobile,
    desktop: theme === null || theme === void 0 ? void 0 : (_theme$breakpoints2 = theme.breakpoints) === null || _theme$breakpoints2 === void 0 ? void 0 : _theme$breakpoints2.tablet,
    widescreen: theme === null || theme === void 0 ? void 0 : (_theme$breakpoints3 = theme.breakpoints) === null || _theme$breakpoints3 === void 0 ? void 0 : _theme$breakpoints3.desktop,
    fullHD: theme === null || theme === void 0 ? void 0 : (_theme$breakpoints4 = theme.breakpoints) === null || _theme$breakpoints4 === void 0 ? void 0 : _theme$breakpoints4.widescreen
  };
  var breakpoint = _breakpoint;
  var key;

  if (breakpoint.includes('min')) {
    breakpoint = breakpoint.replace('min-', '');
    key = 'min-width';
  } else if (breakpoint.includes('max')) {
    breakpoint = breakpoint.replace('max-', '');
    key = 'max-width';
  }

  var breakpointValue = key === 'min-width' ? minBreakpointValues[breakpoint] : theme === null || theme === void 0 ? void 0 : (_theme$breakpoints5 = theme.breakpoints) === null || _theme$breakpoints5 === void 0 ? void 0 : _theme$breakpoints5[breakpoint];
  var query = key ? "(" + key + ": " + (key === 'min-width' ? breakpointValue : breakpointValue - 1) + "px)" : "(min-width: " + minBreakpointValues[breakpoint] + "px) and (max-width: " + (breakpointValue - 1) + "px)";
  var mediaQueryList = typeof window !== 'undefined' ? window.matchMedia(query) : {
    matches: false,
    addListener: function addListener() {
      return null;
    },
    removeListener: function removeListener() {
      return null;
    }
  };
  return mediaQueryList;
}

function useBreakpoint(breakpoint) {
  var _useTheme = useTheme(),
      theme = _useTheme.theme;

  var mediaQueryList = getMediaQueryList(breakpoint, theme);

  var _React$useState = react.useState(mediaQueryList.matches),
      doesMatch = _React$useState[0],
      setDoesMatch = _React$useState[1];

  react.useEffect(function () {
    var mounted = true;

    var onMediaChange = function onMediaChange(e) {
      if (!mounted) return;
      setDoesMatch(e.matches);
    };

    mediaQueryList.addListener(onMediaChange);
    return function cleanup() {
      mounted = false;
      mediaQueryList.removeListener(onMediaChange);
    };
  }, [mediaQueryList]);
  return doesMatch;
}

function _defineProperty$3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys$2(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2$2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys$2(Object(source), true).forEach(function (key) {
        _defineProperty$3(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$2(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose$3(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _unsupportedIterableToArray$1(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
}

function _arrayLikeToArray$1(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose$1(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

var SystemContext = /*#__PURE__*/react.createContext({});

function _defineProperty$2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys$1(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2$1(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys$1(Object(source), true).forEach(function (key) {
        _defineProperty$2(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys$1(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose$2(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

function isRenderProp(children) {
  return typeof children === "function";
}

/**
 * Custom hook that will call `children` if it's a function. If
 * `useCreateElement` has been passed to the context, it'll be used instead.
 *
 * @example
 * import React from "react";
 * import { SystemProvider, useCreateElement } from "reakit-system";
 *
 * const system = {
 *   useCreateElement(type, props, children = props.children) {
 *     // very similar to what `useCreateElement` does already
 *     if (typeof children === "function") {
 *       const { children: _, ...rest } = props;
 *       return children(rest);
 *     }
 *     return React.createElement(type, props, children);
 *   },
 * };
 *
 * function Component(props) {
 *   return useCreateElement("div", props);
 * }
 *
 * function App() {
 *   return (
 *     <SystemProvider unstable_system={system}>
 *       <Component url="url">{({ url }) => <a href={url}>link</a>}</Component>
 *     </SystemProvider>
 *   );
 * }
 */

var useCreateElement = function useCreateElement(type, props, children) {
  if (children === void 0) {
    children = props.children;
  }

  var context = react.useContext(SystemContext);

  if (context.useCreateElement) {
    return context.useCreateElement(type, props, children);
  }

  if (typeof type === "string" && isRenderProp(children)) {
    props.children;
        var rest = _objectWithoutPropertiesLoose$2(props, ["children"]);

    return children(rest);
  }

  return /*#__PURE__*/react.createElement(type, props, children);
};

function _defineProperty$1(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose$1(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

/**
 * Checks whether `arg` is an object or not.
 *
 * @returns {boolean}
 */
function isObject(arg) {
  return typeof arg === "object" && arg != null;
}

/**
 * Checks whether `arg` is a plain object or not.
 *
 * @returns {boolean}
 */

function isPlainObject(arg) {
  var _proto$constructor;

  if (!isObject(arg)) return false;
  var proto = Object.getPrototypeOf(arg);
  if (proto == null) return true;
  return ((_proto$constructor = proto.constructor) === null || _proto$constructor === void 0 ? void 0 : _proto$constructor.toString()) === Object.toString();
}

/**
 * Splits an object (`props`) into a tuple where the first item is an object
 * with the passed `keys`, and the second item is an object with these keys
 * omitted.
 *
 * @deprecated will be removed in version 2
 *
 * @example
 * import { splitProps } from "reakit-utils";
 *
 * splitProps({ a: "a", b: "b" }, ["a"]); // [{ a: "a" }, { b: "b" }]
 */

function __deprecatedSplitProps(props, keys) {
  var propsKeys = Object.keys(props);
  var picked = {};
  var omitted = {};

  for (var _i = 0, _propsKeys = propsKeys; _i < _propsKeys.length; _i++) {
    var key = _propsKeys[_i];

    if (keys.indexOf(key) >= 0) {
      picked[key] = props[key];
    } else {
      omitted[key] = props[key];
    }
  }

  return [picked, omitted];
}
/**
 * Splits an object (`props`) into a tuple where the first item
 * is the `state` property, and the second item is the rest of the properties.
 *
 * It is also backward compatible with version 1. If `keys` are passed then
 * splits an object (`props`) into a tuple where the first item is an object
 * with the passed `keys`, and the second item is an object with these keys
 * omitted.
 *
 * @example
 * import { splitProps } from "reakit-utils";
 *
 * splitProps({ a: "a", b: "b" }, ["a"]); // [{ a: "a" }, { b: "b" }]
 *
 * @example
 * import { splitProps } from "reakit-utils";
 *
 * splitProps({ state: { a: "a" }, b: "b" }); // [{ a: "a" }, { b: "b" }]
 */


function splitProps(props, keys) {
  if (keys === void 0) {
    keys = [];
  }

  if (!isPlainObject(props.state)) {
    return __deprecatedSplitProps(props, keys);
  }

  var _deprecatedSplitProp = __deprecatedSplitProps(props, [].concat(keys, ["state"])),
      picked = _deprecatedSplitProp[0],
      omitted = _deprecatedSplitProp[1];

  var state = picked.state,
      restPicked = _objectWithoutPropertiesLoose$1(picked, ["state"]);

  return [_objectSpread2(_objectSpread2({}, state), restPicked), omitted];
}

/**
 * Compares two objects.
 *
 * @example
 * import { shallowEqual } from "reakit-utils";
 *
 * shallowEqual({ a: "a" }, {}); // false
 * shallowEqual({ a: "a" }, { b: "b" }); // false
 * shallowEqual({ a: "a" }, { a: "a" }); // true
 * shallowEqual({ a: "a" }, { a: "a", b: "b" }); // false
 */
function shallowEqual(objA, objB) {
  if (objA === objB) return true;
  if (!objA) return false;
  if (!objB) return false;
  if (typeof objA !== "object") return false;
  if (typeof objB !== "object") return false;
  var aKeys = Object.keys(objA);
  var bKeys = Object.keys(objB);
  var length = aKeys.length;
  if (bKeys.length !== length) return false;

  for (var _i = 0, _aKeys = aKeys; _i < _aKeys.length; _i++) {
    var key = _aKeys[_i];

    if (objA[key] !== objB[key]) {
      return false;
    }
  }

  return true;
}

/**
 * This higher order functions take `propsAreEqual` function and
 * returns a new function which normalizes the props.
 *
 * Normalizing in our case is making sure the `propsAreEqual` works with
 * both version 1 (object spreading) and version 2 (state object) state passing.
 *
 * To achieve this, the returned function in case of a state object
 * will spread the state object in both `prev` and `next props.
 *
 * Other case it just returns the function as is which makes sure
 * that we are still backward compatible
 */
function normalizePropsAreEqual(propsAreEqual) {
  if (propsAreEqual.name === "normalizePropsAreEqualInner") {
    return propsAreEqual;
  }

  return function normalizePropsAreEqualInner(prev, next) {
    if (!isPlainObject(prev.state) || !isPlainObject(next.state)) {
      return propsAreEqual(prev, next);
    }

    return propsAreEqual(_objectSpread2(_objectSpread2({}, prev.state), prev), _objectSpread2(_objectSpread2({}, next.state), next));
  };
}

function forwardRef(component) {
  return /*#__PURE__*/react.forwardRef(component);
}

function memo(component, propsAreEqual) {
  return /*#__PURE__*/react.memo(component, propsAreEqual);
}

/**
 * Creates a React component.
 *
 * @example
 * import { createComponent } from "reakit-system";
 *
 * const A = createComponent({ as: "a" });
 *
 * @param options
 */
function createComponent$1(_ref) {
  var type = _ref.as,
      useHook = _ref.useHook,
      shouldMemo = _ref.memo,
      _ref$propsAreEqual = _ref.propsAreEqual,
      propsAreEqual = _ref$propsAreEqual === void 0 ? useHook === null || useHook === void 0 ? void 0 : useHook.unstable_propsAreEqual : _ref$propsAreEqual,
      _ref$keys = _ref.keys,
      keys = _ref$keys === void 0 ? (useHook === null || useHook === void 0 ? void 0 : useHook.__keys) || [] : _ref$keys,
      _ref$useCreateElement = _ref.useCreateElement,
      useCreateElement$1 = _ref$useCreateElement === void 0 ? useCreateElement : _ref$useCreateElement;

  var Comp = function Comp(_ref2, ref) {
    var _ref2$as = _ref2.as,
        as = _ref2$as === void 0 ? type : _ref2$as,
        props = _objectWithoutPropertiesLoose$2(_ref2, ["as"]);

    if (useHook) {
      var _as$render;

      var _splitProps = splitProps(props, keys),
          _options = _splitProps[0],
          htmlProps = _splitProps[1];

      var _useHook = useHook(_options, _objectSpread2$1({
        ref: ref
      }, htmlProps)),
          wrapElement = _useHook.wrapElement,
          elementProps = _objectWithoutPropertiesLoose$2(_useHook, ["wrapElement"]); // @ts-ignore


      var asKeys = ((_as$render = as.render) === null || _as$render === void 0 ? void 0 : _as$render.__keys) || as.__keys;
      var asOptions = asKeys && splitProps(props, asKeys)[0];
      var allProps = asOptions ? _objectSpread2$1(_objectSpread2$1({}, elementProps), asOptions) : elementProps;

      var _element = useCreateElement$1(as, allProps);

      if (wrapElement) {
        return wrapElement(_element);
      }

      return _element;
    }

    return useCreateElement$1(as, _objectSpread2$1({
      ref: ref
    }, props));
  };

  Comp = forwardRef(Comp);

  if (shouldMemo) {
    Comp = memo(Comp, propsAreEqual && normalizePropsAreEqual(propsAreEqual));
  }

  Comp.__keys = keys;
  Comp.unstable_propsAreEqual = normalizePropsAreEqual(propsAreEqual || shallowEqual);
  return Comp;
}

/**
 * React custom hook that returns the value of any token defined in the
 * SystemContext. It's mainly used internally in [`useOptions`](#useoptions)
 * and [`useProps`](#useprops).
 *
 * @example
 * import { SystemProvider, useToken } from "reakit-system";
 *
 * const system = {
 *   token: "value",
 * };
 *
 * function Component(props) {
 *   const token = useToken("token", "default value");
 *   return <div {...props}>{token}</div>;
 * }
 *
 * function App() {
 *   return (
 *     <SystemProvider unstable_system={system}>
 *       <Component />
 *     </SystemProvider>
 *   );
 * }
 */

function useToken(token, defaultValue) {
  react.useDebugValue(token);
  var context = react.useContext(SystemContext);
  return context[token] != null ? context[token] : defaultValue;
}

/**
 * React custom hook that returns the props returned by a given
 * `use${name}Props` in the SystemContext.
 *
 * @example
 * import { SystemProvider, useProps } from "reakit-system";
 *
 * const system = {
 *   useAProps(options, htmlProps) {
 *     return {
 *       ...htmlProps,
 *       href: options.url,
 *     };
 *   },
 * };
 *
 * function A({ url, ...htmlProps }) {
 *   const props = useProps("A", { url }, htmlProps);
 *   return <a {...props} />;
 * }
 *
 * function App() {
 *   return (
 *     <SystemProvider unstable_system={system}>
 *       <A url="url">It will convert url into href in useAProps</A>
 *     </SystemProvider>
 *   );
 * }
 */

function useProps$1_(name, options, htmlProps) {
  if (options === void 0) {
    options = {};
  }

  if (htmlProps === void 0) {
    htmlProps = {};
  }

  var hookName = "use" + name + "Props";
  react.useDebugValue(hookName);
  var useHook = useToken(hookName);

  if (useHook) {
    return useHook(options, htmlProps);
  }

  return htmlProps;
}

/**
 * React custom hook that returns the options returned by a given
 * `use${name}Options` in the SystemContext.
 *
 * @example
 * import React from "react";
 * import { SystemProvider, useOptions } from "reakit-system";
 *
 * const system = {
 *   useAOptions(options, htmlProps) {
 *     return {
 *       ...options,
 *       url: htmlProps.href,
 *     };
 *   },
 * };
 *
 * function A({ url, ...htmlProps }) {
 *   const options = useOptions("A", { url }, htmlProps);
 *   return <a href={options.url} {...htmlProps} />;
 * }
 *
 * function App() {
 *   return (
 *     <SystemProvider unstable_system={system}>
 *       <A href="url">
 *         It will convert href into url in useAOptions and then url into href in A
 *       </A>
 *     </SystemProvider>
 *   );
 * }
 */

function useOptions(name, options, htmlProps) {
  if (options === void 0) {
    options = {};
  }

  if (htmlProps === void 0) {
    htmlProps = {};
  }

  var hookName = "use" + name + "Options";
  react.useDebugValue(hookName);
  var useHook = useToken(hookName);

  if (useHook) {
    return _objectSpread2$1(_objectSpread2$1({}, options), useHook(options, htmlProps));
  }

  return options;
}

/**
 * Transforms `arg` into an array if it's not already.
 *
 * @example
 * import { toArray } from "reakit-utils";
 *
 * toArray("a"); // ["a"]
 * toArray(["a"]); // ["a"]
 */
function toArray(arg) {
  if (Array.isArray(arg)) {
    return arg;
  }

  return typeof arg !== "undefined" ? [arg] : [];
}

/**
 * Creates a React custom hook that will return component props.
 *
 * @example
 * import { createHook } from "reakit-system";
 *
 * const useA = createHook({
 *   name: "A",
 *   keys: ["url"], // custom props/options keys
 *   useProps(options, htmlProps) {
 *     return {
 *       ...htmlProps,
 *       href: options.url,
 *     };
 *   },
 * });
 *
 * function A({ url, ...htmlProps }) {
 *   const props = useA({ url }, htmlProps);
 *   return <a {...props} />;
 * }
 *
 * @param options
 */
function createHook$1(options) {
  var _options$useState, _composedHooks$;

  var composedHooks = toArray(options.compose);

  var __useOptions = function __useOptions(hookOptions, htmlProps) {
    // Call the current hook's useOptions first
    if (options.useOptions) {
      hookOptions = options.useOptions(hookOptions, htmlProps);
    } // If there's name, call useOptions from the system context


    if (options.name) {
      hookOptions = useOptions(options.name, hookOptions, htmlProps);
    } // Run composed hooks useOptions


    if (options.compose) {
      for (var _iterator = _createForOfIteratorHelperLoose(composedHooks), _step; !(_step = _iterator()).done;) {
        var hook = _step.value;
        hookOptions = hook.__useOptions(hookOptions, htmlProps);
      }
    }

    return hookOptions;
  };

  var useHook = function useHook(hookOptions, htmlProps, unstable_ignoreUseOptions) {
    if (hookOptions === void 0) {
      hookOptions = {};
    }

    if (htmlProps === void 0) {
      htmlProps = {};
    }

    if (unstable_ignoreUseOptions === void 0) {
      unstable_ignoreUseOptions = false;
    }

    // This won't execute when useHook was called from within another useHook
    if (!unstable_ignoreUseOptions) {
      hookOptions = __useOptions(hookOptions, htmlProps);
    } // Call the current hook's useProps


    if (options.useProps) {
      htmlProps = options.useProps(hookOptions, htmlProps);
    } // If there's name, call useProps from the system context


    if (options.name) {
      htmlProps = useProps$1_(options.name, hookOptions, htmlProps);
    }

    if (options.compose) {
      if (options.useComposeOptions) {
        hookOptions = options.useComposeOptions(hookOptions, htmlProps);
      }

      if (options.useComposeProps) {
        htmlProps = options.useComposeProps(hookOptions, htmlProps);
      } else {
        for (var _iterator2 = _createForOfIteratorHelperLoose(composedHooks), _step2; !(_step2 = _iterator2()).done;) {
          var hook = _step2.value;
          htmlProps = hook(hookOptions, htmlProps, true);
        }
      }
    } // Remove undefined values from htmlProps


    var finalHTMLProps = {};
    var definedHTMLProps = htmlProps || {};

    for (var prop in definedHTMLProps) {
      if (definedHTMLProps[prop] !== undefined) {
        finalHTMLProps[prop] = definedHTMLProps[prop];
      }
    }

    return finalHTMLProps;
  };

  useHook.__useOptions = __useOptions;
  var composedKeys = composedHooks.reduce(function (keys, hook) {
    keys.push.apply(keys, hook.__keys || []);
    return keys;
  }, []); // It's used by createComponent to split option props (keys) and html props

  useHook.__keys = [].concat(composedKeys, ((_options$useState = options.useState) === null || _options$useState === void 0 ? void 0 : _options$useState.__keys) || [], options.keys || []);
  useHook.unstable_propsAreEqual = options.propsAreEqual || ((_composedHooks$ = composedHooks[0]) === null || _composedHooks$ === void 0 ? void 0 : _composedHooks$.unstable_propsAreEqual) || shallowEqual;

  return useHook;
}

/**
 * React custom hook that returns the very first value passed to `initialState`,
 * even if it changes between re-renders.
 */
function useSealedState(initialState) {
  var _React$useState = react.useState(initialState),
      sealed = _React$useState[0];

  return sealed;
}

var defaultPrefix$1 = "id";
function generateRandomString(prefix) {
  if (prefix === void 0) {
    prefix = defaultPrefix$1;
  }

  return "" + (prefix ? prefix + "-" : "") + Math.random().toString(32).substr(2, 6);
}

var unstable_IdContext = /*#__PURE__*/react.createContext(generateRandomString);
function unstable_IdProvider(_ref) {
  var children = _ref.children,
      _ref$prefix = _ref.prefix,
      prefix = _ref$prefix === void 0 ? defaultPrefix$1 : _ref$prefix;
  var count = react.useRef(0);
  var generateId = react.useCallback(function (localPrefix) {
    if (localPrefix === void 0) {
      localPrefix = prefix;
    }

    return "" + (localPrefix ? localPrefix + "-" : "") + ++count.current;
  }, [prefix]);
  return /*#__PURE__*/react.createElement(unstable_IdContext.Provider, {
    value: generateId
  }, children);
}

// Automatically generated
var ID_STATE_KEYS = ["baseId", "unstable_idCountRef", "setBaseId"];
var ID_KEYS = [].concat(ID_STATE_KEYS, ["id"]);

var unstable_useId = createHook$1({
  keys: ID_KEYS,
  useOptions: function useOptions(options, htmlProps) {
    var generateId = react.useContext(unstable_IdContext);

    var _React$useState = react.useState(function () {
      // This comes from useIdState
      if (options.unstable_idCountRef) {
        options.unstable_idCountRef.current += 1;
        return "-" + options.unstable_idCountRef.current;
      } // If there's no useIdState, we check if `baseId` was passed (as a prop,
      // not from useIdState).


      if (options.baseId) {
        return "-" + generateId("");
      }

      return "";
    }),
        suffix = _React$useState[0]; // `baseId` will be the prop passed directly as a prop or via useIdState.
    // If there's neither, then it'll fallback to Context's generateId.
    // This generateId can result in a sequential ID (if there's a Provider)
    // or a random string (without Provider).


    var baseId = react.useMemo(function () {
      return options.baseId || generateId();
    }, [options.baseId, generateId]);
    var id = htmlProps.id || options.id || "" + baseId + suffix;
    return _objectSpread2$2(_objectSpread2$2({}, options), {}, {
      id: id
    });
  },
  useProps: function useProps(options, htmlProps) {
    return _objectSpread2$2({
      id: options.id
    }, htmlProps);
  }
});
createComponent$1({
  as: "div",
  useHook: unstable_useId
});

function unstable_useIdState(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }

  var _useSealedState = useSealedState(initialState),
      initialBaseId = _useSealedState.baseId;

  var generateId = react.useContext(unstable_IdContext);
  var idCountRef = react.useRef(0);

  var _React$useState = react.useState(function () {
    return initialBaseId || generateId();
  }),
      baseId = _React$useState[0],
      setBaseId = _React$useState[1];

  return {
    baseId: baseId,
    setBaseId: setBaseId,
    unstable_idCountRef: idCountRef
  };
}

var defaultPrefix = 'id-';
var generateId = function generateId(prefix) {
  if (prefix === void 0) {
    prefix = defaultPrefix;
  }

  return "" + prefix + Math.random().toString(32).substr(2, 6);
};
function useUniqueId() {
  var _unstable_useId = unstable_useId(),
      id = _unstable_useId.id;

  return id;
}

var times$1 = function times(n, func) {
  if (func === void 0) {
    func = function func(i) {
      return i;
    };
  }

  return Array.from({
    length: n
  }).map(function (_, i) {
    return func(i);
  });
};

function parseIcons(icons, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      prefix = _ref.prefix,
      type = _ref.type;

  if (type === 'font-awesome') {
    var parsedIcons = icons.reduce(function (newIcons, _ref2) {
      var _objectSpread2$1;

      var iconName = _ref2.iconName,
          iconDetails = _ref2.icon;
      if (!iconDetails) return newIcons;
      return _objectSpread2$3(_objectSpread2$3({}, newIcons), {}, (_objectSpread2$1 = {}, _objectSpread2$1["" + (prefix || '') + iconName] = {
        viewBoxWidth: iconDetails[0],
        viewBoxHeight: iconDetails[1],
        paths: [iconDetails[4]]
      }, _objectSpread2$1));
    }, {});
    return parsedIcons;
  }

  if (type === 'font-awesome-standalone') {
    var _parsedIcons = icons.reduce(function (newIcons, _ref3) {
      var _objectSpread3;

      var iconName = _ref3.iconName,
          height = _ref3.height,
          width = _ref3.width,
          svgPathData = _ref3.svgPathData;
      if (!iconName) return newIcons;
      return _objectSpread2$3(_objectSpread2$3({}, newIcons), {}, (_objectSpread3 = {}, _objectSpread3["" + (prefix || '') + iconName] = {
        viewBoxWidth: width,
        viewBoxHeight: height,
        paths: [svgPathData]
      }, _objectSpread3));
    }, {});

    return _parsedIcons;
  }

  return {};
}

var generateTextVariants = function generateTextVariants(textColor) {
  return {
    text100: lighten(0.2, textColor)(),
    text200: lighten(0.15, textColor)(),
    text300: lighten(0.1, textColor)(),
    text400: lighten(0.05, textColor)(),
    text: textColor,
    textTint: tint(0.8, textColor)(),
    textInverted: readableColor(textColor)(),
    textTintInverted: shade(0.3, textColor)()
  };
};
var generateColorVariants = function generateColorVariants(_ref) {
  var _objectSpread2$1;

  var backgroundColor = _ref.backgroundColor,
      color = _ref.color,
      _ref$colorMode = _ref.colorMode,
      colorMode = _ref$colorMode === void 0 ? 'default' : _ref$colorMode,
      paletteKey = _ref.paletteKey,
      paletteOverrides = _ref.paletteOverrides;
  return _objectSpread2$3((_objectSpread2$1 = {}, _objectSpread2$1[paletteKey + "100"] = tint(0.7, color)({
    backgroundColor: backgroundColor,
    colorMode: colorMode
  }), _objectSpread2$1[paletteKey + "200"] = tint(0.5, color)({
    backgroundColor: backgroundColor,
    colorMode: colorMode
  }), _objectSpread2$1[paletteKey + "300"] = tint(0.3, color)({
    backgroundColor: backgroundColor,
    colorMode: colorMode
  }), _objectSpread2$1[paletteKey + "400"] = tint(0.1, color)({
    backgroundColor: backgroundColor,
    colorMode: colorMode
  }), _objectSpread2$1[paletteKey] = color, _objectSpread2$1[paletteKey + "500"] = color, _objectSpread2$1[paletteKey + "600"] = shade(0.1, color)({
    backgroundColor: backgroundColor,
    colorMode: colorMode
  }), _objectSpread2$1[paletteKey + "700"] = shade(0.3, color)({
    backgroundColor: backgroundColor,
    colorMode: colorMode
  }), _objectSpread2$1[paletteKey + "800"] = shade(0.5, color)({
    backgroundColor: backgroundColor,
    colorMode: colorMode
  }), _objectSpread2$1[paletteKey + "900"] = shade(0.7, color)({
    backgroundColor: backgroundColor,
    colorMode: colorMode
  }), _objectSpread2$1[paletteKey + "Shade"] = shade(0.8, color)({
    backgroundColor: backgroundColor,
    colorMode: colorMode
  }), _objectSpread2$1[paletteKey + "Tint"] = tint(0.9, color)({
    backgroundColor: backgroundColor,
    colorMode: colorMode
  }), _objectSpread2$1[paletteKey + "Inverted"] = readableColor(color)(), _objectSpread2$1[paletteKey + "ShadeInverted"] = tint(0.7, color)({
    backgroundColor: backgroundColor,
    colorMode: colorMode
  }), _objectSpread2$1[paletteKey + "TintInverted"] = shade(0.5, color)({
    backgroundColor: backgroundColor,
    colorMode: colorMode
  }), _objectSpread2$1), paletteOverrides ? paletteOverrides({
    color: color
  }) : {});
};

function mergeRefs() {
  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
    refs[_key] = arguments[_key];
  }

  var filteredRefs = refs.filter(Boolean);
  if (!filteredRefs.length) return null;
  if (filteredRefs.length === 0) return filteredRefs[0];
  return function (instance) {
    for (var _iterator = _createForOfIteratorHelperLoose$2(filteredRefs), _step; !(_step = _iterator()).done;) {
      var ref = _step.value;

      if (typeof ref === 'function') {
        ref(instance);
      } else if (ref) {
        ref.current = instance;
      }
    }
  };
}

((function() {
  try {
    var func = _getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
})());

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray_1(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol_1(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

var _isKey = isKey;

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize$1(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize$1.Cache || _MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize$1.Cache = _MapCache;

var memoize_1 = memoize$1;

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize_1(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

var _memoizeCapped = memoizeCapped;

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = _memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

var _stringToPath = stringToPath;

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray_1(value)) {
    return value;
  }
  return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
}

var _castPath = castPath;

/** Used as references for various `Number` constants. */
var INFINITY$1 = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol_1(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
}

var _toKey = toKey;

var bindFns = function bindFns() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }

  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    fns.forEach(function (fn) {
      return fn && fn.apply(void 0, args);
    });
  };
};

function createComponent(Component, config) {
  var Comp = function Comp(props, ref) {
    var _useDefaultProps = useDefaultProps(props, config),
        newProps = _useDefaultProps.props; // @ts-ignore


    return react.createElement(Component, _objectSpread2$3(_objectSpread2$3({}, newProps), {}, {
      elementRef: ref
    }), props === null || props === void 0 ? void 0 : props.children);
  };

  var ForwardedComponent = react.forwardRef(Comp);

  if (config.shouldMemo) {
    ForwardedComponent = react.memo(ForwardedComponent);
  }

  return Object.assign(ForwardedComponent, config.attach);
}

function createElement(_ref) {
  var children = _ref.children,
      component = _ref.component,
      _ref$enableRenderProp = _ref.enableRenderPropsComposition,
      enableRenderPropsComposition = _ref$enableRenderProp === void 0 ? true : _ref$enableRenderProp,
      htmlProps = _ref.htmlProps,
      use = _ref.use;

  if (enableRenderPropsComposition && isFunction$2(children)) {
    return children(htmlProps);
  }

  return react.createElement(component, _objectSpread2$3({
    as: use
  }, htmlProps), htmlProps.children || children);
}

function createHook(useHook, config) {
  return function (props, _temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        _ref$disableCSSProps = _ref.disableCSSProps,
        disableCSSProps = _ref$disableCSSProps === void 0 ? [] : _ref$disableCSSProps,
        _ref$themeKey = _ref.themeKey,
        themeKeyOverride = _ref$themeKey === void 0 ? undefined : _ref$themeKey;

    // @ts-ignore
    var themeKey = themeKeyOverride || (props === null || props === void 0 ? void 0 : props.themeKey) || (config === null || config === void 0 ? void 0 : config.themeKey);

    var _useDefaultProps = useDefaultProps(props, _objectSpread2$3(_objectSpread2$3({}, config), {}, {
      themeKey: themeKey
    })),
        newProps = _useDefaultProps.props;

    return useHook(newProps, {
      disableCSSProps: disableCSSProps,
      themeKey: config === null || config === void 0 ? void 0 : config.themeKey
    });
  };
}

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = _castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[_toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

var _baseGet = baseGet;

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : _baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

var get_1 = get;

function formikField(Component, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$disableBlurEvent = _ref.disableBlurEvent,
      disableBlurEvent = _ref$disableBlurEvent === void 0 ? false : _ref$disableBlurEvent,
      _ref$disableFocusEven = _ref.disableFocusEvent,
      disableFocusEvent = _ref$disableFocusEven === void 0 ? false : _ref$disableFocusEven,
      _ref$hasFieldWrapper = _ref.hasFieldWrapper,
      hasFieldWrapper = _ref$hasFieldWrapper === void 0 ? false : _ref$hasFieldWrapper,
      _ref$isCheckbox = _ref.isCheckbox,
      isCheckbox = _ref$isCheckbox === void 0 ? false : _ref$isCheckbox,
      _ref$isCheckboxGroup = _ref.isCheckboxGroup,
      isCheckboxGroup = _ref$isCheckboxGroup === void 0 ? false : _ref$isCheckboxGroup,
      _ref$isAutosuggest = _ref.isAutosuggest,
      isAutosuggest = _ref$isAutosuggest === void 0 ? false : _ref$isAutosuggest,
      _ref$isSelectMenu = _ref.isSelectMenu,
      isSelectMenu = _ref$isSelectMenu === void 0 ? false : _ref$isSelectMenu,
      _ref$useValue = _ref.useValue,
      useValue = _ref$useValue === void 0 ? false : _ref$useValue;

  return function (_ref2) {
    var _ref2$field = _ref2.field,
        field = _ref2$field === void 0 ? {} : _ref2$field,
        _ref2$form = _ref2.form,
        form = _ref2$form === void 0 ? {} : _ref2$form,
        props = _objectWithoutPropertiesLoose$4(_ref2, ["field", "form"]);

    var overrideProps = {};

    var isTouched = get_1(form, "touched." + field.name);

    var error = get_1(form, "errors." + field.name);

    var value = get_1(form, "values." + field.name);

    var state = isTouched && error ? 'danger' : undefined;

    if (props.state) {
      state = props.state;
    }

    overrideProps = _objectSpread2$3(_objectSpread2$3({}, overrideProps), {}, {
      state: state
    });

    if (hasFieldWrapper) {
      var validationText = isTouched && error ? error : undefined;

      if (props.validationText) {
        validationText = props.validationText;
      }

      overrideProps = _objectSpread2$3(_objectSpread2$3({}, overrideProps), {}, {
        validationText: validationText
      });
    }

    if (isCheckbox) {
      var checked = false;

      if (value) {
        checked = Boolean(value);
      }

      if (props.checked) {
        checked = props.checked;
      }

      overrideProps = _objectSpread2$3(_objectSpread2$3({}, overrideProps), {}, {
        checked: checked
      });
    }

    var onBlur = field.onBlur;
    var onChange = field.onChange;
    var onFocus = field.onFocus;

    if (isSelectMenu || isAutosuggest) {
      if (isAutosuggest) {
        onBlur = function onBlur() {
          return setTimeout(function () {
            return form.setFieldTouched(field.name);
          }, 0);
        };
      } else {
        onBlur = function onBlur() {
          return form.setFieldTouched(field.name);
        };
      } // @ts-ignore


      onChange = function onChange(newOptions) {
        return form.setFieldValue(field.name, newOptions);
      };
    }

    if (isCheckboxGroup) {
      onChange = function onChange(value) {
        return form.setFieldValue(field.name, value);
      };

      onBlur = function onBlur() {
        return form.setFieldTouched(field.name);
      };
    }

    if (useValue) {
      onChange = function onChange(value) {
        return form.setFieldValue(field.name, value);
      };
    }

    overrideProps = _objectSpread2$3(_objectSpread2$3({}, overrideProps), {}, {
      onBlur: bindFns(disableBlurEvent ? function () {} : onBlur, props.onBlur),
      onChange: bindFns(onChange, props.onChange),
      onFocus: bindFns(disableFocusEvent ? function () {} : onFocus, props.onFocus)
    });
    return /*#__PURE__*/react.createElement(Component, _extends$1({}, props, field, overrideProps));
  };
}
function reduxFormField(Component, _temp2) {
  var _ref3 = _temp2 === void 0 ? {} : _temp2,
      _ref3$disableBlurEven = _ref3.disableBlurEvent,
      disableBlurEvent = _ref3$disableBlurEven === void 0 ? false : _ref3$disableBlurEven,
      _ref3$disableFocusEve = _ref3.disableFocusEvent,
      disableFocusEvent = _ref3$disableFocusEve === void 0 ? false : _ref3$disableFocusEve,
      _ref3$hasFieldWrapper = _ref3.hasFieldWrapper,
      hasFieldWrapper = _ref3$hasFieldWrapper === void 0 ? false : _ref3$hasFieldWrapper,
      _ref3$isCheckbox = _ref3.isCheckbox,
      isCheckbox = _ref3$isCheckbox === void 0 ? false : _ref3$isCheckbox,
      _ref3$isCheckboxGroup = _ref3.isCheckboxGroup,
      isCheckboxGroup = _ref3$isCheckboxGroup === void 0 ? false : _ref3$isCheckboxGroup,
      _ref3$isAutosuggest = _ref3.isAutosuggest,
      isAutosuggest = _ref3$isAutosuggest === void 0 ? false : _ref3$isAutosuggest,
      _ref3$isSelectMenu = _ref3.isSelectMenu,
      isSelectMenu = _ref3$isSelectMenu === void 0 ? false : _ref3$isSelectMenu,
      _ref3$useValue = _ref3.useValue,
      useValue = _ref3$useValue === void 0 ? false : _ref3$useValue;

  return function (_ref4) {
    var _ref4$input = _ref4.input,
        input = _ref4$input === void 0 ? {} : _ref4$input,
        _ref4$meta = _ref4.meta,
        meta = _ref4$meta === void 0 ? {} : _ref4$meta,
        props = _objectWithoutPropertiesLoose$4(_ref4, ["input", "meta"]);

    var overrideProps = {};
    var state = meta.touched && meta.error ? 'danger' : undefined;

    if (props.state) {
      state = props.state;
    }

    overrideProps = _objectSpread2$3(_objectSpread2$3({}, overrideProps), {}, {
      state: state
    });

    if (hasFieldWrapper) {
      var validationText = meta.touched && meta.error ? meta.error : undefined;

      if (props.validationText) {
        validationText = props.validationText;
      }

      overrideProps = _objectSpread2$3(_objectSpread2$3({}, overrideProps), {}, {
        validationText: validationText
      });
    }

    if (isCheckbox) {
      var checked = false;
      var value = Boolean(input.value);

      if (value) {
        checked = value;
      }

      if (props.checked) {
        checked = props.checked;
      }

      overrideProps = _objectSpread2$3(_objectSpread2$3({}, overrideProps), {}, {
        checked: checked
      });
    }

    var onBlur = input.onBlur;
    var onChange = input.onChange;
    var onFocus = input.onFocus;

    if (isSelectMenu || isAutosuggest) {
      // @ts-ignore
      onChange = function onChange(newOptions) {
        return input.onChange(newOptions);
      };

      onBlur = function onBlur() {
        return input.onBlur(input.value);
      };
    }

    if (isCheckboxGroup) {
      onChange = function onChange(value) {
        return input.onChange(value);
      };

      onBlur = function onBlur(value) {
        return input.onBlur(value);
      };
    }

    if (useValue) {
      onChange = function onChange(value) {
        return input.onChange(value);
      };
    }

    overrideProps = _objectSpread2$3(_objectSpread2$3({}, overrideProps), {}, {
      onBlur: bindFns(disableBlurEvent ? function () {} : onBlur, props.onBlur),
      onChange: bindFns(onChange, props.onChange),
      onFocus: bindFns(disableFocusEvent ? function () {} : onFocus, props.onFocus)
    });
    return /*#__PURE__*/react.createElement(Component, _extends$1({}, props, input, overrideProps));
  };
}

function round$1(method, number, precision) {
	if (typeof number !== 'number') {
		throw new TypeError('Expected value to be a number');
	}

	if (precision === Infinity) {
		return number;
	}

	if (!Number.isInteger(precision)) {
		throw new TypeError('Expected precision to be an integer');
	}

	const isRoundingAndNegative = method === 'round' && number < 0;
	if (isRoundingAndNegative) {
		number = Math.abs(number);
	}

	let exponent;
	[number, exponent] = `${number}e`.split('e');
	let result = Math[method](`${number}e${Number(exponent) + precision}`);

	[number, exponent] = `${result}e`.split('e');
	result = Number(`${number}e${Number(exponent) - precision}`);

	if (isRoundingAndNegative) {
		result = -result;
	}

	return result;
}

var roundTo = round$1.bind(null, 'round');
var up = round$1.bind(null, 'ceil');
var down = round$1.bind(null, 'floor');
roundTo.up = up;
roundTo.down = down;

const preventCollapse = 0.05;

function capsize(options) {
  if ('leading' in options && 'lineGap' in options) {
    throw new Error('Only a single line height style can be provided. Please pass either `lineGap` OR `leading`.');
  }

  if ('capHeight' in options && 'fontSize' in options) {
    throw new Error('Please pass either `capHeight` OR `fontSize`, not both.');
  }

  const {
    fontMetrics
  } = options;
  const capHeightScale = fontMetrics.capHeight / fontMetrics.unitsPerEm;
  let specifiedFontSize;
  let specifiedCapHeight;

  if ('capHeight' in options) {
    specifiedFontSize = options.capHeight / capHeightScale;
    specifiedCapHeight = options.capHeight;
  } else if ('fontSize' in options) {
    specifiedFontSize = options.fontSize;
    specifiedCapHeight = options.fontSize * capHeightScale;
  } else {
    throw new Error('Please pass either `capHeight` OR `fontSize`.');
  }

  let specifiedLineHeight;

  if ('lineGap' in options) {
    specifiedLineHeight = specifiedCapHeight + options.lineGap;
  } else if ('leading' in options) {
    specifiedLineHeight = options.leading;
  }

  return createCss({
    lineHeight: specifiedLineHeight,
    fontSize: specifiedFontSize,
    fontMetrics
  });
}

/*
   Rounding all values to a precision of `4` based on discovering that browser
   implementations of layout units fall between 1/60th and 1/64th of a pixel.

   Reference: https://trac.webkit.org/wiki/LayoutUnit
   (above wiki also mentions Mozilla - https://trac.webkit.org/wiki/LayoutUnit#Notes)
*/
const PRECISION = 4;

function createCss({
  lineHeight,
  fontSize,
  fontMetrics
}) {
  const toScale = value => value / fontSize;

  const absoluteDescent = Math.abs(fontMetrics.descent);
  const capHeightScale = fontMetrics.capHeight / fontMetrics.unitsPerEm;
  const descentScale = absoluteDescent / fontMetrics.unitsPerEm;
  const ascentScale = fontMetrics.ascent / fontMetrics.unitsPerEm;
  const lineGapScale = fontMetrics.lineGap / fontMetrics.unitsPerEm;
  const contentArea = fontMetrics.ascent + fontMetrics.lineGap + absoluteDescent;
  const lineHeightScale = contentArea / fontMetrics.unitsPerEm;
  const lineHeightNormal = lineHeightScale * fontSize;
  const specifiedLineHeightOffset = lineHeight ? (lineHeightNormal - lineHeight) / 2 : 0;

  const leadingTrim = value => value - toScale(specifiedLineHeightOffset) + toScale(preventCollapse);

  return {
    fontSize: `${roundTo(fontSize, PRECISION)}px`,
    lineHeight: lineHeight ? `${roundTo(lineHeight, PRECISION)}px` : 'normal',
    padding: `${preventCollapse}px 0`,
    '::before': {
      content: "''",
      marginTop: `${roundTo(leadingTrim(ascentScale - capHeightScale + lineGapScale / 2) * -1, PRECISION)}em`,
      display: 'block',
      height: 0
    },
    '::after': {
      content: "''",
      marginBottom: `${roundTo(leadingTrim(descentScale + lineGapScale / 2) * -1, PRECISION)}em`,
      display: 'block',
      height: 0
    }
  };
}

var _templateObject$18, _templateObject2$Q, _templateObject3$O, _templateObject4$L, _templateObject5$F, _templateObject6$E;
function getCapsizeAttributes(opts) {
  return function (_ref) {
    var _theme$fontMetrics, _theme$lineHeights, _theme$fontSizes, _theme$global;

    var theme = _ref.theme,
        props = _objectWithoutPropertiesLoose$4(_ref, ["theme"]);

    var shrinkScale = opts.shrink ? get$1(theme, opts.themeKey + ".shrinkScale") || 1 : 1;
    var fontFamily = props.font || props.fontFamily || opts.fontFamily;
    var fontMetrics = props.fontMetrics || get$1(theme, "fontMetrics." + fontFamily) || ((_theme$fontMetrics = theme.fontMetrics) === null || _theme$fontMetrics === void 0 ? void 0 : _theme$fontMetrics.default) || {};
    var lineHeight = props.lineHeight || opts.lineHeight || 'default';
    var lineHeightScale = (_theme$lineHeights = theme.lineHeights) === null || _theme$lineHeights === void 0 ? void 0 : _theme$lineHeights[lineHeight];
    var fontSizeInPx = shrinkScale * ((_theme$fontSizes = theme.fontSizes) === null || _theme$fontSizes === void 0 ? void 0 : _theme$fontSizes[opts.fontSize]) * ((_theme$global = theme.global) === null || _theme$global === void 0 ? void 0 : _theme$global.fontSize);
    var leading = fontSizeInPx * lineHeightScale;
    var capHeight = fontSizeInPx * (fontMetrics.capHeight / fontMetrics.unitsPerEm);
    var lineGap = leading - capHeight;
    return {
      fontMetrics: fontMetrics,
      lineHeight: lineHeight,
      lineHeightScale: lineHeightScale,
      lineGap: lineGap,
      fontSizeInPx: fontSizeInPx,
      leading: leading
    };
  };
}
function getFontSize(opts) {
  return function (props) {
    var fontSize = props.fontSize || opts.fontSize || get$1(props, "theme." + opts.themeKey + ".fontSize") || '200';

    if (typeof fontSize === 'string') {
      fontSize = {
        default: fontSize
      };
    }

    return fontSize;
  };
}
function getCapsizeStyles(opts) {
  return function (props) {
    // We want to cater for responsive `fontSize` CSS props, so let's
    // transform fontSize in the shape of a responsive CSS prop.
    var fontSize = getFontSize(opts)(props); // If a responsive `fontSize` CSS prop exists, then ignore the shrinked variant...

    if (opts.shrink && Object.keys(fontSize).length > 1) return {}; // For each fontSize on the breakpoint, we want to apply Capsize.

    return Object.entries(fontSize).reduce(function (currentStyles, _ref2) {
      var bp = _ref2[0],
          fontSize = _ref2[1];

      var _getCapsizeAttributes = getCapsizeAttributes(_objectSpread2$3(_objectSpread2$3({}, opts), {}, {
        fontSize: fontSize
      }))(props),
          _getCapsizeAttributes2 = _getCapsizeAttributes.fontMetrics,
          fontMetrics = _getCapsizeAttributes2 === void 0 ? {} : _getCapsizeAttributes2,
          fontSizeInPx = _getCapsizeAttributes.fontSizeInPx,
          leading = _getCapsizeAttributes.leading,
          lineGap = _getCapsizeAttributes.lineGap,
          lineHeightScale = _getCapsizeAttributes.lineHeightScale; // @ts-ignore


      var styles = function styles(fontSize) {
        return css$1(_templateObject$18 || (_templateObject$18 = _taggedTemplateLiteralLoose(["\n        ", "\n\n        ", "\n      "])), capsize({
          fontMetrics: fontMetrics,
          fontSize: fontSizeInPx,
          leading: leading
        }), opts.includeBottomGap && css$1(_templateObject2$Q || (_templateObject2$Q = _taggedTemplateLiteralLoose(["\n          &:not(:last-child) {\n            margin-bottom: ", "px;\n          }\n\n          ", "\n        "])), lineGap, opts.lineHeight === 'heading' && css$1(_templateObject3$O || (_templateObject3$O = _taggedTemplateLiteralLoose(["\n            &:last-of-type:not(:last-child) {\n              margin-bottom: ", "px;\n            }\n          "])), lineHeightScale * lineGap)));
      };

      return css$1(_templateObject4$L || (_templateObject4$L = _taggedTemplateLiteralLoose(["\n        ", "\n        ", ";\n      "])), currentStyles, bp === 'default' ? styles() : // @ts-ignore
      css$1(_templateObject5$F || (_templateObject5$F = _taggedTemplateLiteralLoose(["\n              ", ";\n            "])), breakpoint(bp, styles())(props)));
    }, css$1(_templateObject6$E || (_templateObject6$E = _taggedTemplateLiteralLoose([""]))));
  };
}

var _templateObject$17;
function getHiddenScrollbarStyles() {
  return css$1(_templateObject$17 || (_templateObject$17 = _taggedTemplateLiteralLoose(["\n    &::-webkit-scrollbar {\n      width: 0px;\n      background: transparent;\n    }\n    & {\n      scrollbar-width: none;\n      -ms-overflow-style: none;\n    }\n  "])));
}

function memoize(fn) {
  var cache = {};
  return function (arg) {
    if (cache[arg] === undefined) cache[arg] = fn(arg);
    return cache[arg];
  };
}

var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|itemProp|itemScope|itemType|itemID|itemRef|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

var index = memoize(function (prop) {
  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
  /* o */
  && prop.charCodeAt(1) === 110
  /* n */
  && prop.charCodeAt(2) < 91;
}
/* Z+1 */
);

var omitProps = ['focusable', 'spacing', 'size', 'kind', 'variant', 'orientation', 'wrap', 'colorMode', 'title'];
function pickHTMLProps(props) {
  var filteredProps = {};

  for (var prop in props) {
    if (index(prop) && !omitProps.includes(prop)) {
      filteredProps[prop] = props[prop];
    }
  }

  return filteredProps;
}

/* eslint-disable react/prop-types */
function OutsideClickHandler(props) {
  var children = props.children,
      onOutsideClick = props.onOutsideClick;
  var childNodeRef = react.useRef();
  var handleOutsideClick = react.useCallback(function (e) {
    // @ts-ignore
    var isDescendantOfRoot = childNodeRef.current && childNodeRef.current.contains(e.target);

    if (!isDescendantOfRoot) {
      onOutsideClick(e);
    }
  }, [onOutsideClick]);
  react.useEffect(function () {
    if (typeof window !== 'undefined') {
      window.addEventListener('click', handleOutsideClick);
    }

    return function () {
      window.removeEventListener('click', handleOutsideClick);
    };
  });
  return /*#__PURE__*/react.createElement("div", {
    ref: childNodeRef
  }, children);
}
OutsideClickHandler.defaultProps = {
  children: /*#__PURE__*/react.createElement("span", null),
  onOutsideClick: function onOutsideClick() {}
};

var _templateObject$16, _templateObject2$P, _templateObject3$N;
function getHiddenInputStyles(_ref) {
  var iconClassName = _ref.iconClassName,
      checkedCss = _ref.checkedCss,
      disabledCheckedCss = _ref.disabledCheckedCss,
      disabledCheckedIconCss = _ref.disabledCheckedIconCss,
      disabledUncheckedIconCss = _ref.disabledUncheckedIconCss,
      checkedIconCss = _ref.checkedIconCss,
      uncheckedIconCss = _ref.uncheckedIconCss,
      styleProps = _ref.styleProps,
      themeKey = _ref.themeKey;
  // @ts-ignore
  return css(_templateObject$16 || (_templateObject$16 = _taggedTemplateLiteralLoose(["\n    height: 1em;\n    width: 1em;\n    overflow: hidden;\n    position: absolute;\n    opacity: 0;\n\n    &:focus {\n      outline: none;\n    }\n\n    & + .", " {\n      ", "\n\n      &::before {\n        ", ";\n\n        & {\n          ", ";\n        }\n      }\n    }\n    &:not(:checked) + .", " {\n      ", "\n    }\n    &[disabled] + .", " {\n      background-color: ", ";\n      box-shadow: unset;\n\n      &::before {\n        ", ";\n        & {\n          ", ";\n        }\n      }\n\n      & {\n        ", ";\n      }\n    }\n    &:focus + .", " {\n      border-color: ", ";\n      box-shadow: ", " 0px 0px 0px 3px !important;\n\n      & {\n        ", ";\n      }\n    }\n    &:not([disabled]):checked + .", " {\n      border-color: ", ";\n      ", ";\n    }\n    &:checked + .", " {\n      ", ";\n\n      &::before {\n        ", ";\n      }\n\n      & {\n        ", ";\n      }\n    }\n    &[disabled]:checked + .", "::before {\n      ", ";\n\n      & {\n        ", ";\n      }\n    }\n\n    & {\n      ", ";\n    }\n  "])), iconClassName, styleProps.state && css$1(_templateObject2$P || (_templateObject2$P = _taggedTemplateLiteralLoose(["\n          border-color: ", ";\n        "])), palette("" + styleProps.state, {
    dark: styleProps.state + "300"
  })(styleProps)), uncheckedIconCss, theme(themeKey, "unchecked")(styleProps), iconClassName, styleProps.state && css$1(_templateObject3$N || (_templateObject3$N = _taggedTemplateLiteralLoose(["\n          box-shadow: ", " 0px 0px\n            0px 3px !important;\n        "])), palette(styleProps.state + "Tint", {
    dark: styleProps.state + "Shade"
  })(styleProps)), iconClassName, palette('white700', {
    dark: 'black200'
  })(styleProps), disabledUncheckedIconCss, theme(themeKey, "uncheckedDisabled")(styleProps), theme(themeKey, "disabled")(styleProps), iconClassName, palette("" + (styleProps.palette || 'primary'), {
    dark: (styleProps.palette || 'primary') + "300"
  })(styleProps), palette((styleProps.palette || 'primary') + "100", {
    dark: (styleProps.palette || 'primary') + "900"
  })(styleProps), theme(themeKey, "focusChecked")(styleProps), iconClassName, palette("" + (styleProps.palette || 'primary'), {
    dark: (styleProps.palette || 'primary') + "300"
  })(styleProps), checkedCss, iconClassName, disabledCheckedCss, checkedIconCss, theme(themeKey, "checked")(styleProps), iconClassName, disabledCheckedIconCss, theme(themeKey, "checkedDisabled")(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
}

var spacing = (function (overrides) {
  return _objectSpread2$3({
    minorUnit: 4,
    majorUnit: 8,
    xs: space(1, 'major'),
    sm: space(2, 'major'),
    md: space(4, 'major'),
    lg: space(6, 'major'),
    xl: space(8, 'major'),
    '2xl': space(12, 'major'),
    '3xl': space(16, 'major'),
    '4xl': space(20, 'major'),
    '5xl': space(24, 'major'),
    '6xl': space(28, 'major')
  }, overrides);
});

var defaultPalette = {
  background: 'white',
  black: '#0b0e13',
  text: '#212121',
  primary: '#574feb',
  secondary: '#9e46d8',
  info: '#1e67d5',
  success: '#0a7d33',
  danger: '#da1717',
  warning: '#ed9c22',
  gray: '#626f84'
};
var defaultDarkPalette = {
  background: '#1a212d',
  black: '#0b0e13',
  default: '#27303f',
  defaultInverted: 'white',
  text: 'white',
  text100: '#b1bccd',
  text200: '#c1c9d7',
  text300: '#d0d7e1',
  text400: '#e0e4eb',
  primary: '#574feb',
  secondary: '#9e46d8',
  info: '#1e67d5',
  success: '#0a7d33',
  danger: '#da1717',
  warning: '#ed9c22'
};
var getDefaultPalette = (function (overrides) {
  var _overrides$text;

  return _objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3({}, generateTextVariants((_overrides$text = overrides === null || overrides === void 0 ? void 0 : overrides.text) !== null && _overrides$text !== void 0 ? _overrides$text : defaultPalette.text)), {}, {
    background: defaultPalette.background,
    black: defaultPalette.black,
    black500: defaultPalette.black,
    black400: tint(0.05, defaultPalette.black)({
      backgroundColor: overrides.background || defaultPalette.background,
      colorMode: 'default'
    }),
    black300: tint(0.1, defaultPalette.black)({
      backgroundColor: overrides.background || defaultPalette.background,
      colorMode: 'default'
    }),
    black200: tint(0.15, defaultPalette.black)({
      backgroundColor: overrides.background || defaultPalette.background,
      colorMode: 'default'
    }),
    black100: tint(0.2, defaultPalette.black)({
      backgroundColor: overrides.background || defaultPalette.background,
      colorMode: 'default'
    }),
    white: 'white',
    white500: 'white',
    white600: '#f7f7fa',
    white700: '#f2f2f5',
    white800: '#e6e6eb',
    white900: '#d9d9e1',
    default: '#fcfcfd',
    defaultInverted: '#212121'
  }, generateColorVariants({
    paletteKey: 'primary',
    backgroundColor: overrides.background || defaultPalette.background,
    color: overrides.primary || defaultPalette.primary
  })), generateColorVariants({
    paletteKey: 'secondary',
    backgroundColor: overrides.background || defaultPalette.background,
    color: overrides.secondary || defaultPalette.secondary
  })), generateColorVariants({
    paletteKey: 'info',
    backgroundColor: overrides.background || defaultPalette.background,
    color: overrides.info || defaultPalette.info
  })), generateColorVariants({
    paletteKey: 'success',
    backgroundColor: overrides.background || defaultPalette.background,
    color: overrides.success || defaultPalette.success
  })), generateColorVariants({
    paletteKey: 'danger',
    backgroundColor: overrides.background || defaultPalette.background,
    color: overrides.danger || defaultPalette.danger
  })), generateColorVariants({
    paletteKey: 'warning',
    backgroundColor: overrides.background || defaultPalette.background,
    color: overrides.warning || defaultPalette.warning,
    paletteOverrides: function paletteOverrides(_ref) {
      var color = _ref.color;
      return {
        warningTintInverted: shade(0.7, color)()
      };
    }
  })), generateColorVariants({
    paletteKey: 'gray',
    backgroundColor: overrides.background || defaultPalette.background,
    color: overrides.gray || defaultPalette.gray,
    paletteOverrides: function paletteOverrides(_ref2) {
      var color = _ref2.color;
      return {
        gray700: shade(0.2, color)(),
        gray800: shade(0.3, color)(),
        gray900: shade(0.4, color)()
      };
    }
  })), {}, {
    modes: {
      dark: _objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3({}, defaultDarkPalette), generateColorVariants({
        paletteKey: 'primary',
        colorMode: 'dark',
        backgroundColor: overrides.background || defaultDarkPalette.background,
        color: overrides.primary || defaultDarkPalette.primary
      })), generateColorVariants({
        paletteKey: 'secondary',
        colorMode: 'dark',
        backgroundColor: overrides.background || defaultDarkPalette.background,
        color: overrides.secondary || defaultDarkPalette.secondary
      })), generateColorVariants({
        paletteKey: 'info',
        colorMode: 'dark',
        backgroundColor: overrides.background || defaultDarkPalette.background,
        color: overrides.info || defaultDarkPalette.info
      })), generateColorVariants({
        paletteKey: 'success',
        colorMode: 'dark',
        backgroundColor: overrides.background || defaultDarkPalette.background,
        color: overrides.success || defaultDarkPalette.success
      })), generateColorVariants({
        paletteKey: 'danger',
        colorMode: 'dark',
        backgroundColor: overrides.background || defaultDarkPalette.background,
        color: overrides.danger || defaultDarkPalette.danger
      })), generateColorVariants({
        paletteKey: 'warning',
        colorMode: 'dark',
        backgroundColor: overrides.background || defaultDarkPalette.background,
        color: overrides.warning || defaultDarkPalette.warning,
        paletteOverrides: function paletteOverrides(_ref3) {
          var color = _ref3.color;
          return {
            warningTintInverted: shade(0.7, color)()
          };
        }
      })), generateColorVariants({
        paletteKey: 'gray',
        colorMode: 'dark',
        backgroundColor: overrides.background || defaultDarkPalette.background,
        color: overrides.gray || defaultPalette.gray
      })), {}, {
        black: defaultPalette.black,
        black500: defaultPalette.black,
        black400: tint(0.25, defaultPalette.black)({
          backgroundColor: overrides.background || defaultDarkPalette.background,
          colorMode: 'default'
        }),
        black300: tint(0.5, defaultPalette.black)({
          backgroundColor: overrides.background || defaultDarkPalette.background,
          colorMode: 'default'
        }),
        black200: tint(0.75, defaultPalette.black)({
          backgroundColor: overrides.background || defaultDarkPalette.background,
          colorMode: 'default'
        }),
        black100: tint(1, defaultPalette.black)({
          backgroundColor: overrides.background || defaultDarkPalette.background,
          colorMode: 'default'
        })
      })
    }
  }, overrides);
});

var modes = (function (overrides) {
  return _objectSpread2$3({
    localStoragePrefix: 'bb',
    enableLocalStorage: true,
    useSystemColorMode: false
  }, overrides);
});

var lineHeights = (function (overrides) {
  return _objectSpread2$3({
    none: 1,
    default: 1.5,
    100: 1.125,
    200: 1.25,
    300: 1.5,
    400: 1.625,
    500: 1.75,
    600: 2
  }, overrides);
});

var letterSpacings = (function (overrides) {
  return _objectSpread2$3({
    default: '0',
    100: '-0.05em',
    200: '-0.025em',
    300: '0',
    400: '0.025em',
    500: '0.05em',
    600: '0.075em',
    700: '0.1em'
  }, overrides);
});

var altitudes = (function (overrides) {
  return _objectSpread2$3({
    100: 'box-shadow: 0px 1px 4px 0px rgba(0, 0, 0, 0.15), 0px 0px 2px 1px rgba(0, 0, 0, 0.02)',
    200: 'box-shadow: 0px 2px 8px 0px rgba(0, 0, 0, 0.15), 0px 0px 4px 2px rgba(0, 0, 0, 0.02)',
    300: 'box-shadow: 0px 3px 12px 0px rgba(0, 0, 0, 0.15), 0px 0px 6px 3px rgba(0, 0, 0, 0.02)',
    400: 'box-shadow: 0px 6px 24px 0px rgba(0, 0, 0, 0.15), 0px 0px 12px 6px rgba(0, 0, 0, 0.02)'
  }, overrides);
});

var borders = (function (overrides) {
  return _objectSpread2$3({
    default: function _default(styleProps) {
      return {
        color: palette('white800')(styleProps),
        width: '1px'
      };
    }
  }, overrides);
});

var borderRadii = (function (overrides) {
  return _objectSpread2$3({
    default: '6px',
    '0': '0px',
    '1': '2px',
    '2': '4px',
    '3': '6px',
    '4': '8px',
    '5': '16px',
    '6': '32px',
    '7': '64px'
  }, overrides);
});

var breakpoints = (function (overrides) {
  return _objectSpread2$3({
    mobile: 480,
    tablet: 768,
    desktop: 1024,
    widescreen: 1200,
    fullHD: 1440
  }, overrides);
});

var global = (function (overrides) {
  return _objectSpread2$3({
    fontSize: 16
  }, overrides);
});

var fonts = (function (overrides) {
  return _objectSpread2$3({
    default: "system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif",
    heading: "system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif",
    mono: "'SF Mono', 'Segoe UI Mono', 'Roboto Mono', Menlo, Courier, monospace"
  }, overrides);
});

var fontMetrics = {
  SFPro: {
    capHeight: 1450,
    ascent: 1950,
    descent: -420,
    lineGap: 0,
    unitsPerEm: 2048
  },
  Roboto: {
    capHeight: 1456,
    ascent: 1900,
    descent: -500,
    lineGap: 0,
    unitsPerEm: 2048
  },
  SegoeUI: {
    capHeight: 1434,
    ascent: 2210,
    descent: -514,
    lineGap: 0,
    unitsPerEm: 2048
  }
};
var OSFonts = {
  windows: 'SegoeUI',
  apple: 'SFPro',
  android: 'Roboto'
};
function getFontMetricsFromUserAgent() {
  if (typeof window !== 'undefined') {
    var userAgent = window.navigator.userAgent;

    if (/iPhone|iPad|Mac/.test(userAgent)) {
      return fontMetrics[OSFonts.apple];
    } else if (/Windows/.test(userAgent)) {
      return fontMetrics[OSFonts.windows];
    } else if (/Android/.test(userAgent)) {
      return fontMetrics[OSFonts.android];
    }
  }

  return fontMetrics.SFPro;
}
var fontMetrics$1 = (function (overrides) {
  return _objectSpread2$3({
    default: getFontMetricsFromUserAgent(),
    heading: getFontMetricsFromUserAgent()
  }, overrides);
});

var fontWeights = (function (overrides) {
  return _objectSpread2$3({
    normal: 400,
    semibold: 600,
    bold: 700
  }, overrides);
});

var fontSizes = (function (overrides) {
  return _objectSpread2$3({
    100: 0.75,
    150: 0.875,
    200: 1,
    250: 1.125,
    300: 1.25,
    400: 1.5,
    500: 2,
    600: 2.5,
    700: 3,
    800: 3.75,
    900: 4.5
  }, overrides);
});

var Container$2 = (function (overrides) {
  return _objectSpread2$3({
    fluidMargin: space(8),
    tabletMargin: space(4)
  }, overrides);
});

var Heading$1 = (function (overrides) {
  return _objectSpread2$3(_objectSpread2$3({}, overrides), {}, {
    h1: _objectSpread2$3({
      fontSize: '700',
      shrinkScale: 0.75
    }, overrides.h1),
    h2: _objectSpread2$3({
      fontSize: '600',
      shrinkScale: 0.75
    }, overrides.h2),
    h3: _objectSpread2$3({
      fontSize: '500',
      shrinkScale: 0.75
    }, overrides.h3),
    h4: _objectSpread2$3({
      fontSize: '400',
      shrinkScale: 0.75
    }, overrides.h4),
    h5: _objectSpread2$3({
      fontSize: '300',
      shrinkScale: 0.875
    }, overrides.h5),
    h6: _objectSpread2$3({
      fontSize: '200',
      shrinkScale: 1
    }, overrides.h6),
    defaultProps: _objectSpread2$3({
      shrinkBelow: 'tablet'
    }, overrides.defaultProps)
  });
});

var faInfoCircle = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'info-circle';
var width = 512;
var height = 512;
var ligatures = [];
var unicode = 'f05a';
var svgPathData = 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faInfoCircle = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

var faInfoCircle$1 = /*@__PURE__*/getDefaultExportFromCjs(faInfoCircle);

var faInfoCircle$2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), faInfoCircle, {
  'default': faInfoCircle$1
}));

var faChevronDown = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'chevron-down';
var width = 448;
var height = 512;
var ligatures = [];
var unicode = 'f078';
var svgPathData = 'M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faChevronDown = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

var faChevronDown$1 = /*@__PURE__*/getDefaultExportFromCjs(faChevronDown);

var faChevronDown$2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), faChevronDown, {
  'default': faChevronDown$1
}));

var faChevronLeft = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'chevron-left';
var width = 320;
var height = 512;
var ligatures = [];
var unicode = 'f053';
var svgPathData = 'M34.52 239.03L228.87 44.69c9.37-9.37 24.57-9.37 33.94 0l22.67 22.67c9.36 9.36 9.37 24.52.04 33.9L131.49 256l154.02 154.75c9.34 9.38 9.32 24.54-.04 33.9l-22.67 22.67c-9.37 9.37-24.57 9.37-33.94 0L34.52 272.97c-9.37-9.37-9.37-24.57 0-33.94z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faChevronLeft = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

var faChevronLeft$1 = /*@__PURE__*/getDefaultExportFromCjs(faChevronLeft);

var faChevronLeft$2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), faChevronLeft, {
  'default': faChevronLeft$1
}));

var faChevronRight = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'chevron-right';
var width = 320;
var height = 512;
var ligatures = [];
var unicode = 'f054';
var svgPathData = 'M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faChevronRight = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

var faChevronRight$1 = /*@__PURE__*/getDefaultExportFromCjs(faChevronRight);

var faChevronRight$2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), faChevronRight, {
  'default': faChevronRight$1
}));

var faExclamationTriangle = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'exclamation-triangle';
var width = 576;
var height = 512;
var ligatures = [];
var unicode = 'f071';
var svgPathData = 'M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faExclamationTriangle = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

var faExclamationTriangle$1 = /*@__PURE__*/getDefaultExportFromCjs(faExclamationTriangle);

var faExclamationTriangle$2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), faExclamationTriangle, {
  'default': faExclamationTriangle$1
}));

var faCheckCircle = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'check-circle';
var width = 512;
var height = 512;
var ligatures = [];
var unicode = 'f058';
var svgPathData = 'M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faCheckCircle = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

var faCheckCircle$1 = /*@__PURE__*/getDefaultExportFromCjs(faCheckCircle);

var faCheckCircle$2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), faCheckCircle, {
  'default': faCheckCircle$1
}));

var faExclamationCircle = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'exclamation-circle';
var width = 512;
var height = 512;
var ligatures = [];
var unicode = 'f06a';
var svgPathData = 'M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faExclamationCircle = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

var faExclamationCircle$1 = /*@__PURE__*/getDefaultExportFromCjs(faExclamationCircle);

var faExclamationCircle$2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), faExclamationCircle, {
  'default': faExclamationCircle$1
}));

var faQuestionCircle = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'question-circle';
var width = 512;
var height = 512;
var ligatures = [];
var unicode = 'f059';
var svgPathData = 'M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zM262.655 90c-54.497 0-89.255 22.957-116.549 63.758-3.536 5.286-2.353 12.415 2.715 16.258l34.699 26.31c5.205 3.947 12.621 3.008 16.665-2.122 17.864-22.658 30.113-35.797 57.303-35.797 20.429 0 45.698 13.148 45.698 32.958 0 14.976-12.363 22.667-32.534 33.976C247.128 238.528 216 254.941 216 296v4c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12v-1.333c0-28.462 83.186-29.647 83.186-106.667 0-58.002-60.165-102-116.531-102zM256 338c-25.365 0-46 20.635-46 46 0 25.364 20.635 46 46 46s46-20.636 46-46c0-25.365-20.635-46-46-46z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faQuestionCircle = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

var faQuestionCircle$1 = /*@__PURE__*/getDefaultExportFromCjs(faQuestionCircle);

var faQuestionCircle$2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), faQuestionCircle, {
  'default': faQuestionCircle$1
}));

var faTimes = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'times';
var width = 352;
var height = 512;
var ligatures = [];
var unicode = 'f00d';
var svgPathData = 'M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faTimes = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

var faTimes$1 = /*@__PURE__*/getDefaultExportFromCjs(faTimes);

var faTimes$2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), faTimes, {
  'default': faTimes$1
}));

var faSearch = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'search';
var width = 512;
var height = 512;
var ligatures = [];
var unicode = 'f002';
var svgPathData = 'M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faSearch = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

var faSearch$1 = /*@__PURE__*/getDefaultExportFromCjs(faSearch);

var faSearch$2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), faSearch, {
  'default': faSearch$1
}));

var faStar = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, '__esModule', { value: true });
var prefix = 'fas';
var iconName = 'star';
var width = 576;
var height = 512;
var ligatures = [];
var unicode = 'f005';
var svgPathData = 'M259.3 17.8L194 150.2 47.9 171.5c-26.2 3.8-36.7 36.1-17.7 54.6l105.7 103-25 145.5c-4.5 26.3 23.2 46 46.4 33.7L288 439.6l130.7 68.7c23.2 12.2 50.9-7.4 46.4-33.7l-25-145.5 105.7-103c19-18.5 8.5-50.8-17.7-54.6L382 150.2 316.7 17.8c-11.7-23.6-45.6-23.9-57.4 0z';

exports.definition = {
  prefix: prefix,
  iconName: iconName,
  icon: [
    width,
    height,
    ligatures,
    unicode,
    svgPathData
  ]};

exports.faStar = exports.definition;
exports.prefix = prefix;
exports.iconName = iconName;
exports.width = width;
exports.height = height;
exports.ligatures = ligatures;
exports.unicode = unicode;
exports.svgPathData = svgPathData;
});

var faStar$1 = /*@__PURE__*/getDefaultExportFromCjs(faStar);

var faStar$2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), faStar, {
  'default': faStar$1
}));

var parseOverrideIcons = function parseOverrideIcons(icons) {
  return icons.reduce(function (currentIcons, iconSet) {
    return _objectSpread2$3(_objectSpread2$3({}, currentIcons), parseIcons(iconSet.icons, {
      type: iconSet.type,
      prefix: iconSet.prefix
    }));
  }, {});
};

var Icon$2 = (function (overrides) {
  var _overrides$iconSets, _overrides$icons, _overrides$iconNames;

  return _objectSpread2$3(_objectSpread2$3({}, overrides), {}, {
    icons: _objectSpread2$3(_objectSpread2$3(_objectSpread2$3({}, parseIcons([faChevronDown$2, faChevronLeft$2, faChevronRight$2, faInfoCircle$2, faExclamationTriangle$2, faCheckCircle$2, faExclamationCircle$2, faQuestionCircle$2, faTimes$2, faSearch$2, faStar$2], {
      type: 'font-awesome-standalone'
    })), parseOverrideIcons((_overrides$iconSets = overrides === null || overrides === void 0 ? void 0 : overrides.iconSets) !== null && _overrides$iconSets !== void 0 ? _overrides$iconSets : [])), {}, {
      close: {
        viewBoxHeight: 512,
        viewBoxWidth: 320,
        paths: ['M193.94 256L296.5 153.44l21.15-21.15c3.12-3.12 3.12-8.19 0-11.31l-22.63-22.63c-3.12-3.12-8.19-3.12-11.31 0L160 222.06 36.29 98.34c-3.12-3.12-8.19-3.12-11.31 0L2.34 120.97c-3.12 3.12-3.12 8.19 0 11.31L126.06 256 2.34 379.71c-3.12 3.12-3.12 8.19 0 11.31l22.63 22.63c3.12 3.12 8.19 3.12 11.31 0L160 289.94 262.56 392.5l21.15 21.15c3.12 3.12 8.19 3.12 11.31 0l22.63-22.63c3.12-3.12 3.12-8.19 0-11.31L193.94 256z']
      }
    }, (_overrides$icons = overrides === null || overrides === void 0 ? void 0 : overrides.icons) !== null && _overrides$icons !== void 0 ? _overrides$icons : {}),
    iconNames: _objectSpread2$3({
      info: 'info-circle',
      warning: 'exclamation-triangle',
      success: 'check-circle',
      danger: 'exclamation-circle'
    }, (_overrides$iconNames = overrides === null || overrides === void 0 ? void 0 : overrides.iconNames) !== null && _overrides$iconNames !== void 0 ? _overrides$iconNames : {})
  });
});

var Toast$2 = (function (overrides) {
  return _objectSpread2$3({
    placement: 'top-end',
    showCountdown: true,
    timeout: 5000
  }, overrides);
});

var buildTheme = (function (overrides) {
  if (overrides === void 0) {
    overrides = {};
  }

  return _objectSpread2$3(_objectSpread2$3({
    name: 'default',
    useCSSVariables: true
  }, overrides), {}, {
    altitudes: altitudes(overrides.altitudes || {}),
    borders: borders(overrides.borders || {}),
    borderRadii: borderRadii(overrides.borderRadii || {}),
    breakpoints: breakpoints(overrides.breakpoints || {}),
    fonts: fonts(overrides.fonts || {}),
    fontMetrics: fontMetrics$1(overrides.fontMetrics || {}),
    fontSizes: fontSizes(overrides.fontSizes || {}),
    fontWeights: fontWeights(overrides.fontWeights || {}),
    global: global(overrides.global || {}),
    lineHeights: lineHeights(overrides.lineHeights || {}),
    letterSpacings: letterSpacings(overrides.letterSpacings || {}),
    modes: modes(overrides.modes || {}),
    spacing: spacing(overrides.spacing || {}),
    palette: getDefaultPalette(overrides.palette || {}),
    Container: Container$2(overrides.Container || {}),
    Heading: Heading$1(overrides.Heading || {}),
    Icon: Icon$2(overrides.Icon || {}),
    Toast: Toast$2(overrides.Toast || {})
  });
});

var _templateObject$15;
var ActionButtons$1 = function ActionButtons(styleProps) {
  return css(_templateObject$15 || (_templateObject$15 = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};

// Automatically generated
var BOX_KEYS = ["unstable_system"];

var useBox = createHook$1({
  name: "Box",
  keys: BOX_KEYS,
  propsAreEqual: function propsAreEqual(prev, next) {
    var prevSystem = prev.unstable_system,
        prevProps = _objectWithoutPropertiesLoose$3(prev, ["unstable_system"]);

    var nextSystem = next.unstable_system,
        nextProps = _objectWithoutPropertiesLoose$3(next, ["unstable_system"]);

    if (prevSystem !== nextSystem && !shallowEqual(prevSystem, nextSystem)) {
      return false;
    }

    return shallowEqual(prevProps, nextProps);
  }
});
var Box$2 = createComponent$1({
  as: "div",
  useHook: useBox
});

// https://github.com/mui-org/material-ui/blob/2bcc874cf07b81202968f769cb9c2398c7c11311/packages/material-ui/src/utils/useForkRef.js

function setRef(ref, value) {
  if (value === void 0) {
    value = null;
  }

  if (!ref) return;

  if (typeof ref === "function") {
    ref(value);
  } else {
    ref.current = value;
  }
}
/**
 * Merges up to two React Refs into a single memoized function React Ref so you
 * can pass it to an element.
 *
 * @example
 * import React from "react";
 * import { useForkRef } from "reakit-utils";
 *
 * const Component = React.forwardRef((props, ref) => {
 *   const internalRef = React.useRef();
 *   return <div {...props} ref={useForkRef(internalRef, ref)} />;
 * });
 */


function useForkRef(refA, refB) {
  return react.useMemo(function () {
    if (refA == null && refB == null) {
      return null;
    }

    return function (value) {
      setRef(refA, value);
      setRef(refB, value);
    };
  }, [refA, refB]);
}

var buttonInputTypes = ["button", "color", "file", "image", "reset", "submit"];
/**
 * Checks whether `element` is a native HTML button element.
 *
 * @example
 * import { isButton } from "reakit-utils";
 *
 * isButton(document.querySelector("button")); // true
 * isButton(document.querySelector("input[type='button']")); // true
 * isButton(document.querySelector("div")); // false
 * isButton(document.querySelector("input[type='text']")); // false
 * isButton(document.querySelector("div[role='button']")); // false
 *
 * @returns {boolean}
 */

function isButton(element) {
  if (element.tagName === "BUTTON") return true;

  if (element.tagName === "INPUT") {
    var input = element;
    return buttonInputTypes.indexOf(input.type) !== -1;
  }

  return false;
}

/**
 * Returns `element.ownerDocument || document`.
 */
function getDocument(element) {
  return element ? element.ownerDocument || element : document;
}

// Thanks to Fluent UI for doing the [research on IE11 memery leak](https://github.com/microsoft/fluentui/pull/9010#issuecomment-490768427)

var _window; // Note: Accessing "window" in IE11 is somewhat expensive, and calling "typeof window"
// hits a memory leak, whereas aliasing it and calling "typeof _window" does not.
// Caching the window value at the file scope lets us minimize the impact.


try {
  _window = window;
} catch (e) {
  /* no-op */
}
/**
 * Returns `element.ownerDocument.defaultView || window`.
 */


function getWindow$1(element) {
  if (!element) {
    return _window;
  }

  return getDocument(element).defaultView || _window;
}

function checkIsBrowser() {
  var _window = getWindow$1();

  return Boolean(typeof _window !== "undefined" && _window.document && _window.document.createElement);
}
/**
 * It's `true` if it is running in a browser environment or `false` if it is not (SSR).
 *
 * @example
 * import { canUseDOM } from "reakit-utils";
 *
 * const title = canUseDOM ? document.title : "";
 */


var canUseDOM = checkIsBrowser();

/**
 * `React.useLayoutEffect` that fallbacks to `React.useEffect` on server side
 * rendering.
 */

var useIsomorphicEffect = !canUseDOM ? react.useEffect : react.useLayoutEffect;

/**
 * A `React.Ref` that keeps track of the passed `value`.
 */

function useLiveRef(value) {
  var ref = react.useRef(value);
  useIsomorphicEffect(function () {
    ref.current = value;
  });
  return ref;
}

/**
 * Returns `true` if `event.target` and `event.currentTarget` are the same.
 */
function isSelfTarget(event) {
  return event.target === event.currentTarget;
}

/**
 * Returns `element.ownerDocument.activeElement`.
 */

function getActiveElement(element) {
  var _getDocument = getDocument(element),
      activeElement = _getDocument.activeElement;

  if (!(activeElement !== null && activeElement !== void 0 && activeElement.nodeName)) {
    // In IE11, activeElement might be an empty object if we're interacting
    // with elements inside of an iframe.
    return null;
  }

  return activeElement;
}

/**
 * Similar to `Element.prototype.contains`, but a little bit faster when
 * `element` is the same as `child`.
 *
 * @example
 * import { contains } from "reakit-utils";
 *
 * contains(document.getElementById("parent"), document.getElementById("child"));
 */
function contains$1(parent, child) {
  return parent === child || parent.contains(child);
}

/**
 * Checks if `element` has focus within. Elements that are referenced by
 * `aria-activedescendant` are also considered.
 *
 * @example
 * import { hasFocusWithin } from "reakit-utils";
 *
 * hasFocusWithin(document.getElementById("id"));
 */

function hasFocusWithin(element) {
  var activeElement = getActiveElement(element);
  if (!activeElement) return false;
  if (contains$1(element, activeElement)) return true;
  var activeDescendant = activeElement.getAttribute("aria-activedescendant");
  if (!activeDescendant) return false;
  if (activeDescendant === element.id) return true;
  return !!element.querySelector("#" + activeDescendant);
}

/**
 * Returns `true` if `event` has been fired within a React Portal element.
 */

function isPortalEvent(event) {
  return !contains$1(event.currentTarget, event.target);
}

/**
 * Ponyfill for `Element.prototype.matches`
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/matches
 */
function matches(element, selectors) {
  if ("matches" in element) {
    return element.matches(selectors);
  }

  if ("msMatchesSelector" in element) {
    return element.msMatchesSelector(selectors);
  }

  return element.webkitMatchesSelector(selectors);
}

/**
 * Ponyfill for `Element.prototype.closest`
 *
 * @example
 * import { closest } from "reakit-utils";
 *
 * closest(document.getElementById("id"), "div");
 * // same as
 * document.getElementById("id").closest("div");
 */
function closest(element, selectors) {
  if ("closest" in element) return element.closest(selectors);

  do {
    if (matches(element, selectors)) return element;
    element = element.parentElement || element.parentNode;
  } while (element !== null && element.nodeType === 1);

  return null;
}

/** @module tabbable */
var selector = "input:not([type='hidden']):not([disabled]), select:not([disabled]), " + "textarea:not([disabled]), a[href], button:not([disabled]), [tabindex], " + "iframe, object, embed, area[href], audio[controls], video[controls], " + "[contenteditable]:not([contenteditable='false'])";

function isVisible(element) {
  var htmlElement = element;
  return htmlElement.offsetWidth > 0 || htmlElement.offsetHeight > 0 || element.getClientRects().length > 0;
}

function hasNegativeTabIndex(element) {
  var tabIndex = parseInt(element.getAttribute("tabindex") || "0", 10);
  return tabIndex < 0;
}
/**
 * Checks whether `element` is focusable or not.
 *
 * @memberof tabbable
 *
 * @example
 * import { isFocusable } from "reakit-utils";
 *
 * isFocusable(document.querySelector("input")); // true
 * isFocusable(document.querySelector("input[tabindex='-1']")); // true
 * isFocusable(document.querySelector("input[hidden]")); // false
 * isFocusable(document.querySelector("input:disabled")); // false
 */


function isFocusable(element) {
  return matches(element, selector) && isVisible(element);
}
/**
 * Checks whether `element` is tabbable or not.
 *
 * @memberof tabbable
 *
 * @example
 * import { isTabbable } from "reakit-utils";
 *
 * isTabbable(document.querySelector("input")); // true
 * isTabbable(document.querySelector("input[tabindex='-1']")); // false
 * isTabbable(document.querySelector("input[hidden]")); // false
 * isTabbable(document.querySelector("input:disabled")); // false
 */

function isTabbable(element) {
  return isFocusable(element) && !hasNegativeTabIndex(element);
}
/**
 * Returns all the tabbable elements in `container`, including the container
 * itself.
 *
 * @memberof tabbable
 *
 * @param {Element} container
 * @param fallbackToFocusable If `true`, it'll return focusable elements if there are no tabbable ones.
 *
 * @returns {Element[]}
 */

function getAllTabbableIn(container, fallbackToFocusable) {
  var allFocusable = Array.from(container.querySelectorAll(selector));
  var allTabbable = allFocusable.filter(isTabbable);

  if (isTabbable(container)) {
    allTabbable.unshift(container);
  }

  if (!allTabbable.length && fallbackToFocusable) {
    return allFocusable;
  }

  return allTabbable;
}
/**
 * Returns the first tabbable element in `container`, including the container
 * itself if it's tabbable.
 *
 * @memberof tabbable
 *
 * @param {Element} container
 * @param fallbackToFocusable If `true`, it'll return the first focusable element if there are no tabbable ones.
 *
 * @returns {Element|null}
 */

function getFirstTabbableIn(container, fallbackToFocusable) {
  var _getAllTabbableIn = getAllTabbableIn(container, fallbackToFocusable),
      first = _getAllTabbableIn[0];

  return first || null;
}
/**
 * Returns the last tabbable element in `container`, including the container
 * itself if it's tabbable.
 *
 * @memberof tabbable
 *
 * @param {Element} container
 * @param fallbackToFocusable If `true`, it'll return the last focusable element if there are no tabbable ones.
 *
 * @returns {Element|null}
 */

function getLastTabbableIn(container, fallbackToFocusable) {
  var allTabbable = getAllTabbableIn(container, fallbackToFocusable);
  return allTabbable[allTabbable.length - 1] || null;
}
/**
 * Returns the closest focusable element.
 *
 * @memberof tabbable
 *
 * @param {Element} container
 *
 * @returns {Element|null}
 */

function getClosestFocusable(element) {
  while (element && !isFocusable(element)) {
    element = closest(element, selector);
  }

  return element;
}

// Automatically generated
var ROLE_KEYS = ["unstable_system"];

var useRole = createHook$1({
  name: "Role",
  keys: ROLE_KEYS,
  propsAreEqual: function propsAreEqual(prev, next) {
    var prevSystem = prev.unstable_system,
        prevProps = _objectWithoutPropertiesLoose$3(prev, ["unstable_system"]);

    var nextSystem = next.unstable_system,
        nextProps = _objectWithoutPropertiesLoose$3(next, ["unstable_system"]);

    if (prevSystem !== nextSystem && !shallowEqual(prevSystem, nextSystem)) {
      return false;
    }

    return shallowEqual(prevProps, nextProps);
  }
});
createComponent$1({
  as: "div",
  useHook: useRole
});

// Automatically generated
var TABBABLE_KEYS = ["disabled", "focusable"];

function isUA(string) {
  if (!canUseDOM) return false;
  return window.navigator.userAgent.indexOf(string) !== -1;
}

var isSafariOrFirefoxOnMac = isUA("Mac") && !isUA("Chrome") && (isUA("Safari") || isUA("Firefox"));

function focusIfNeeded(element) {
  if (!hasFocusWithin(element)) {
    element.focus();
  }
} // Safari and Firefox on MacOS don't focus on buttons on mouse down like other
// browsers/platforms. Instead, they focus on the closest focusable ancestor
// element, which is ultimately the body element. So we make sure to give focus
// to the tabbable element on mouse down so it works consistently across
// browsers.
// istanbul ignore next


function useFocusOnMouseDown() {
  if (!isSafariOrFirefoxOnMac) return undefined;

  var _React$useState = react.useState(null),
      tabbable = _React$useState[0],
      scheduleFocus = _React$useState[1];

  react.useEffect(function () {
    if (!tabbable) return;
    focusIfNeeded(tabbable);
    scheduleFocus(null);
  }, [tabbable]);
  var onMouseDown = react.useCallback(function (event) {
    var element = event.currentTarget;
    if (isPortalEvent(event)) return;
    if (!isButton(element)) return;
    var activeElement = getActiveElement(element);
    if (!activeElement) return;
    var activeElementIsBody = activeElement.tagName === "BODY";
    var focusableAncestor = getClosestFocusable(element.parentElement);

    if (activeElement === focusableAncestor || activeElementIsBody && !focusableAncestor) {
      // When the active element is the focusable ancestor, it'll not emit
      // focus/blur events. After all, it's already focused. So we can't
      // listen to those events to focus this tabbable element.
      // When the active element is body and there's no focusable ancestor,
      // we also don't have any other event to listen to since body never
      // emits focus/blur events on itself.
      // In both of these cases, we have to schedule focus on this tabbable
      // element.
      scheduleFocus(element);
    } else if (focusableAncestor) {
      // Clicking (mouse down) on the tabbable element on Safari and Firefox
      // on MacOS will fire focus on the focusable ancestor element if
      // there's any and if it's not the current active element. So we wait
      // for this event to happen before moving focus to this element.
      // Instead of moving focus right away, we have to schedule it,
      // otherwise it's gonna prevent drag events from happening.
      var onFocus = function onFocus() {
        return scheduleFocus(element);
      };

      focusableAncestor.addEventListener("focusin", onFocus, {
        once: true
      });
    } else {
      // Finally, if there's no focsuable ancestor and there's another
      // element with focus, we wait for that element to get blurred before
      // focusing this one.
      var onBlur = function onBlur() {
        return focusIfNeeded(element);
      };

      activeElement.addEventListener("blur", onBlur, {
        once: true
      });
    }
  }, []);
  return onMouseDown;
}

function isNativeTabbable(element) {
  return element.tagName === "BUTTON" || element.tagName === "INPUT" || element.tagName === "SELECT" || element.tagName === "TEXTAREA" || element.tagName === "A";
}

function supportsDisabledAttribute(element) {
  return element.tagName === "BUTTON" || element.tagName === "INPUT" || element.tagName === "SELECT" || element.tagName === "TEXTAREA";
}

function getTabIndex(trulyDisabled, nativeTabbable, supportsDisabled, htmlTabIndex) {
  if (trulyDisabled) {
    if (nativeTabbable && !supportsDisabled) {
      // Anchor, audio and video tags don't support the `disabled` attribute.
      // We must pass tabIndex={-1} so they don't receive focus on tab.
      return -1;
    } // Elements that support the `disabled` attribute don't need tabIndex.


    return undefined;
  }

  if (nativeTabbable) {
    // If the element is enabled and it's natively tabbable, we don't need to
    // specify a tabIndex attribute unless it's explicitly set by the user.
    return htmlTabIndex;
  } // If the element is enabled and is not natively tabbable, we have to
  // fallback tabIndex={0}.


  return htmlTabIndex || 0;
}

function useDisableEvent(htmlEventRef, disabled) {
  return react.useCallback(function (event) {
    var _htmlEventRef$current;

    (_htmlEventRef$current = htmlEventRef.current) === null || _htmlEventRef$current === void 0 ? void 0 : _htmlEventRef$current.call(htmlEventRef, event);
    if (event.defaultPrevented) return;

    if (disabled) {
      event.stopPropagation();
      event.preventDefault();
    }
  }, [htmlEventRef, disabled]);
}

var useTabbable = createHook$1({
  name: "Tabbable",
  compose: useRole,
  keys: TABBABLE_KEYS,
  useOptions: function useOptions(options, _ref) {
    var disabled = _ref.disabled;
    return _objectSpread2$2({
      disabled: disabled
    }, options);
  },
  useProps: function useProps(options, _ref2) {
    var htmlRef = _ref2.ref,
        htmlTabIndex = _ref2.tabIndex,
        htmlOnClickCapture = _ref2.onClickCapture,
        htmlOnMouseDownCapture = _ref2.onMouseDownCapture,
        htmlOnMouseDown = _ref2.onMouseDown,
        htmlOnKeyPressCapture = _ref2.onKeyPressCapture,
        htmlStyle = _ref2.style,
        htmlProps = _objectWithoutPropertiesLoose$3(_ref2, ["ref", "tabIndex", "onClickCapture", "onMouseDownCapture", "onMouseDown", "onKeyPressCapture", "style"]);

    var ref = react.useRef(null);
    var onClickCaptureRef = useLiveRef(htmlOnClickCapture);
    var onMouseDownCaptureRef = useLiveRef(htmlOnMouseDownCapture);
    var onMouseDownRef = useLiveRef(htmlOnMouseDown);
    var onKeyPressCaptureRef = useLiveRef(htmlOnKeyPressCapture);
    var trulyDisabled = !!options.disabled && !options.focusable;

    var _React$useState2 = react.useState(true),
        nativeTabbable = _React$useState2[0],
        setNativeTabbable = _React$useState2[1];

    var _React$useState3 = react.useState(true),
        supportsDisabled = _React$useState3[0],
        setSupportsDisabled = _React$useState3[1];

    var style = options.disabled ? _objectSpread2$2({
      pointerEvents: "none"
    }, htmlStyle) : htmlStyle;
    var focusOnMouseDown = useFocusOnMouseDown();
    useIsomorphicEffect(function () {
      var tabbable = ref.current;

      if (!tabbable) {
        return;
      }

      if (!isNativeTabbable(tabbable)) {
        setNativeTabbable(false);
      }

      if (!supportsDisabledAttribute(tabbable)) {
        setSupportsDisabled(false);
      }
    }, []);
    var onClickCapture = useDisableEvent(onClickCaptureRef, options.disabled);
    var onMouseDownCapture = useDisableEvent(onMouseDownCaptureRef, options.disabled);
    var onKeyPressCapture = useDisableEvent(onKeyPressCaptureRef, options.disabled);
    var onMouseDown = react.useCallback(function (event) {
      var _onMouseDownRef$curre;

      (_onMouseDownRef$curre = onMouseDownRef.current) === null || _onMouseDownRef$curre === void 0 ? void 0 : _onMouseDownRef$curre.call(onMouseDownRef, event);
      if (event.defaultPrevented) return;
      focusOnMouseDown === null || focusOnMouseDown === void 0 ? void 0 : focusOnMouseDown(event);
    }, [options.disabled, focusOnMouseDown]);
    return _objectSpread2$2({
      ref: useForkRef(ref, htmlRef),
      style: style,
      tabIndex: getTabIndex(trulyDisabled, nativeTabbable, supportsDisabled, htmlTabIndex),
      disabled: trulyDisabled && supportsDisabled ? true : undefined,
      "aria-disabled": options.disabled ? true : undefined,
      onClickCapture: onClickCapture,
      onMouseDownCapture: onMouseDownCapture,
      onMouseDown: onMouseDown,
      onKeyPressCapture: onKeyPressCapture
    }, htmlProps);
  }
});
createComponent$1({
  as: "div",
  useHook: useTabbable
});

// Automatically generated
var CLICKABLE_KEYS = ["unstable_clickOnEnter", "unstable_clickOnSpace"];

function isNativeClick(event) {
  var element = event.currentTarget;
  if (!event.isTrusted) return false; // istanbul ignore next: can't test trusted events yet

  return isButton(element) || element.tagName === "INPUT" || element.tagName === "TEXTAREA" || element.tagName === "A" || element.tagName === "SELECT";
}

var useClickable = createHook$1({
  name: "Clickable",
  compose: useTabbable,
  keys: CLICKABLE_KEYS,
  useOptions: function useOptions(_ref) {
    var _ref$unstable_clickOn = _ref.unstable_clickOnEnter,
        unstable_clickOnEnter = _ref$unstable_clickOn === void 0 ? true : _ref$unstable_clickOn,
        _ref$unstable_clickOn2 = _ref.unstable_clickOnSpace,
        unstable_clickOnSpace = _ref$unstable_clickOn2 === void 0 ? true : _ref$unstable_clickOn2,
        options = _objectWithoutPropertiesLoose$3(_ref, ["unstable_clickOnEnter", "unstable_clickOnSpace"]);

    return _objectSpread2$2({
      unstable_clickOnEnter: unstable_clickOnEnter,
      unstable_clickOnSpace: unstable_clickOnSpace
    }, options);
  },
  useProps: function useProps(options, _ref2) {
    var htmlOnKeyDown = _ref2.onKeyDown,
        htmlOnKeyUp = _ref2.onKeyUp,
        htmlProps = _objectWithoutPropertiesLoose$3(_ref2, ["onKeyDown", "onKeyUp"]);

    var _React$useState = react.useState(false),
        active = _React$useState[0],
        setActive = _React$useState[1];

    var onKeyDownRef = useLiveRef(htmlOnKeyDown);
    var onKeyUpRef = useLiveRef(htmlOnKeyUp);
    var onKeyDown = react.useCallback(function (event) {
      var _onKeyDownRef$current;

      (_onKeyDownRef$current = onKeyDownRef.current) === null || _onKeyDownRef$current === void 0 ? void 0 : _onKeyDownRef$current.call(onKeyDownRef, event);
      if (event.defaultPrevented) return;
      if (options.disabled) return;
      if (event.metaKey) return;
      if (!isSelfTarget(event)) return;
      var isEnter = options.unstable_clickOnEnter && event.key === "Enter";
      var isSpace = options.unstable_clickOnSpace && event.key === " ";

      if (isEnter || isSpace) {
        if (isNativeClick(event)) return;
        event.preventDefault();

        if (isEnter) {
          event.currentTarget.click();
        } else if (isSpace) {
          setActive(true);
        }
      }
    }, [options.disabled, options.unstable_clickOnEnter, options.unstable_clickOnSpace]);
    var onKeyUp = react.useCallback(function (event) {
      var _onKeyUpRef$current;

      (_onKeyUpRef$current = onKeyUpRef.current) === null || _onKeyUpRef$current === void 0 ? void 0 : _onKeyUpRef$current.call(onKeyUpRef, event);
      if (event.defaultPrevented) return;
      if (options.disabled) return;
      if (event.metaKey) return;
      var isSpace = options.unstable_clickOnSpace && event.key === " ";

      if (active && isSpace) {
        setActive(false);
        event.currentTarget.click();
      }
    }, [options.disabled, options.unstable_clickOnSpace, active]);
    return _objectSpread2$2({
      "data-active": active || undefined,
      onKeyDown: onKeyDown,
      onKeyUp: onKeyUp
    }, htmlProps);
  }
});
createComponent$1({
  as: "button",
  memo: true,
  useHook: useClickable
});

// Automatically generated
var BUTTON_KEYS = [];

var useButton = createHook$1({
  name: "Button",
  compose: useClickable,
  keys: BUTTON_KEYS,
  useProps: function useProps(_, _ref) {
    var htmlRef = _ref.ref,
        htmlProps = _objectWithoutPropertiesLoose$3(_ref, ["ref"]);

    var ref = react.useRef(null);

    var _React$useState = react.useState(undefined),
        role = _React$useState[0],
        setRole = _React$useState[1];

    var _React$useState2 = react.useState("button"),
        type = _React$useState2[0],
        setType = _React$useState2[1];

    react.useEffect(function () {
      var element = ref.current;

      if (!element) {
        return;
      }

      if (!isButton(element)) {
        if (element.tagName !== "A") {
          setRole("button");
        }

        setType(undefined);
      }
    }, []);
    return _objectSpread2$2({
      ref: useForkRef(ref, htmlRef),
      role: role,
      type: type
    }, htmlProps);
  }
});
var Button$3 = createComponent$1({
  as: "button",
  memo: true,
  useHook: useButton
});

/**
 * Immutably removes an index from an array.
 *
 * @example
 * import { removeIndexFromArray } from "reakit-utils";
 *
 * removeIndexFromArray(["a", "b", "c"], 1); // ["a", "c"]
 *
 * @returns {Array} A new array without the item in the passed index.
 */
function removeIndexFromArray(array, index) {
  if (index === -1) return array;
  return [].concat(array.slice(0, index), array.slice(index + 1));
}

/**
 * Creates an `Event` in a way that also works on IE 11.
 *
 * @example
 * import { createEvent } from "reakit-utils";
 *
 * const el = document.getElementById("id");
 * el.dispatchEvent(createEvent(el, "blur", { bubbles: false }));
 */

function createEvent(element, type, eventInit) {
  if (typeof Event === "function") {
    return new Event(type, eventInit);
  } // IE 11 doesn't support Event constructors


  var event = getDocument(element).createEvent("Event");
  event.initEvent(type, eventInit === null || eventInit === void 0 ? void 0 : eventInit.bubbles, eventInit === null || eventInit === void 0 ? void 0 : eventInit.cancelable);
  return event;
}

/**
 * A `React.useEffect` that will not run on the first render.
 */

function useUpdateEffect(effect, deps) {
  var mounted = react.useRef(false);
  react.useEffect(function () {
    if (mounted.current) {
      return effect();
    }

    mounted.current = true;
    return undefined;
  }, deps);
}

function createFocusEvent(element, type, eventInit) {
  if (eventInit === void 0) {
    eventInit = {};
  }

  if (typeof FocusEvent === "function") {
    return new FocusEvent(type, eventInit);
  }

  return createEvent(element, type, eventInit);
}
/**
 * Creates and dispatches a blur event in a way that also works on IE 11.
 *
 * @example
 * import { fireBlurEvent } from "reakit-utils";
 *
 * fireBlurEvent(document.getElementById("id"));
 */


function fireBlurEvent(element, eventInit) {
  var event = createFocusEvent(element, "blur", eventInit);
  var defaultAllowed = element.dispatchEvent(event);

  var bubbleInit = _objectSpread2(_objectSpread2({}, eventInit), {}, {
    bubbles: true
  });

  element.dispatchEvent(createFocusEvent(element, "focusout", bubbleInit));
  return defaultAllowed;
}

function createKeyboardEvent(element, type, eventInit) {
  if (eventInit === void 0) {
    eventInit = {};
  }

  if (typeof KeyboardEvent === "function") {
    return new KeyboardEvent(type, eventInit);
  } // IE 11 doesn't support Event constructors


  var event = getDocument(element).createEvent("KeyboardEvent");
  event.initKeyboardEvent(type, eventInit.bubbles, eventInit.cancelable, getWindow$1(element), eventInit.key, eventInit.location, eventInit.ctrlKey, eventInit.altKey, eventInit.shiftKey, eventInit.metaKey);
  return event;
}
/**
 * Creates and dispatches `KeyboardEvent` in a way that also works on IE 11.
 *
 * @example
 * import { fireKeyboardEvent } from "reakit-utils";
 *
 * fireKeyboardEvent(document.getElementById("id"), "keydown", {
 *   key: "ArrowDown",
 *   shiftKey: true,
 * });
 */


function fireKeyboardEvent(element, type, eventInit) {
  return element.dispatchEvent(createKeyboardEvent(element, type, eventInit));
}

var isIE11$1 = canUseDOM && "msCrypto" in window;
/**
 * Cross-browser method that returns the next active element (the element that
 * is receiving focus) after a blur event is dispatched. It receives the blur
 * event object as the argument.
 *
 * @example
 * import { getNextActiveElementOnBlur } from "reakit-utils";
 *
 * const element = document.getElementById("id");
 * element.addEventListener("blur", (event) => {
 *   const nextActiveElement = getNextActiveElementOnBlur(event);
 * });
 */

function getNextActiveElementOnBlur(event) {
  // IE 11 doesn't support event.relatedTarget on blur.
  // document.activeElement points the the next active element.
  // On modern browsers, document.activeElement points to the current target.
  if (isIE11$1) {
    var activeElement = getActiveElement(event.currentTarget);
    return activeElement;
  }

  return event.relatedTarget;
}

function groupItems(items) {
  var groups = [[]];

  var _loop = function _loop() {
    var item = _step.value;
    var group = groups.find(function (g) {
      return !g[0] || g[0].groupId === item.groupId;
    });

    if (group) {
      group.push(item);
    } else {
      groups.push([item]);
    }
  };

  for (var _iterator = _createForOfIteratorHelperLoose$1(items), _step; !(_step = _iterator()).done;) {
    _loop();
  }

  return groups;
}

function flatten(grid) {
  var flattened = [];

  for (var _iterator = _createForOfIteratorHelperLoose$1(grid), _step; !(_step = _iterator()).done;) {
    var row = _step.value;
    flattened.push.apply(flattened, row);
  }

  return flattened;
}

function reverse(array) {
  return array.slice().reverse();
}

function findFirstEnabledItem(items, excludeId) {
  if (excludeId) {
    return items.find(function (item) {
      return !item.disabled && item.id !== excludeId;
    });
  }

  return items.find(function (item) {
    return !item.disabled;
  });
}

function getCurrentId(options, passedId) {
  var _findFirstEnabledItem;

  if (passedId || passedId === null) {
    return passedId;
  }

  if (options.currentId || options.currentId === null) {
    return options.currentId;
  }

  return (_findFirstEnabledItem = findFirstEnabledItem(options.items || [])) === null || _findFirstEnabledItem === void 0 ? void 0 : _findFirstEnabledItem.id;
}

function findEnabledItemById(items, id) {
  if (!id) return undefined;
  return items === null || items === void 0 ? void 0 : items.find(function (item) {
    return item.id === id && !item.disabled;
  });
}

// Automatically generated
var COMPOSITE_STATE_KEYS = ["baseId", "unstable_idCountRef", "setBaseId", "unstable_virtual", "rtl", "orientation", "items", "groups", "currentId", "loop", "wrap", "shift", "unstable_moves", "unstable_hasActiveWidget", "unstable_includesBaseElement", "registerItem", "unregisterItem", "registerGroup", "unregisterGroup", "move", "next", "previous", "up", "down", "first", "last", "sort", "unstable_setVirtual", "setRTL", "setOrientation", "setCurrentId", "setLoop", "setWrap", "setShift", "reset", "unstable_setIncludesBaseElement", "unstable_setHasActiveWidget"];
var COMPOSITE_KEYS = COMPOSITE_STATE_KEYS;
var COMPOSITE_GROUP_KEYS = COMPOSITE_KEYS;
var COMPOSITE_ITEM_KEYS = COMPOSITE_GROUP_KEYS;

function userFocus(element) {
  element.userFocus = true;
  element.focus();
  element.userFocus = false;
}
function hasUserFocus(element) {
  return !!element.userFocus;
}
function setUserFocus(element, value) {
  element.userFocus = value;
}

var isIE11 = canUseDOM && "msCrypto" in window;

function canProxyKeyboardEvent(event) {
  if (!isSelfTarget(event)) return false;
  if (event.metaKey) return false;
  if (event.key === "Tab") return false;
  return true;
}

function useKeyboardEventProxy(virtual, currentItem, htmlEventHandler) {
  var eventHandlerRef = useLiveRef(htmlEventHandler);
  return react.useCallback(function (event) {
    var _eventHandlerRef$curr;

    (_eventHandlerRef$curr = eventHandlerRef.current) === null || _eventHandlerRef$curr === void 0 ? void 0 : _eventHandlerRef$curr.call(eventHandlerRef, event);
    if (event.defaultPrevented) return;

    if (virtual && canProxyKeyboardEvent(event)) {
      var currentElement = currentItem === null || currentItem === void 0 ? void 0 : currentItem.ref.current;

      if (currentElement) {
        if (!fireKeyboardEvent(currentElement, event.type, event)) {
          event.preventDefault();
        } // The event will be triggered on the composite item and then
        // propagated up to this composite element again, so we can pretend
        // that it wasn't called on this component in the first place.


        if (event.currentTarget.contains(currentElement)) {
          event.stopPropagation();
        }
      }
    }
  }, [virtual, currentItem]);
} // istanbul ignore next


function useActiveElementRef(elementRef) {
  var activeElementRef = react.useRef(null);
  react.useEffect(function () {
    var document = getDocument(elementRef.current);

    var onFocus = function onFocus(event) {
      var target = event.target;
      activeElementRef.current = target;
    };

    document.addEventListener("focus", onFocus, true);
    return function () {
      document.removeEventListener("focus", onFocus, true);
    };
  }, []);
  return activeElementRef;
}

function findFirstEnabledItemInTheLastRow(items) {
  return findFirstEnabledItem(flatten(reverse(groupItems(items))));
}

function isItem(items, element) {
  return items === null || items === void 0 ? void 0 : items.some(function (item) {
    return !!element && item.ref.current === element;
  });
}

function useScheduleUserFocus(currentItem) {
  var currentItemRef = useLiveRef(currentItem);

  var _React$useReducer = react.useReducer(function (n) {
    return n + 1;
  }, 0),
      scheduled = _React$useReducer[0],
      schedule = _React$useReducer[1];

  react.useEffect(function () {
    var _currentItemRef$curre;

    var currentElement = (_currentItemRef$curre = currentItemRef.current) === null || _currentItemRef$curre === void 0 ? void 0 : _currentItemRef$curre.ref.current;

    if (scheduled && currentElement) {
      userFocus(currentElement);
    }
  }, [scheduled]);
  return schedule;
}

var useComposite = createHook$1({
  name: "Composite",
  compose: [useTabbable],
  keys: COMPOSITE_KEYS,
  useOptions: function useOptions(options) {
    return _objectSpread2$2(_objectSpread2$2({}, options), {}, {
      currentId: getCurrentId(options)
    });
  },
  useProps: function useProps(options, _ref) {
    var htmlRef = _ref.ref,
        htmlOnFocusCapture = _ref.onFocusCapture,
        htmlOnFocus = _ref.onFocus,
        htmlOnBlurCapture = _ref.onBlurCapture,
        htmlOnKeyDown = _ref.onKeyDown,
        htmlOnKeyDownCapture = _ref.onKeyDownCapture,
        htmlOnKeyUpCapture = _ref.onKeyUpCapture,
        htmlProps = _objectWithoutPropertiesLoose$3(_ref, ["ref", "onFocusCapture", "onFocus", "onBlurCapture", "onKeyDown", "onKeyDownCapture", "onKeyUpCapture"]);

    var ref = react.useRef(null);
    var currentItem = findEnabledItemById(options.items, options.currentId);
    var previousElementRef = react.useRef(null);
    var onFocusCaptureRef = useLiveRef(htmlOnFocusCapture);
    var onFocusRef = useLiveRef(htmlOnFocus);
    var onBlurCaptureRef = useLiveRef(htmlOnBlurCapture);
    var onKeyDownRef = useLiveRef(htmlOnKeyDown);
    var scheduleUserFocus = useScheduleUserFocus(currentItem); // IE 11 doesn't support event.relatedTarget, so we use the active element
    // ref instead.

    var activeElementRef = isIE11 ? useActiveElementRef(ref) : undefined;
    react.useEffect(function () {
      var element = ref.current;

      if (options.unstable_moves && !currentItem) {
        // will receive focus.

        element === null || element === void 0 ? void 0 : element.focus();
      }
    }, [options.unstable_moves, currentItem]);
    var onKeyDownCapture = useKeyboardEventProxy(options.unstable_virtual, currentItem, htmlOnKeyDownCapture);
    var onKeyUpCapture = useKeyboardEventProxy(options.unstable_virtual, currentItem, htmlOnKeyUpCapture);
    var onFocusCapture = react.useCallback(function (event) {
      var _onFocusCaptureRef$cu;

      (_onFocusCaptureRef$cu = onFocusCaptureRef.current) === null || _onFocusCaptureRef$cu === void 0 ? void 0 : _onFocusCaptureRef$cu.call(onFocusCaptureRef, event);
      if (event.defaultPrevented) return;
      if (!options.unstable_virtual) return; // IE11 doesn't support event.relatedTarget, so we use the active
      // element ref instead.

      var previousActiveElement = (activeElementRef === null || activeElementRef === void 0 ? void 0 : activeElementRef.current) || event.relatedTarget;
      var previousActiveElementWasItem = isItem(options.items, previousActiveElement);

      if (isSelfTarget(event) && previousActiveElementWasItem) {
        // Composite has been focused as a result of an item receiving focus.
        // The composite item will move focus back to the composite
        // container. In this case, we don't want to propagate this
        // additional event nor call the onFocus handler passed to
        // <Composite onFocus={...} />.
        event.stopPropagation();
      }
    }, [options.unstable_virtual, options.items]);
    var onFocus = react.useCallback(function (event) {
      var _onFocusRef$current;

      (_onFocusRef$current = onFocusRef.current) === null || _onFocusRef$current === void 0 ? void 0 : _onFocusRef$current.call(onFocusRef, event);
      if (event.defaultPrevented) return;

      if (options.unstable_virtual) {
        if (isSelfTarget(event)) {
          // This means that the composite element has been focused while the
          // composite item has not. For example, by clicking on the
          // composite element without touching any item, or by tabbing into
          // the composite element. In this case, we want to trigger focus on
          // the item, just like it would happen with roving tabindex.
          // When it receives focus, the composite item will put focus back
          // on the composite element, in which case hasItemWithFocus will be
          // true.
          scheduleUserFocus();
        }
      } else if (isSelfTarget(event)) {
        var _options$setCurrentId;

        // When the roving tabindex composite gets intentionally focused (for
        // example, by clicking directly on it, and not on an item), we make
        // sure to set the current id to null (which means the composite
        // itself is focused).
        (_options$setCurrentId = options.setCurrentId) === null || _options$setCurrentId === void 0 ? void 0 : _options$setCurrentId.call(options, null);
      }
    }, [options.unstable_virtual, options.setCurrentId]);
    var onBlurCapture = react.useCallback(function (event) {
      var _onBlurCaptureRef$cur;

      (_onBlurCaptureRef$cur = onBlurCaptureRef.current) === null || _onBlurCaptureRef$cur === void 0 ? void 0 : _onBlurCaptureRef$cur.call(onBlurCaptureRef, event);
      if (event.defaultPrevented) return;
      if (!options.unstable_virtual) return; // When virtual is set to true, we move focus from the composite
      // container (this component) to the composite item that is being
      // selected. Then we move focus back to the composite container. This
      // is so we can provide the same API as the roving tabindex method,
      // which means people can attach onFocus/onBlur handlers on the
      // CompositeItem component regardless of whether it's virtual or not.
      // This sequence of blurring and focusing items and composite may be
      // confusing, so we ignore intermediate focus and blurs by stopping its
      // propagation and not calling the passed onBlur handler (htmlOnBlur).

      var currentElement = (currentItem === null || currentItem === void 0 ? void 0 : currentItem.ref.current) || null;
      var nextActiveElement = getNextActiveElementOnBlur(event);
      var nextActiveElementIsItem = isItem(options.items, nextActiveElement);

      if (isSelfTarget(event) && nextActiveElementIsItem) {
        // This is an intermediate blur event: blurring the composite
        // container to focus an item (nextActiveElement).
        if (nextActiveElement === currentElement) {
          // The next active element will be the same as the current item in
          // the state in two scenarios:
          //   - Moving focus with keyboard: the state is updated before the
          // blur event is triggered, so here the current item is already
          // pointing to the next active element.
          //   - Clicking on the current active item with a pointer: this
          // will trigger blur on the composite element and then the next
          // active element will be the same as the current item. Clicking on
          // an item other than the current one doesn't end up here as the
          // currentItem state will be updated only after it.
          if (previousElementRef.current && previousElementRef.current !== nextActiveElement) {
            // If there's a previous active item and it's not a click action,
            // then we fire a blur event on it so it will work just like if
            // it had DOM focus before (like when using roving tabindex).
            fireBlurEvent(previousElementRef.current, event);
          }

          previousElementRef.current = currentElement;
        } else if (currentElement) {
          // This will be true when the next active element is not the
          // current element, but there's a current item. This will only
          // happen when clicking with a pointer on a different item, when
          // there's already an item selected, in which case currentElement
          // is the item that is getting blurred, and nextActiveElement is
          // the item that is being clicked.
          fireBlurEvent(currentElement, event);
          previousElementRef.current = nextActiveElement;
        } // We want to ignore intermediate blur events, so we stop its
        // propagation and return early so onFocus will not be called.


        event.stopPropagation();
      } else {
        var targetIsItem = isItem(options.items, event.target);

        if (!targetIsItem && currentElement) {
          // If target is not a composite item, it may be the composite
          // element itself (isSelfTarget) or a tabbable element inside the
          // composite widget. This may be triggered by clicking outside the
          // composite widget or by tabbing out of it. In either cases we
          // want to fire a blur event on the current item.
          fireBlurEvent(currentElement, event);
        }
      }
    }, [options.unstable_virtual, options.items, currentItem]);
    var onKeyDown = react.useCallback(function (event) {
      var _onKeyDownRef$current, _options$groups;

      (_onKeyDownRef$current = onKeyDownRef.current) === null || _onKeyDownRef$current === void 0 ? void 0 : _onKeyDownRef$current.call(onKeyDownRef, event);
      if (event.defaultPrevented) return;
      if (options.currentId !== null) return;
      if (!isSelfTarget(event)) return;
      var isVertical = options.orientation !== "horizontal";
      var isHorizontal = options.orientation !== "vertical";
      var isGrid = !!((_options$groups = options.groups) === null || _options$groups === void 0 ? void 0 : _options$groups.length);

      var up = function up() {
        if (isGrid) {
          var item = findFirstEnabledItemInTheLastRow(options.items);

          if (item === null || item === void 0 ? void 0 : item.id) {
            var _options$move;

            (_options$move = options.move) === null || _options$move === void 0 ? void 0 : _options$move.call(options, item.id);
          }
        } else {
          var _options$last;

          (_options$last = options.last) === null || _options$last === void 0 ? void 0 : _options$last.call(options);
        }
      };

      var keyMap = {
        ArrowUp: (isGrid || isVertical) && up,
        ArrowRight: (isGrid || isHorizontal) && options.first,
        ArrowDown: (isGrid || isVertical) && options.first,
        ArrowLeft: (isGrid || isHorizontal) && options.last,
        Home: options.first,
        End: options.last,
        PageUp: options.first,
        PageDown: options.last
      };
      var action = keyMap[event.key];

      if (action) {
        event.preventDefault();
        action();
      }
    }, [options.currentId, options.orientation, options.groups, options.items, options.move, options.last, options.first]);
    return _objectSpread2$2({
      ref: useForkRef(ref, htmlRef),
      id: options.baseId,
      onFocus: onFocus,
      onFocusCapture: onFocusCapture,
      onBlurCapture: onBlurCapture,
      onKeyDownCapture: onKeyDownCapture,
      onKeyDown: onKeyDown,
      onKeyUpCapture: onKeyUpCapture,
      "aria-activedescendant": options.unstable_virtual ? (currentItem === null || currentItem === void 0 ? void 0 : currentItem.id) || undefined : undefined
    }, htmlProps);
  },
  useComposeProps: function useComposeProps(options, htmlProps) {
    htmlProps = useRole(options, htmlProps, true);
    var tabbableHTMLProps = useTabbable(options, htmlProps, true);

    if (options.unstable_virtual || options.currentId === null) {
      // Composite will only be tabbable by default if the focus is managed
      // using aria-activedescendant, which requires DOM focus on the container
      // element (the composite)
      return _objectSpread2$2({
        tabIndex: 0
      }, tabbableHTMLProps);
    }

    return _objectSpread2$2(_objectSpread2$2({}, htmlProps), {}, {
      ref: tabbableHTMLProps.ref
    });
  }
});
createComponent$1({
  as: "div",
  useHook: useComposite,
  useCreateElement: function useCreateElement$1(type, props, children) {
    return useCreateElement(type, props, children);
  }
});

/**
 * Check whether the given element is a text field, where text field is defined
 * by the ability to select within the input, or that it is contenteditable.
 *
 * @example
 * import { isTextField } from "reakit-utils";
 *
 * isTextField(document.querySelector("div")); // false
 * isTextField(document.querySelector("input")); // true
 * isTextField(document.querySelector("input[type='button']")); // false
 * isTextField(document.querySelector("textarea")); // true
 * isTextField(document.querySelector("div[contenteditable='true']")); // true
 */
function isTextField(element) {
  try {
    var isTextInput = element instanceof HTMLInputElement && element.selectionStart !== null;
    var isTextArea = element.tagName === "TEXTAREA";
    var isContentEditable = element.contentEditable === "true";
    return isTextInput || isTextArea || isContentEditable || false;
  } catch (error) {
    // Safari throws an exception when trying to get `selectionStart`
    // on non-text <input> elements (which, understandably, don't
    // have the text selection API). We catch this via a try/catch
    // block, as opposed to a more explicit check of the element's
    // input types, because of Safari's non-standard behavior. This
    // also means we don't have to worry about the list of input
    // types that support `selectionStart` changing as the HTML spec
    // evolves over time.
    return false;
  }
}

/**
 * Checks if `element` has focus. Elements that are referenced by
 * `aria-activedescendant` are also considered.
 *
 * @example
 * import { hasFocus } from "reakit-utils";
 *
 * hasFocus(document.getElementById("id"));
 */

function hasFocus(element) {
  var activeElement = getActiveElement(element);
  if (!activeElement) return false;
  if (activeElement === element) return true;
  var activeDescendant = activeElement.getAttribute("aria-activedescendant");
  if (!activeDescendant) return false;
  return activeDescendant === element.id;
}

/**
 * Ensures `element` will receive focus if it's not already.
 *
 * @example
 * import { ensureFocus } from "reakit-utils";
 *
 * ensureFocus(document.activeElement); // does nothing
 *
 * const element = document.querySelector("input");
 *
 * ensureFocus(element); // focuses element
 * ensureFocus(element, { preventScroll: true }); // focuses element preventing scroll jump
 *
 * function isActive(el) {
 *   return el.dataset.active === "true";
 * }
 *
 * ensureFocus(document.querySelector("[data-active='true']"), { isActive }); // does nothing
 *
 * @returns {number} `requestAnimationFrame` call ID so it can be passed to `cancelAnimationFrame` if needed.
 */
function ensureFocus(element, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      preventScroll = _ref.preventScroll,
      _ref$isActive = _ref.isActive,
      isActive = _ref$isActive === void 0 ? hasFocus : _ref$isActive;

  if (isActive(element)) return -1;
  element.focus({
    preventScroll: preventScroll
  });
  if (isActive(element)) return -1;
  return requestAnimationFrame(function () {
    element.focus({
      preventScroll: preventScroll
    });
  });
}

/**
 * Creates and dispatches `Event` in a way that also works on IE 11.
 *
 * @example
 * import { fireEvent } from "reakit-utils";
 *
 * fireEvent(document.getElementById("id"), "blur", {
 *   bubbles: true,
 *   cancelable: true,
 * });
 */

function fireEvent(element, type, eventInit) {
  return element.dispatchEvent(createEvent(element, type, eventInit));
}

function setTextFieldValue(element, value) {
  if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {
    var _Object$getOwnPropert;

    var proto = Object.getPrototypeOf(element);
    var setValue = (_Object$getOwnPropert = Object.getOwnPropertyDescriptor(proto, "value")) === null || _Object$getOwnPropert === void 0 ? void 0 : _Object$getOwnPropert.set;

    if (setValue) {
      setValue.call(element, value);
      fireEvent(element, "input", {
        bubbles: true
      });
    }
  }
}

function getWidget(itemElement) {
  return itemElement.querySelector("[data-composite-item-widget]");
}

function useItem(options) {
  return react.useMemo(function () {
    var _options$items;

    return (_options$items = options.items) === null || _options$items === void 0 ? void 0 : _options$items.find(function (item) {
      return options.id && item.id === options.id;
    });
  }, [options.items, options.id]);
}

function targetIsAnotherItem(event, items) {
  if (isSelfTarget(event)) return false;

  for (var _iterator = _createForOfIteratorHelperLoose$1(items), _step; !(_step = _iterator()).done;) {
    var item = _step.value;

    if (item.ref.current === event.target) {
      return true;
    }
  }

  return false;
}

var useCompositeItem = createHook$1({
  name: "CompositeItem",
  compose: [useClickable, unstable_useId],
  keys: COMPOSITE_ITEM_KEYS,
  propsAreEqual: function propsAreEqual(prev, next) {
    if (!next.id || prev.id !== next.id) {
      return useClickable.unstable_propsAreEqual(prev, next);
    }

    var prevCurrentId = prev.currentId,
        prevMoves = prev.unstable_moves,
        prevProps = _objectWithoutPropertiesLoose$3(prev, ["currentId", "unstable_moves"]);

    var nextCurrentId = next.currentId,
        nextMoves = next.unstable_moves,
        nextProps = _objectWithoutPropertiesLoose$3(next, ["currentId", "unstable_moves"]);

    if (nextCurrentId !== prevCurrentId) {
      if (next.id === nextCurrentId || next.id === prevCurrentId) {
        return false;
      }
    } else if (prevMoves !== nextMoves) {
      return false;
    }

    return useClickable.unstable_propsAreEqual(prevProps, nextProps);
  },
  useOptions: function useOptions(options) {
    return _objectSpread2$2(_objectSpread2$2({}, options), {}, {
      id: options.id,
      currentId: getCurrentId(options),
      unstable_clickOnSpace: options.unstable_hasActiveWidget ? false : options.unstable_clickOnSpace
    });
  },
  useProps: function useProps(options, _ref) {
    var _options$items2;

    var htmlRef = _ref.ref,
        _ref$tabIndex = _ref.tabIndex,
        htmlTabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex,
        htmlOnMouseDown = _ref.onMouseDown,
        htmlOnFocus = _ref.onFocus,
        htmlOnBlurCapture = _ref.onBlurCapture,
        htmlOnKeyDown = _ref.onKeyDown,
        htmlOnClick = _ref.onClick,
        htmlProps = _objectWithoutPropertiesLoose$3(_ref, ["ref", "tabIndex", "onMouseDown", "onFocus", "onBlurCapture", "onKeyDown", "onClick"]);

    var ref = react.useRef(null);
    var id = options.id;
    var trulyDisabled = options.disabled && !options.focusable;
    var isCurrentItem = options.currentId === id;
    var isCurrentItemRef = useLiveRef(isCurrentItem);
    var hasFocusedComposite = react.useRef(false);
    var item = useItem(options);
    var onMouseDownRef = useLiveRef(htmlOnMouseDown);
    var onFocusRef = useLiveRef(htmlOnFocus);
    var onBlurCaptureRef = useLiveRef(htmlOnBlurCapture);
    var onKeyDownRef = useLiveRef(htmlOnKeyDown);
    var onClickRef = useLiveRef(htmlOnClick);
    var shouldTabIndex = !options.unstable_virtual && !options.unstable_hasActiveWidget && isCurrentItem || // We don't want to set tabIndex="-1" when using CompositeItem as a
    // standalone component, without state props.
    !((_options$items2 = options.items) === null || _options$items2 === void 0 ? void 0 : _options$items2.length);
    react.useEffect(function () {
      var _options$registerItem;

      if (!id) return undefined;
      (_options$registerItem = options.registerItem) === null || _options$registerItem === void 0 ? void 0 : _options$registerItem.call(options, {
        id: id,
        ref: ref,
        disabled: !!trulyDisabled
      });
      return function () {
        var _options$unregisterIt;

        (_options$unregisterIt = options.unregisterItem) === null || _options$unregisterIt === void 0 ? void 0 : _options$unregisterIt.call(options, id);
      };
    }, [id, trulyDisabled, options.registerItem, options.unregisterItem]);
    react.useEffect(function () {
      var element = ref.current;

      if (!element) {
        return;
      } // `moves` will be incremented whenever next, previous, up, down, first,
      // last or move have been called. This means that the composite item will
      // be focused whenever some of these functions are called. We're using
      // isCurrentItemRef instead of isCurrentItem because we don't want to
      // focus the item if isCurrentItem changes (and options.moves doesn't).


      if (options.unstable_moves && isCurrentItemRef.current) {
        userFocus(element);
      }
    }, [options.unstable_moves]);
    var onMouseDown = react.useCallback(function (event) {
      var _onMouseDownRef$curre;

      (_onMouseDownRef$curre = onMouseDownRef.current) === null || _onMouseDownRef$curre === void 0 ? void 0 : _onMouseDownRef$curre.call(onMouseDownRef, event);
      setUserFocus(event.currentTarget, true);
    }, []);
    var onFocus = react.useCallback(function (event) {
      var _onFocusRef$current, _options$setCurrentId;

      var shouldFocusComposite = hasUserFocus(event.currentTarget);
      setUserFocus(event.currentTarget, false);
      (_onFocusRef$current = onFocusRef.current) === null || _onFocusRef$current === void 0 ? void 0 : _onFocusRef$current.call(onFocusRef, event);
      if (event.defaultPrevented) return;
      if (isPortalEvent(event)) return;
      if (!id) return;
      if (targetIsAnotherItem(event, options.items)) return;
      (_options$setCurrentId = options.setCurrentId) === null || _options$setCurrentId === void 0 ? void 0 : _options$setCurrentId.call(options, id); // When using aria-activedescendant, we want to make sure that the
      // composite container receives focus, not the composite item.
      // But we don't want to do this if the target is another focusable
      // element inside the composite item, such as CompositeItemWidget.

      if (shouldFocusComposite && options.unstable_virtual && options.baseId && isSelfTarget(event)) {
        var target = event.target;
        var composite = getDocument(target).getElementById(options.baseId);

        if (composite) {
          hasFocusedComposite.current = true;
          ensureFocus(composite);
        }
      }
    }, [id, options.items, options.setCurrentId, options.unstable_virtual, options.baseId]);
    var onBlurCapture = react.useCallback(function (event) {
      var _onBlurCaptureRef$cur;

      (_onBlurCaptureRef$cur = onBlurCaptureRef.current) === null || _onBlurCaptureRef$cur === void 0 ? void 0 : _onBlurCaptureRef$cur.call(onBlurCaptureRef, event);
      if (event.defaultPrevented) return;

      if (options.unstable_virtual && hasFocusedComposite.current) {
        // When hasFocusedComposite is true, composite has been focused right
        // after focusing this item. This is an intermediate blur event, so
        // we ignore it.
        hasFocusedComposite.current = false;
        event.preventDefault();
        event.stopPropagation();
      }
    }, [options.unstable_virtual]);
    var onKeyDown = react.useCallback(function (event) {
      var _onKeyDownRef$current;

      if (!isSelfTarget(event)) return;
      var isVertical = options.orientation !== "horizontal";
      var isHorizontal = options.orientation !== "vertical";
      var isGrid = !!(item === null || item === void 0 ? void 0 : item.groupId);
      var keyMap = {
        ArrowUp: (isGrid || isVertical) && options.up,
        ArrowRight: (isGrid || isHorizontal) && options.next,
        ArrowDown: (isGrid || isVertical) && options.down,
        ArrowLeft: (isGrid || isHorizontal) && options.previous,
        Home: function Home() {
          if (!isGrid || event.ctrlKey) {
            var _options$first;

            (_options$first = options.first) === null || _options$first === void 0 ? void 0 : _options$first.call(options);
          } else {
            var _options$previous;

            (_options$previous = options.previous) === null || _options$previous === void 0 ? void 0 : _options$previous.call(options, true);
          }
        },
        End: function End() {
          if (!isGrid || event.ctrlKey) {
            var _options$last;

            (_options$last = options.last) === null || _options$last === void 0 ? void 0 : _options$last.call(options);
          } else {
            var _options$next;

            (_options$next = options.next) === null || _options$next === void 0 ? void 0 : _options$next.call(options, true);
          }
        },
        PageUp: function PageUp() {
          if (isGrid) {
            var _options$up;

            (_options$up = options.up) === null || _options$up === void 0 ? void 0 : _options$up.call(options, true);
          } else {
            var _options$first2;

            (_options$first2 = options.first) === null || _options$first2 === void 0 ? void 0 : _options$first2.call(options);
          }
        },
        PageDown: function PageDown() {
          if (isGrid) {
            var _options$down;

            (_options$down = options.down) === null || _options$down === void 0 ? void 0 : _options$down.call(options, true);
          } else {
            var _options$last2;

            (_options$last2 = options.last) === null || _options$last2 === void 0 ? void 0 : _options$last2.call(options);
          }
        }
      };
      var action = keyMap[event.key];

      if (action) {
        event.preventDefault();
        action();
        return;
      }

      (_onKeyDownRef$current = onKeyDownRef.current) === null || _onKeyDownRef$current === void 0 ? void 0 : _onKeyDownRef$current.call(onKeyDownRef, event);
      if (event.defaultPrevented) return;

      if (event.key.length === 1 && event.key !== " ") {
        var widget = getWidget(event.currentTarget);

        if (widget && isTextField(widget)) {
          widget.focus();
          setTextFieldValue(widget, "");
        }
      } else if (event.key === "Delete" || event.key === "Backspace") {
        var _widget = getWidget(event.currentTarget);

        if (_widget && isTextField(_widget)) {
          event.preventDefault();
          setTextFieldValue(_widget, "");
        }
      }
    }, [options.orientation, item, options.up, options.next, options.down, options.previous, options.first, options.last]);
    var onClick = react.useCallback(function (event) {
      var _onClickRef$current;

      (_onClickRef$current = onClickRef.current) === null || _onClickRef$current === void 0 ? void 0 : _onClickRef$current.call(onClickRef, event);
      if (event.defaultPrevented) return;
      var element = event.currentTarget;
      var widget = getWidget(element);

      if (widget && !hasFocusWithin(widget)) {
        // If there's a widget inside the composite item, we make sure it's
        // focused when pressing enter, space or clicking on the composite item.
        widget.focus();
      }
    }, []);
    return _objectSpread2$2({
      ref: useForkRef(ref, htmlRef),
      id: id,
      tabIndex: shouldTabIndex ? htmlTabIndex : -1,
      "aria-selected": options.unstable_virtual && isCurrentItem ? true : undefined,
      onMouseDown: onMouseDown,
      onFocus: onFocus,
      onBlurCapture: onBlurCapture,
      onKeyDown: onKeyDown,
      onClick: onClick
    }, htmlProps);
  }
});
createComponent$1({
  as: "button",
  memo: true,
  useHook: useCompositeItem
});

// Automatically generated
var GROUP_KEYS = [];

var useGroup = createHook$1({
  name: "Group",
  compose: useRole,
  keys: GROUP_KEYS,
  useProps: function useProps(_, htmlProps) {
    return _objectSpread2$2({
      role: "group"
    }, htmlProps);
  }
});
createComponent$1({
  as: "div",
  useHook: useGroup
});

function isUpdater(argument) {
  return typeof argument === "function";
}
/**
 * Receives a `setState` argument and calls it with `currentValue` if it's a
 * function. Otherwise return the argument as the new value.
 *
 * @example
 * import { applyState } from "reakit-utils";
 *
 * applyState((value) => value + 1, 1); // 2
 * applyState(2, 1); // 2
 */


function applyState(argument, currentValue) {
  if (isUpdater(argument)) {
    return argument(currentValue);
  }

  return argument;
}

function isElementPreceding(element1, element2) {
  return Boolean(element2.compareDocumentPosition(element1) & Node.DOCUMENT_POSITION_PRECEDING);
}

function findDOMIndex(items, item) {
  return items.findIndex(function (currentItem) {
    if (!currentItem.ref.current || !item.ref.current) {
      return false;
    }

    return isElementPreceding(item.ref.current, currentItem.ref.current);
  });
}

function getMaxLength(rows) {
  var maxLength = 0;

  for (var _iterator = _createForOfIteratorHelperLoose$1(rows), _step; !(_step = _iterator()).done;) {
    var length = _step.value.length;

    if (length > maxLength) {
      maxLength = length;
    }
  }

  return maxLength;
}

/**
 * Turns [row1, row1, row2, row2] into [row1, row2, row1, row2]
 */

function verticalizeItems(items) {
  var groups = groupItems(items);
  var maxLength = getMaxLength(groups);
  var verticalized = [];

  for (var i = 0; i < maxLength; i += 1) {
    for (var _iterator = _createForOfIteratorHelperLoose$1(groups), _step; !(_step = _iterator()).done;) {
      var group = _step.value;

      if (group[i]) {
        verticalized.push(_objectSpread2$2(_objectSpread2$2({}, group[i]), {}, {
          // If there's no groupId, it means that it's not a grid composite,
          // but a single row instead. So, instead of verticalizing it, that
          // is, assigning a different groupId based on the column index, we
          // keep it undefined so they will be part of the same group.
          // It's useful when using up/down on one-dimensional composites.
          groupId: group[i].groupId ? "" + i : undefined
        }));
      }
    }
  }

  return verticalized;
}

function createEmptyItem(groupId) {
  return {
    id: "__EMPTY_ITEM__",
    disabled: true,
    ref: {
      current: null
    },
    groupId: groupId
  };
}
/**
 * Turns [[row1, row1], [row2]] into [[row1, row1], [row2, row2]]
 */


function fillGroups(groups, currentId, shift) {
  var maxLength = getMaxLength(groups);

  for (var _iterator = _createForOfIteratorHelperLoose$1(groups), _step; !(_step = _iterator()).done;) {
    var group = _step.value;

    for (var i = 0; i < maxLength; i += 1) {
      var item = group[i];

      if (!item || shift && item.disabled) {
        var isFrist = i === 0;
        var previousItem = isFrist && shift ? findFirstEnabledItem(group) : group[i - 1];
        group[i] = previousItem && currentId !== (previousItem === null || previousItem === void 0 ? void 0 : previousItem.id) && shift ? previousItem : createEmptyItem(previousItem === null || previousItem === void 0 ? void 0 : previousItem.groupId);
      }
    }
  }

  return groups;
}

var nullItem = {
  id: null,
  ref: {
    current: null
  }
};
function placeItemsAfter(items, id, shouldInsertNullItem) {
  var index = items.findIndex(function (item) {
    return item.id === id;
  });
  return [].concat(items.slice(index + 1), shouldInsertNullItem ? [nullItem] : [], items.slice(0, index));
}

function getItemsInGroup(items, groupId) {
  return items.filter(function (item) {
    return item.groupId === groupId;
  });
}

var map = {
  horizontal: "vertical",
  vertical: "horizontal"
};
function getOppositeOrientation(orientation) {
  return orientation && map[orientation];
}

function addItemAtIndex(array, item, index) {
  if (!(index in array)) {
    return [].concat(array, [item]);
  }

  return [].concat(array.slice(0, index), [item], array.slice(index));
}

function sortBasedOnDOMPosition(items) {
  var pairs = items.map(function (item, index) {
    return [index, item];
  });
  var isOrderDifferent = false;
  pairs.sort(function (_ref, _ref2) {
    var indexA = _ref[0],
        a = _ref[1];
    var indexB = _ref2[0],
        b = _ref2[1];
    var elementA = a.ref.current;
    var elementB = b.ref.current;
    if (!elementA || !elementB) return 0; // a before b

    if (isElementPreceding(elementA, elementB)) {
      if (indexA > indexB) {
        isOrderDifferent = true;
      }

      return -1;
    } // a after b


    if (indexA < indexB) {
      isOrderDifferent = true;
    }

    return 1;
  });

  if (isOrderDifferent) {
    return pairs.map(function (_ref3) {
      _ref3[0];
          var item = _ref3[1];
      return item;
    });
  }

  return items;
}

function setItemsBasedOnDOMPosition(items, setItems) {
  var sortedItems = sortBasedOnDOMPosition(items);

  if (items !== sortedItems) {
    setItems(sortedItems);
  }
} // istanbul ignore next: JSDOM doesn't support IntersectionObverser
// See https://github.com/jsdom/jsdom/issues/2032


function useIntersectionObserver(items, setItems) {
  var previousItems = react.useRef([]);
  react.useEffect(function () {
    var callback = function callback() {
      var hasPreviousItems = !!previousItems.current.length; // We don't want to sort items if items have been just registered.

      if (hasPreviousItems) {
        setItemsBasedOnDOMPosition(items, setItems);
      }

      previousItems.current = items;
    };

    var observer = new IntersectionObserver(callback, {
      root: document.body
    });

    for (var _iterator = _createForOfIteratorHelperLoose$1(items), _step; !(_step = _iterator()).done;) {
      var item = _step.value;

      if (item.ref.current) {
        observer.observe(item.ref.current);
      }
    }

    return function () {
      observer.disconnect();
    };
  }, [items]);
}

function useTimeoutObserver(items, setItems) {
  react.useEffect(function () {
    var callback = function callback() {
      return setItemsBasedOnDOMPosition(items, setItems);
    };

    var timeout = setTimeout(callback, 250);
    return function () {
      return clearTimeout(timeout);
    };
  });
}

function useSortBasedOnDOMPosition(items, setItems) {
  if (typeof IntersectionObserver === "function") {
    useIntersectionObserver(items, setItems);
  } else {
    useTimeoutObserver(items, setItems);
  }
}

function reducer$3(state, action) {
  var virtual = state.unstable_virtual,
      rtl = state.rtl,
      orientation = state.orientation,
      items = state.items,
      groups = state.groups,
      currentId = state.currentId,
      loop = state.loop,
      wrap = state.wrap,
      pastIds = state.pastIds,
      shift = state.shift,
      moves = state.unstable_moves,
      includesBaseElement = state.unstable_includesBaseElement,
      initialVirtual = state.initialVirtual,
      initialRTL = state.initialRTL,
      initialOrientation = state.initialOrientation,
      initialCurrentId = state.initialCurrentId,
      initialLoop = state.initialLoop,
      initialWrap = state.initialWrap,
      initialShift = state.initialShift,
      hasSetCurrentId = state.hasSetCurrentId;

  switch (action.type) {
    case "registerGroup":
      {
        var _group = action.group; // If there are no groups yet, just add it as the first one

        if (groups.length === 0) {
          return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
            groups: [_group]
          });
        } // Finds the group index based on DOM position


        var index = findDOMIndex(groups, _group);
        return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
          groups: addItemAtIndex(groups, _group, index)
        });
      }

    case "unregisterGroup":
      {
        var _id = action.id;
        var nextGroups = groups.filter(function (group) {
          return group.id !== _id;
        }); // The group isn't registered, so do nothing

        if (nextGroups.length === groups.length) {
          return state;
        }

        return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
          groups: nextGroups
        });
      }

    case "registerItem":
      {
        var _item = action.item; // Finds the item group based on the DOM hierarchy

        var _group2 = groups.find(function (r) {
          var _r$ref$current;

          return (_r$ref$current = r.ref.current) === null || _r$ref$current === void 0 ? void 0 : _r$ref$current.contains(_item.ref.current);
        }); // Group will be null if it's a one-dimensional composite


        var nextItem = _objectSpread2$2({
          groupId: _group2 === null || _group2 === void 0 ? void 0 : _group2.id
        }, _item);

        var _index = findDOMIndex(items, nextItem);

        var nextState = _objectSpread2$2(_objectSpread2$2({}, state), {}, {
          items: addItemAtIndex(items, nextItem, _index)
        });

        if (!hasSetCurrentId && !moves && initialCurrentId === undefined) {
          var _findFirstEnabledItem;

          // Sets currentId to the first enabled item. This runs whenever an item
          // is registered because the first enabled item may be registered
          // asynchronously.
          return _objectSpread2$2(_objectSpread2$2({}, nextState), {}, {
            currentId: (_findFirstEnabledItem = findFirstEnabledItem(nextState.items)) === null || _findFirstEnabledItem === void 0 ? void 0 : _findFirstEnabledItem.id
          });
        }

        return nextState;
      }

    case "unregisterItem":
      {
        var _id2 = action.id;
        var nextItems = items.filter(function (item) {
          return item.id !== _id2;
        }); // The item isn't registered, so do nothing

        if (nextItems.length === items.length) {
          return state;
        } // Filters out the item that is being removed from the pastIds list


        var nextPastIds = pastIds.filter(function (pastId) {
          return pastId !== _id2;
        });

        var _nextState = _objectSpread2$2(_objectSpread2$2({}, state), {}, {
          pastIds: nextPastIds,
          items: nextItems
        }); // If the current item is the item that is being removed, focus pastId


        if (currentId && currentId === _id2) {
          var nextId = includesBaseElement ? null : getCurrentId(_objectSpread2$2(_objectSpread2$2({}, _nextState), {}, {
            currentId: nextPastIds[0]
          }));
          return _objectSpread2$2(_objectSpread2$2({}, _nextState), {}, {
            currentId: nextId
          });
        }

        return _nextState;
      }

    case "move":
      {
        var _id3 = action.id; // move() does nothing

        if (_id3 === undefined) {
          return state;
        } // Removes the current item and the item that is receiving focus from the
        // pastIds list


        var filteredPastIds = pastIds.filter(function (pastId) {
          return pastId !== currentId && pastId !== _id3;
        }); // If there's a currentId, add it to the pastIds list so it can be focused
        // if the new item gets removed or disabled

        var _nextPastIds = currentId ? [currentId].concat(filteredPastIds) : filteredPastIds;

        var _nextState2 = _objectSpread2$2(_objectSpread2$2({}, state), {}, {
          pastIds: _nextPastIds
        }); // move(null) will focus the composite element itself, not an item


        if (_id3 === null) {
          return _objectSpread2$2(_objectSpread2$2({}, _nextState2), {}, {
            unstable_moves: moves + 1,
            currentId: getCurrentId(_nextState2, _id3)
          });
        }

        var _item2 = findEnabledItemById(items, _id3);

        return _objectSpread2$2(_objectSpread2$2({}, _nextState2), {}, {
          unstable_moves: _item2 ? moves + 1 : moves,
          currentId: getCurrentId(_nextState2, _item2 === null || _item2 === void 0 ? void 0 : _item2.id)
        });
      }

    case "next":
      {
        // If there's no item focused, we just move the first one
        if (currentId == null) {
          return reducer$3(state, _objectSpread2$2(_objectSpread2$2({}, action), {}, {
            type: "first"
          }));
        } // RTL doesn't make sense on vertical navigation


        var isHorizontal = orientation !== "vertical";
        var isRTL = rtl && isHorizontal;
        var allItems = isRTL ? reverse(items) : items;
        var currentItem = allItems.find(function (item) {
          return item.id === currentId;
        }); // If there's no item focused, we just move the first one

        if (!currentItem) {
          return reducer$3(state, _objectSpread2$2(_objectSpread2$2({}, action), {}, {
            type: "first"
          }));
        }

        var isGrid = !!currentItem.groupId;
        var currentIndex = allItems.indexOf(currentItem);

        var _nextItems = allItems.slice(currentIndex + 1);

        var nextItemsInGroup = getItemsInGroup(_nextItems, currentItem.groupId); // Home, End

        if (action.allTheWay) {
          // We reverse so we can get the last enabled item in the group. If it's
          // RTL, nextItems and nextItemsInGroup are already reversed and don't
          // have the items before the current one anymore. So we have to get
          // items in group again with allItems.
          var _nextItem2 = findFirstEnabledItem(isRTL ? getItemsInGroup(allItems, currentItem.groupId) : reverse(nextItemsInGroup));

          return reducer$3(state, _objectSpread2$2(_objectSpread2$2({}, action), {}, {
            type: "move",
            id: _nextItem2 === null || _nextItem2 === void 0 ? void 0 : _nextItem2.id
          }));
        }

        var oppositeOrientation = getOppositeOrientation( // If it's a grid and orientation is not set, it's a next/previous
        // call, which is inherently horizontal. up/down will call next with
        // orientation set to vertical by default (see below on up/down cases).
        isGrid ? orientation || "horizontal" : orientation);
        var canLoop = loop && loop !== oppositeOrientation;
        var canWrap = isGrid && wrap && wrap !== oppositeOrientation;
        var hasNullItem = // `previous` and `up` will set action.hasNullItem, but when calling
        // next directly, hasNullItem will only be true if it's not a grid and
        // loop is set to true, which means that pressing right or down keys on
        // grids will never focus the composite element. On one-dimensional
        // composites that don't loop, pressing right or down keys also doesn't
        // focus the composite element.
        action.hasNullItem || !isGrid && canLoop && includesBaseElement;

        if (canLoop) {
          var loopItems = canWrap && !hasNullItem ? allItems : getItemsInGroup(allItems, currentItem.groupId); // Turns [0, 1, current, 3, 4] into [3, 4, 0, 1]

          var sortedItems = placeItemsAfter(loopItems, currentId, hasNullItem);

          var _nextItem3 = findFirstEnabledItem(sortedItems, currentId);

          return reducer$3(state, _objectSpread2$2(_objectSpread2$2({}, action), {}, {
            type: "move",
            id: _nextItem3 === null || _nextItem3 === void 0 ? void 0 : _nextItem3.id
          }));
        }

        if (canWrap) {
          var _nextItem4 = findFirstEnabledItem( // We can use nextItems, which contains all the next items, including
          // items from other groups, to wrap between groups. However, if there
          // is a null item (the composite element), we'll only use the next
          // items in the group. So moving next from the last item will focus
          // the composite element (null). On grid composites, horizontal
          // navigation never focuses the composite element, only vertical.
          hasNullItem ? nextItemsInGroup : _nextItems, currentId);

          var _nextId = hasNullItem ? (_nextItem4 === null || _nextItem4 === void 0 ? void 0 : _nextItem4.id) || null : _nextItem4 === null || _nextItem4 === void 0 ? void 0 : _nextItem4.id;

          return reducer$3(state, _objectSpread2$2(_objectSpread2$2({}, action), {}, {
            type: "move",
            id: _nextId
          }));
        }

        var _nextItem = findFirstEnabledItem(nextItemsInGroup, currentId);

        if (!_nextItem && hasNullItem) {
          return reducer$3(state, _objectSpread2$2(_objectSpread2$2({}, action), {}, {
            type: "move",
            id: null
          }));
        }

        return reducer$3(state, _objectSpread2$2(_objectSpread2$2({}, action), {}, {
          type: "move",
          id: _nextItem === null || _nextItem === void 0 ? void 0 : _nextItem.id
        }));
      }

    case "previous":
      {
        // If currentId is initially set to null, the composite element will be
        // focusable while navigating with arrow keys. But, if it's a grid, we
        // don't want to focus the composite element with horizontal navigation.
        var _isGrid = !!groups.length;

        var _hasNullItem = !_isGrid && includesBaseElement;

        var _nextState3 = reducer$3(_objectSpread2$2(_objectSpread2$2({}, state), {}, {
          items: reverse(items)
        }), _objectSpread2$2(_objectSpread2$2({}, action), {}, {
          type: "next",
          hasNullItem: _hasNullItem
        }));

        return _objectSpread2$2(_objectSpread2$2({}, _nextState3), {}, {
          items: items
        });
      }

    case "down":
      {
        var shouldShift = shift && !action.allTheWay; // First, we make sure groups have the same number of items by filling it
        // with disabled fake items. Then, we reorganize the items list so
        // [1-1, 1-2, 2-1, 2-2] becomes [1-1, 2-1, 1-2, 2-2].

        var verticalItems = verticalizeItems(flatten(fillGroups(groupItems(items), currentId, shouldShift)));

        var _canLoop = loop && loop !== "horizontal"; // Pressing down arrow key will only focus the composite element if loop
        // is true or vertical.


        var _hasNullItem2 = _canLoop && includesBaseElement;

        var _nextState4 = reducer$3(_objectSpread2$2(_objectSpread2$2({}, state), {}, {
          orientation: "vertical",
          items: verticalItems
        }), _objectSpread2$2(_objectSpread2$2({}, action), {}, {
          type: "next",
          hasNullItem: _hasNullItem2
        }));

        return _objectSpread2$2(_objectSpread2$2({}, _nextState4), {}, {
          orientation: orientation,
          items: items
        });
      }

    case "up":
      {
        var _shouldShift = shift && !action.allTheWay;

        var _verticalItems = verticalizeItems(reverse(flatten(fillGroups(groupItems(items), currentId, _shouldShift)))); // If currentId is initially set to null, we'll always focus the
        // composite element when the up arrow key is pressed in the first row.


        var _hasNullItem3 = includesBaseElement;

        var _nextState5 = reducer$3(_objectSpread2$2(_objectSpread2$2({}, state), {}, {
          orientation: "vertical",
          items: _verticalItems
        }), _objectSpread2$2(_objectSpread2$2({}, action), {}, {
          type: "next",
          hasNullItem: _hasNullItem3
        }));

        return _objectSpread2$2(_objectSpread2$2({}, _nextState5), {}, {
          orientation: orientation,
          items: items
        });
      }

    case "first":
      {
        var firstItem = findFirstEnabledItem(items);
        return reducer$3(state, _objectSpread2$2(_objectSpread2$2({}, action), {}, {
          type: "move",
          id: firstItem === null || firstItem === void 0 ? void 0 : firstItem.id
        }));
      }

    case "last":
      {
        var _nextState6 = reducer$3(_objectSpread2$2(_objectSpread2$2({}, state), {}, {
          items: reverse(items)
        }), _objectSpread2$2(_objectSpread2$2({}, action), {}, {
          type: "first"
        }));

        return _objectSpread2$2(_objectSpread2$2({}, _nextState6), {}, {
          items: items
        });
      }

    case "sort":
      {
        return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
          items: sortBasedOnDOMPosition(items),
          groups: sortBasedOnDOMPosition(groups)
        });
      }

    case "setVirtual":
      return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
        unstable_virtual: applyState(action.virtual, virtual)
      });

    case "setRTL":
      return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
        rtl: applyState(action.rtl, rtl)
      });

    case "setOrientation":
      return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
        orientation: applyState(action.orientation, orientation)
      });

    case "setCurrentId":
      {
        var nextCurrentId = getCurrentId(_objectSpread2$2(_objectSpread2$2({}, state), {}, {
          currentId: applyState(action.currentId, currentId)
        }));
        return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
          currentId: nextCurrentId,
          hasSetCurrentId: true
        });
      }

    case "setLoop":
      return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
        loop: applyState(action.loop, loop)
      });

    case "setWrap":
      return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
        wrap: applyState(action.wrap, wrap)
      });

    case "setShift":
      return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
        shift: applyState(action.shift, shift)
      });

    case "setIncludesBaseElement":
      {
        return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
          unstable_includesBaseElement: applyState(action.includesBaseElement, includesBaseElement)
        });
      }

    case "reset":
      return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
        unstable_virtual: initialVirtual,
        rtl: initialRTL,
        orientation: initialOrientation,
        currentId: getCurrentId(_objectSpread2$2(_objectSpread2$2({}, state), {}, {
          currentId: initialCurrentId
        })),
        loop: initialLoop,
        wrap: initialWrap,
        shift: initialShift,
        unstable_moves: 0,
        pastIds: []
      });

    case "setItems":
      {
        return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
          items: action.items
        });
      }

    default:
      throw new Error();
  }
}

function useAction$1(fn) {
  return react.useCallback(fn, []);
}

function useIsUnmountedRef() {
  var isUnmountedRef = react.useRef(false);
  useIsomorphicEffect(function () {
    return function () {
      isUnmountedRef.current = true;
    };
  }, []);
  return isUnmountedRef;
}

function useCompositeState(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }

  var _useSealedState = useSealedState(initialState),
      _useSealedState$unsta = _useSealedState.unstable_virtual,
      virtual = _useSealedState$unsta === void 0 ? false : _useSealedState$unsta,
      _useSealedState$rtl = _useSealedState.rtl,
      rtl = _useSealedState$rtl === void 0 ? false : _useSealedState$rtl,
      orientation = _useSealedState.orientation,
      currentId = _useSealedState.currentId,
      _useSealedState$loop = _useSealedState.loop,
      loop = _useSealedState$loop === void 0 ? false : _useSealedState$loop,
      _useSealedState$wrap = _useSealedState.wrap,
      wrap = _useSealedState$wrap === void 0 ? false : _useSealedState$wrap,
      _useSealedState$shift = _useSealedState.shift,
      shift = _useSealedState$shift === void 0 ? false : _useSealedState$shift,
      unstable_includesBaseElement = _useSealedState.unstable_includesBaseElement,
      sealed = _objectWithoutPropertiesLoose$3(_useSealedState, ["unstable_virtual", "rtl", "orientation", "currentId", "loop", "wrap", "shift", "unstable_includesBaseElement"]);

  var idState = unstable_useIdState(sealed);

  var _React$useReducer = react.useReducer(reducer$3, {
    unstable_virtual: virtual,
    rtl: rtl,
    orientation: orientation,
    items: [],
    groups: [],
    currentId: currentId,
    loop: loop,
    wrap: wrap,
    shift: shift,
    unstable_moves: 0,
    pastIds: [],
    unstable_includesBaseElement: unstable_includesBaseElement != null ? unstable_includesBaseElement : currentId === null,
    initialVirtual: virtual,
    initialRTL: rtl,
    initialOrientation: orientation,
    initialCurrentId: currentId,
    initialLoop: loop,
    initialWrap: wrap,
    initialShift: shift
  }),
      _React$useReducer$ = _React$useReducer[0];
      _React$useReducer$.pastIds;
      _React$useReducer$.initialVirtual;
      _React$useReducer$.initialRTL;
      _React$useReducer$.initialOrientation;
      _React$useReducer$.initialCurrentId;
      _React$useReducer$.initialLoop;
      _React$useReducer$.initialWrap;
      _React$useReducer$.initialShift;
      _React$useReducer$.hasSetCurrentId;
      var state = _objectWithoutPropertiesLoose$3(_React$useReducer$, ["pastIds", "initialVirtual", "initialRTL", "initialOrientation", "initialCurrentId", "initialLoop", "initialWrap", "initialShift", "hasSetCurrentId"]),
      dispatch = _React$useReducer[1];

  var _React$useState = react.useState(false),
      hasActiveWidget = _React$useState[0],
      setHasActiveWidget = _React$useState[1]; // register/unregister may be called when this component is unmounted. We
  // store the unmounted state here so we don't update the state if it's true.
  // This only happens in a very specific situation.
  // See https://github.com/reakit/reakit/issues/650


  var isUnmountedRef = useIsUnmountedRef();
  var setItems = react.useCallback(function (items) {
    return dispatch({
      type: "setItems",
      items: items
    });
  }, []);
  useSortBasedOnDOMPosition(state.items, setItems);
  return _objectSpread2$2(_objectSpread2$2(_objectSpread2$2({}, idState), state), {}, {
    unstable_hasActiveWidget: hasActiveWidget,
    unstable_setHasActiveWidget: setHasActiveWidget,
    registerItem: useAction$1(function (item) {
      if (isUnmountedRef.current) return;
      dispatch({
        type: "registerItem",
        item: item
      });
    }),
    unregisterItem: useAction$1(function (id) {
      if (isUnmountedRef.current) return;
      dispatch({
        type: "unregisterItem",
        id: id
      });
    }),
    registerGroup: useAction$1(function (group) {
      if (isUnmountedRef.current) return;
      dispatch({
        type: "registerGroup",
        group: group
      });
    }),
    unregisterGroup: useAction$1(function (id) {
      if (isUnmountedRef.current) return;
      dispatch({
        type: "unregisterGroup",
        id: id
      });
    }),
    move: useAction$1(function (id) {
      return dispatch({
        type: "move",
        id: id
      });
    }),
    next: useAction$1(function (allTheWay) {
      return dispatch({
        type: "next",
        allTheWay: allTheWay
      });
    }),
    previous: useAction$1(function (allTheWay) {
      return dispatch({
        type: "previous",
        allTheWay: allTheWay
      });
    }),
    up: useAction$1(function (allTheWay) {
      return dispatch({
        type: "up",
        allTheWay: allTheWay
      });
    }),
    down: useAction$1(function (allTheWay) {
      return dispatch({
        type: "down",
        allTheWay: allTheWay
      });
    }),
    first: useAction$1(function () {
      return dispatch({
        type: "first"
      });
    }),
    last: useAction$1(function () {
      return dispatch({
        type: "last"
      });
    }),
    sort: useAction$1(function () {
      return dispatch({
        type: "sort"
      });
    }),
    unstable_setVirtual: useAction$1(function (value) {
      return dispatch({
        type: "setVirtual",
        virtual: value
      });
    }),
    setRTL: useAction$1(function (value) {
      return dispatch({
        type: "setRTL",
        rtl: value
      });
    }),
    setOrientation: useAction$1(function (value) {
      return dispatch({
        type: "setOrientation",
        orientation: value
      });
    }),
    setCurrentId: useAction$1(function (value) {
      return dispatch({
        type: "setCurrentId",
        currentId: value
      });
    }),
    setLoop: useAction$1(function (value) {
      return dispatch({
        type: "setLoop",
        loop: value
      });
    }),
    setWrap: useAction$1(function (value) {
      return dispatch({
        type: "setWrap",
        wrap: value
      });
    }),
    setShift: useAction$1(function (value) {
      return dispatch({
        type: "setShift",
        shift: value
      });
    }),
    unstable_setIncludesBaseElement: useAction$1(function (value) {
      return dispatch({
        type: "setIncludesBaseElement",
        includesBaseElement: value
      });
    }),
    reset: useAction$1(function () {
      return dispatch({
        type: "reset"
      });
    })
  });
}

var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [top, bottom, right, left];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []); // modifiers that need to read the DOM

var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers

var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

function getNodeName(element) {
  return element ? (element.nodeName || '').toLowerCase() : null;
}

function getWindow(node) {
  if (node == null) {
    return window;
  }

  if (node.toString() !== '[object Window]') {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }

  return node;
}

function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}

function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}

function isShadowRoot(node) {
  // IE 11 has no ShadowRoot
  if (typeof ShadowRoot === 'undefined') {
    return false;
  }

  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// and applies them to the HTMLElements such as popper and arrow

function applyStyles$1(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function (name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name]; // arrow is optional + virtual elements

    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    } // Flow doesn't support to extend this property, but it's the most
    // effective way to apply styles to an HTMLElement
    // $FlowFixMe[cannot-write]


    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function (name) {
      var value = attributes[name];

      if (value === false) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value === true ? '' : value);
      }
    });
  });
}

function effect$2(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: '0',
      top: '0',
      margin: '0'
    },
    arrow: {
      position: 'absolute'
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;

  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }

  return function () {
    Object.keys(state.elements).forEach(function (name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

      var style = styleProperties.reduce(function (style, property) {
        style[property] = '';
        return style;
      }, {}); // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }

      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
} // eslint-disable-next-line import/no-unused-modules


var applyStyles$2 = {
  name: 'applyStyles',
  enabled: true,
  phase: 'write',
  fn: applyStyles$1,
  effect: effect$2,
  requires: ['computeStyles']
};

function getBasePlacement(placement) {
  return placement.split('-')[0];
}

function getBoundingClientRect(element) {
  var rect = element.getBoundingClientRect();
  return {
    width: rect.width,
    height: rect.height,
    top: rect.top,
    right: rect.right,
    bottom: rect.bottom,
    left: rect.left,
    x: rect.left,
    y: rect.top
  };
}

// means it doesn't take into account transforms.

function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
  // Fixes https://github.com/popperjs/popper-core/issues/1223

  var width = element.offsetWidth;
  var height = element.offsetHeight;

  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }

  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }

  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: width,
    height: height
  };
}

function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

  if (parent.contains(child)) {
    return true;
  } // then fallback to custom implementation with Shadow DOM support
  else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


  return false;
}

function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}

function isTableElement(element) {
  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
}

function getDocumentElement(element) {
  // $FlowFixMe[incompatible-return]: assume body is always available
  return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
  element.document) || window.document).documentElement;
}

function getParentNode(element) {
  if (getNodeName(element) === 'html') {
    return element;
  }

  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || ( // DOM Element detected
    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element) // fallback

  );
}

function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle(element).position === 'fixed') {
    return null;
  }

  return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block


function getContainingBlock(element) {
  var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;
  var isIE = navigator.userAgent.indexOf('Trident') !== -1;

  if (isIE && isHTMLElement(element)) {
    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
    var elementCss = getComputedStyle(element);

    if (elementCss.position === 'fixed') {
      return null;
    }
  }

  var currentNode = getParentNode(element);

  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
    // create a containing block.
    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }

  return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.


function getOffsetParent(element) {
  var window = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);

  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent);
  }

  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
    return window;
  }

  return offsetParent || getContainingBlock(element) || window;
}

function getMainAxisFromPlacement(placement) {
  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
}

var max = Math.max;
var min = Math.min;
var round = Math.round;

function within(min$1, value, max$1) {
  return max(min$1, min(value, max$1));
}

function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

function expandToHashMap(value, keys) {
  return keys.reduce(function (hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

var toPaddingObject = function toPaddingObject(padding, state) {
  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
};

function arrow(_ref) {
  var _state$modifiersData$;

  var state = _ref.state,
      name = _ref.name,
      options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? 'height' : 'width';

  if (!arrowElement || !popperOffsets) {
    return;
  }

  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === 'y' ? top : left;
  var maxProp = axis === 'y' ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
  // outside of the popper bounds

  var min = paddingObject[minProp];
  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset = within(min, center, max); // Prevents breaking syntax highlighting...

  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}

function effect$1(_ref2) {
  var state = _ref2.state,
      options = _ref2.options;
  var _options$element = options.element,
      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

  if (arrowElement == null) {
    return;
  } // CSS selector


  if (typeof arrowElement === 'string') {
    arrowElement = state.elements.popper.querySelector(arrowElement);

    if (!arrowElement) {
      return;
    }
  }

  if (!contains(state.elements.popper, arrowElement)) {

    return;
  }

  state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules


var arrow$1 = {
  name: 'arrow',
  enabled: true,
  phase: 'main',
  fn: arrow,
  effect: effect$1,
  requires: ['popperOffsets'],
  requiresIfExists: ['preventOverflow']
};

var unsetSides = {
  top: 'auto',
  right: 'auto',
  bottom: 'auto',
  left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.

function roundOffsetsByDPR(_ref) {
  var x = _ref.x,
      y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(round(x * dpr) / dpr) || 0,
    y: round(round(y * dpr) / dpr) || 0
  };
}

function mapToStyles(_ref2) {
  var _Object$assign2;

  var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive,
      roundOffsets = _ref2.roundOffsets;

  var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === 'function' ? roundOffsets(offsets) : offsets,
      _ref3$x = _ref3.x,
      x = _ref3$x === void 0 ? 0 : _ref3$x,
      _ref3$y = _ref3.y,
      y = _ref3$y === void 0 ? 0 : _ref3$y;

  var hasX = offsets.hasOwnProperty('x');
  var hasY = offsets.hasOwnProperty('y');
  var sideX = left;
  var sideY = top;
  var win = window;

  if (adaptive) {
    var offsetParent = getOffsetParent(popper);
    var heightProp = 'clientHeight';
    var widthProp = 'clientWidth';

    if (offsetParent === getWindow(popper)) {
      offsetParent = getDocumentElement(popper);

      if (getComputedStyle(offsetParent).position !== 'static') {
        heightProp = 'scrollHeight';
        widthProp = 'scrollWidth';
      }
    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


    offsetParent = offsetParent;

    if (placement === top) {
      sideY = bottom; // $FlowFixMe[prop-missing]

      y -= offsetParent[heightProp] - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }

    if (placement === left) {
      sideX = right; // $FlowFixMe[prop-missing]

      x -= offsetParent[widthProp] - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }

  var commonStyles = Object.assign({
    position: position
  }, adaptive && unsetSides);

  if (gpuAcceleration) {
    var _Object$assign;

    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) < 2 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }

  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}

function computeStyles(_ref4) {
  var state = _ref4.state,
      options = _ref4.options;
  var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
      _options$roundOffsets = options.roundOffsets,
      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

  var commonStyles = {
    placement: getBasePlacement(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration: gpuAcceleration
  };

  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive: adaptive,
      roundOffsets: roundOffsets
    })));
  }

  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: 'absolute',
      adaptive: false,
      roundOffsets: roundOffsets
    })));
  }

  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-placement': state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


var computeStyles$1 = {
  name: 'computeStyles',
  enabled: true,
  phase: 'beforeWrite',
  fn: computeStyles,
  data: {}
};

var passive = {
  passive: true
};

function effect(_ref) {
  var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options;
  var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize;
  var window = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

  if (scroll) {
    scrollParents.forEach(function (scrollParent) {
      scrollParent.addEventListener('scroll', instance.update, passive);
    });
  }

  if (resize) {
    window.addEventListener('resize', instance.update, passive);
  }

  return function () {
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.removeEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.removeEventListener('resize', instance.update, passive);
    }
  };
} // eslint-disable-next-line import/no-unused-modules


var eventListeners = {
  name: 'eventListeners',
  enabled: true,
  phase: 'write',
  fn: function fn() {},
  effect: effect,
  data: {}
};

var hash$1 = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash$1[matched];
  });
}

var hash = {
  start: 'end',
  end: 'start'
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function (matched) {
    return hash[matched];
  });
}

function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft: scrollLeft,
    scrollTop: scrollTop
  };
}

function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  // Popper 1 is broken in this case and never had a bug report so let's assume
  // it's not an issue. I don't think anyone ever specifies width on <html>
  // anyway.
  // Browsers where the left scrollbar doesn't cause an issue report `0` for
  // this (e.g. Edge 2019, IE11, Safari)
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

function getViewportRect(element) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
  // can be obscured underneath it.
  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
  // if it isn't open, so if this isn't available, the popper will be detected
  // to overflow the bottom of the screen too early.

  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
    // errors due to floating point numbers, so we need to check precision.
    // Safari returns a number <= 0, usually < -1 when pinch-zoomed
    // Feature detection fails in mobile emulation mode in Chrome.
    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
    // 0.001
    // Fallback here: "Not Safari" userAgent

    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }

  return {
    width: width,
    height: height,
    x: x + getWindowScrollBarX(element),
    y: y
  };
}

// of the `<html>` and `<body>` rect bounds if horizontally scrollable

function getDocumentRect(element) {
  var _element$ownerDocumen;

  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;

  if (getComputedStyle(body || html).direction === 'rtl') {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }

  return {
    width: width,
    height: height,
    x: x,
    y: y
  };
}

function isScrollParent(element) {
  // Firefox wants us to check `-x` and `-y` variations as well
  var _getComputedStyle = getComputedStyle(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY;

  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

function getScrollParent(node) {
  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
  }

  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }

  return getScrollParent(getParentNode(node));
}

/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/

function listScrollParents(element, list) {
  var _element$ownerDocumen;

  if (list === void 0) {
    list = [];
  }

  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
  updatedList.concat(listScrollParents(getParentNode(target)));
}

function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

function getInnerBoundingClientRect(element) {
  var rect = getBoundingClientRect(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}

function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`


function getClippingParents(element) {
  var clippingParents = listScrollParents(getParentNode(element));
  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

  if (!isElement(clipperElement)) {
    return [];
  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


  return clippingParents.filter(function (clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
  });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents


function getClippingRect(element, boundary, rootBoundary) {
  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents[0];
  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

function getVariation(placement) {
  return placement.split('-')[1];
}

function computeOffsets(_ref) {
  var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference.x + reference.width / 2 - element.width / 2;
  var commonY = reference.y + reference.height / 2 - element.height / 2;
  var offsets;

  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference.y - element.height
      };
      break;

    case bottom:
      offsets = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;

    case right:
      offsets = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;

    case left:
      offsets = {
        x: reference.x - element.width,
        y: commonY
      };
      break;

    default:
      offsets = {
        x: reference.x,
        y: reference.y
      };
  }

  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

  if (mainAxis != null) {
    var len = mainAxis === 'y' ? 'height' : 'width';

    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
        break;

      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
        break;
    }
  }

  return offsets;
}

function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$placement = _options.placement,
      placement = _options$placement === void 0 ? state.placement : _options$placement,
      _options$boundary = _options.boundary,
      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var referenceElement = state.elements.reference;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = getBoundingClientRect(referenceElement);
  var popperOffsets = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: 'absolute',
    placement: placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
  // 0 or negative = within the clipping rect

  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

  if (elementContext === popper && offsetData) {
    var offset = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function (key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
      overflowOffsets[key] += offset[axis] * multiply;
    });
  }

  return overflowOffsets;
}

function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
    return getVariation(placement) === variation;
  }) : basePlacements;
  var allowedPlacements = placements$1.filter(function (placement) {
    return allowedAutoPlacements.indexOf(placement) >= 0;
  });

  if (allowedPlacements.length === 0) {
    allowedPlacements = placements$1;
  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


  var overflows = allowedPlacements.reduce(function (acc, placement) {
    acc[placement] = detectOverflow(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding
    })[getBasePlacement(placement)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function (a, b) {
    return overflows[a] - overflows[b];
  });
}

function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }

  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}

function flip(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;

  if (state.modifiersData[name]._skip) {
    return;
  }

  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      flipVariations: flipVariations,
      allowedAutoPlacements: allowedAutoPlacements
    }) : placement);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements[0];

  for (var i = 0; i < placements.length; i++) {
    var placement = placements[i];

    var _basePlacement = getBasePlacement(placement);

    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? 'width' : 'height';
    var overflow = detectOverflow(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      altBoundary: altBoundary,
      padding: padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }

    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];

    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }

    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }

    if (checks.every(function (check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }

    checksMap.set(placement, checks);
  }

  if (makeFallbackChecks) {
    // `2` may be desired in some cases – research later
    var numberOfChecks = flipVariations ? 3 : 1;

    var _loop = function _loop(_i) {
      var fittingPlacement = placements.find(function (placement) {
        var checks = checksMap.get(placement);

        if (checks) {
          return checks.slice(0, _i).every(function (check) {
            return check;
          });
        }
      });

      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };

    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);

      if (_ret === "break") break;
    }
  }

  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
} // eslint-disable-next-line import/no-unused-modules


var flip$1 = {
  name: 'flip',
  enabled: true,
  phase: 'main',
  fn: flip,
  requiresIfExists: ['offset'],
  data: {
    _skip: false
  }
};

function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }

  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}

function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function (side) {
    return overflow[side] >= 0;
  });
}

function hide(_ref) {
  var state = _ref.state,
      name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: 'reference'
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets: referenceClippingOffsets,
    popperEscapeOffsets: popperEscapeOffsets,
    isReferenceHidden: isReferenceHidden,
    hasPopperEscaped: hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-reference-hidden': isReferenceHidden,
    'data-popper-escaped': hasPopperEscaped
  });
} // eslint-disable-next-line import/no-unused-modules


var hide$1 = {
  name: 'hide',
  enabled: true,
  phase: 'main',
  requiresIfExists: ['preventOverflow'],
  fn: hide
};

function distanceAndSkiddingToXY(placement, rects, offset) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
    placement: placement
  })) : offset,
      skidding = _ref[0],
      distance = _ref[1];

  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}

function offset(_ref2) {
  var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
  var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function (acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y;

  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


var offset$1 = {
  name: 'offset',
  enabled: true,
  phase: 'main',
  requires: ['popperOffsets'],
  fn: offset
};

function popperOffsets(_ref) {
  var state = _ref.state,
      name = _ref.name;
  // Offsets are the actual position the popper needs to have to be
  // properly positioned near its reference element
  // This is the most basic placement, and will be adjusted by
  // the modifiers in the next step
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: 'absolute',
    placement: state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


var popperOffsets$1 = {
  name: 'popperOffsets',
  enabled: true,
  phase: 'read',
  fn: popperOffsets,
  data: {}
};

function getAltAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}

function preventOverflow(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary: boundary,
    rootBoundary: rootBoundary,
    padding: padding,
    altBoundary: altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var data = {
    x: 0,
    y: 0
  };

  if (!popperOffsets) {
    return;
  }

  if (checkMainAxis || checkAltAxis) {
    var mainSide = mainAxis === 'y' ? top : left;
    var altSide = mainAxis === 'y' ? bottom : right;
    var len = mainAxis === 'y' ? 'height' : 'width';
    var offset = popperOffsets[mainAxis];
    var min$1 = popperOffsets[mainAxis] + overflow[mainSide];
    var max$1 = popperOffsets[mainAxis] - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
    // outside the reference bounds

    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
    // to include its full size in the calculation. If the reference is small
    // and near the edge of a boundary, the popper can overflow even if the
    // reference is not overflowing as well (e.g. virtual elements with no
    // width or height)

    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
    var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;

    if (checkMainAxis) {
      var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }

    if (checkAltAxis) {
      var _mainSide = mainAxis === 'x' ? top : left;

      var _altSide = mainAxis === 'x' ? bottom : right;

      var _offset = popperOffsets[altAxis];

      var _min = _offset + overflow[_mainSide];

      var _max = _offset - overflow[_altSide];

      var _preventedOffset = within(tether ? min(_min, tetherMin) : _min, _offset, tether ? max(_max, tetherMax) : _max);

      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


var preventOverflow$1 = {
  name: 'preventOverflow',
  enabled: true,
  phase: 'main',
  fn: preventOverflow,
  requiresIfExists: ['offset']
};

function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// Composite means it takes into account transforms as well as layout.

function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }

  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement);
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };

  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }

    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }

  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function (modifier) {
    map.set(modifier.name, modifier);
  }); // On visiting object, check for its dependencies and visit them recursively

  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function (dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);

        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }

  modifiers.forEach(function (modifier) {
    if (!visited.has(modifier.name)) {
      // check for visited object
      sort(modifier);
    }
  });
  return result;
}

function orderModifiers(modifiers) {
  // order based on dependencies
  var orderedModifiers = order(modifiers); // order based on phase

  return modifierPhases.reduce(function (acc, phase) {
    return acc.concat(orderedModifiers.filter(function (modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

function debounce(fn) {
  var pending;
  return function () {
    if (!pending) {
      pending = new Promise(function (resolve) {
        Promise.resolve().then(function () {
          pending = undefined;
          resolve(fn());
        });
      });
    }

    return pending;
  };
}

function mergeByName(modifiers) {
  var merged = modifiers.reduce(function (merged, current) {
    var existing = merged[current.name];
    merged[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged;
  }, {}); // IE11 does not support Object.values

  return Object.keys(merged).map(function (key) {
    return merged[key];
  });
}

var DEFAULT_OPTIONS = {
  placement: 'bottom',
  modifiers: [],
  strategy: 'absolute'
};

function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return !args.some(function (element) {
    return !(element && typeof element.getBoundingClientRect === 'function');
  });
}

function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }

  var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper(reference, popper, options) {
    if (options === void 0) {
      options = defaultOptions;
    }

    var state = {
      placement: 'bottom',
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference,
        popper: popper
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state: state,
      setOptions: function setOptions(options) {
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options);
        state.scrollParents = {
          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
          popper: listScrollParents(popper)
        }; // Orders the modifiers based on their dependencies and `phase`
        // properties

        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

        state.orderedModifiers = orderedModifiers.filter(function (m) {
          return m.enabled;
        }); // Validate the provided modifiers so that the consumer will get warned

        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }

        var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
        // anymore

        if (!areValidElements(reference, popper)) {

          return;
        } // Store the reference and popper rects to be read by modifiers


        state.rects = {
          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
          popper: getLayoutRect(popper)
        }; // Modifiers have the ability to reset the current update cycle. The
        // most common use case for this is the `flip` modifier changing the
        // placement, which then needs to re-run all the modifiers, because the
        // logic was previously ran for the previous placement and is therefore
        // stale/incorrect

        state.reset = false;
        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
        // is filled with the initial data specified by the modifier. This means
        // it doesn't persist and is fresh on each update.
        // To ensure persistent data, use `${name}#persistent`

        state.orderedModifiers.forEach(function (modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });

        for (var index = 0; index < state.orderedModifiers.length; index++) {

          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }

          var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name;

          if (typeof fn === 'function') {
            state = fn({
              state: state,
              options: _options,
              name: name,
              instance: instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function () {
        return new Promise(function (resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };

    if (!areValidElements(reference, popper)) {

      return instance;
    }

    instance.setOptions(options).then(function (state) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state);
      }
    }); // Modifiers have the ability to execute arbitrary code before the first
    // update cycle runs. They will be executed in the same order as the update
    // cycle. This is useful when a modifier adds some persistent data that
    // other modifiers need to use, but the modifier is run after the dependent
    // one.

    function runModifierEffects() {
      state.orderedModifiers.forEach(function (_ref3) {
        var name = _ref3.name,
            _ref3$options = _ref3.options,
            options = _ref3$options === void 0 ? {} : _ref3$options,
            effect = _ref3.effect;

        if (typeof effect === 'function') {
          var cleanupFn = effect({
            state: state,
            name: name,
            instance: instance,
            options: options
          });

          var noopFn = function noopFn() {};

          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }

    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function (fn) {
        return fn();
      });
      effectCleanupFns = [];
    }

    return instance;
  };
}

var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$2, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
var createPopper = /*#__PURE__*/popperGenerator({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

function useLastValue(value) {
  var lastValue = react.useRef(null);
  useIsomorphicEffect(function () {
    lastValue.current = value;
  }, [value]);
  return lastValue;
}

function useDisclosureState$1(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }

  var _useSealedState = useSealedState(initialState),
      _useSealedState$visib = _useSealedState.visible,
      initialVisible = _useSealedState$visib === void 0 ? false : _useSealedState$visib,
      _useSealedState$anima = _useSealedState.animated,
      initialAnimated = _useSealedState$anima === void 0 ? false : _useSealedState$anima,
      sealed = _objectWithoutPropertiesLoose$3(_useSealedState, ["visible", "animated"]);

  var id = unstable_useIdState(sealed);

  var _React$useState = react.useState(initialVisible),
      visible = _React$useState[0],
      setVisible = _React$useState[1];

  var _React$useState2 = react.useState(initialAnimated),
      animated = _React$useState2[0],
      setAnimated = _React$useState2[1];

  var _React$useState3 = react.useState(false),
      animating = _React$useState3[0],
      setAnimating = _React$useState3[1];

  var lastVisible = useLastValue(visible);
  var visibleHasChanged = lastVisible.current != null && lastVisible.current !== visible;

  if (animated && !animating && visibleHasChanged) {
    // Sets animating to true when when visible is updated
    setAnimating(true);
  }

  react.useEffect(function () {
    if (typeof animated === "number" && animating) {
      var timeout = setTimeout(function () {
        return setAnimating(false);
      }, animated);
      return function () {
        clearTimeout(timeout);
      };
    }

    if (animated && animating && "production" === "development") {
      var _timeout = setTimeout(function () {
      }, 8000);

      return function () {
        clearTimeout(_timeout);
      };
    }

    return function () {};
  }, [animated, animating]);
  var show = react.useCallback(function () {
    return setVisible(true);
  }, []);
  var hide = react.useCallback(function () {
    return setVisible(false);
  }, []);
  var toggle = react.useCallback(function () {
    return setVisible(function (v) {
      return !v;
    });
  }, []);
  var stopAnimation = react.useCallback(function () {
    return setAnimating(false);
  }, []);
  return _objectSpread2$2(_objectSpread2$2({}, id), {}, {
    visible: visible,
    animated: animated,
    animating: animating,
    show: show,
    hide: hide,
    toggle: toggle,
    setVisible: setVisible,
    setAnimated: setAnimated,
    stopAnimation: stopAnimation
  });
}

function useDialogState(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }

  var _useSealedState = useSealedState(initialState),
      _useSealedState$modal = _useSealedState.modal,
      initialModal = _useSealedState$modal === void 0 ? true : _useSealedState$modal,
      sealed = _objectWithoutPropertiesLoose$3(_useSealedState, ["modal"]);

  var disclosure = useDisclosureState$1(sealed);

  var _React$useState = react.useState(initialModal),
      modal = _React$useState[0],
      setModal = _React$useState[1];

  var disclosureRef = react.useRef(null);
  return _objectSpread2$2(_objectSpread2$2({}, disclosure), {}, {
    modal: modal,
    setModal: setModal,
    unstable_disclosureRef: disclosureRef
  });
}

function applyStyles(styles) {
  return function (prevStyles) {
    if (styles && !shallowEqual(prevStyles, styles)) {
      return styles;
    }

    return prevStyles;
  };
}

function usePopoverState$1(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }

  var _useSealedState = useSealedState(initialState),
      _useSealedState$gutte = _useSealedState.gutter,
      gutter = _useSealedState$gutte === void 0 ? 12 : _useSealedState$gutte,
      _useSealedState$place = _useSealedState.placement,
      sealedPlacement = _useSealedState$place === void 0 ? "bottom" : _useSealedState$place,
      _useSealedState$unsta = _useSealedState.unstable_flip,
      flip = _useSealedState$unsta === void 0 ? true : _useSealedState$unsta,
      sealedOffset = _useSealedState.unstable_offset,
      _useSealedState$unsta2 = _useSealedState.unstable_preventOverflow,
      preventOverflow = _useSealedState$unsta2 === void 0 ? true : _useSealedState$unsta2,
      _useSealedState$unsta3 = _useSealedState.unstable_fixed,
      fixed = _useSealedState$unsta3 === void 0 ? false : _useSealedState$unsta3,
      _useSealedState$modal = _useSealedState.modal,
      modal = _useSealedState$modal === void 0 ? false : _useSealedState$modal,
      sealed = _objectWithoutPropertiesLoose$3(_useSealedState, ["gutter", "placement", "unstable_flip", "unstable_offset", "unstable_preventOverflow", "unstable_fixed", "modal"]);

  var popper = react.useRef(null);
  var referenceRef = react.useRef(null);
  var popoverRef = react.useRef(null);
  var arrowRef = react.useRef(null);
  var popperCreated = react.useRef(false);

  var _React$useState = react.useState(sealedPlacement),
      originalPlacement = _React$useState[0],
      place = _React$useState[1];

  var _React$useState2 = react.useState(sealedPlacement),
      placement = _React$useState2[0],
      setPlacement = _React$useState2[1];

  var _React$useState3 = react.useState(sealedOffset || [0, gutter]),
      offset = _React$useState3[0];

  var _React$useState4 = react.useState({}),
      popoverStyles = _React$useState4[0],
      setPopoverStyles = _React$useState4[1];

  var _React$useState5 = react.useState({}),
      arrowStyles = _React$useState5[0],
      setArrowStyles = _React$useState5[1];

  var dialog = useDialogState(_objectSpread2$2({
    modal: modal
  }, sealed));
  var update = react.useCallback(function () {
    if (popper.current) {
      popper.current.forceUpdate();
      return true;
    }

    return false;
  }, []);
  useIsomorphicEffect(function () {
    if (referenceRef.current && popoverRef.current) {
      popper.current = createPopper(referenceRef.current, popoverRef.current, {
        // https://popper.js.org/docs/v2/constructors/#options
        placement: originalPlacement,
        strategy: fixed ? "fixed" : "absolute",
        modifiers: [{
          // https://popper.js.org/docs/v2/modifiers/event-listeners/
          name: "eventListeners",
          enabled: dialog.visible
        }, {
          // https://popper.js.org/docs/v2/modifiers/apply-styles/
          name: "applyStyles",
          enabled: false
        }, {
          // https://popper.js.org/docs/v2/modifiers/flip/
          name: "flip",
          enabled: flip,
          options: {
            padding: 8
          }
        }, {
          // https://popper.js.org/docs/v2/modifiers/offset/
          name: "offset",
          options: {
            offset: offset
          }
        }, {
          // https://popper.js.org/docs/v2/modifiers/prevent-overflow/
          name: "preventOverflow",
          enabled: preventOverflow,
          options: {
            tetherOffset: function tetherOffset() {
              var _arrowRef$current;

              return ((_arrowRef$current = arrowRef.current) === null || _arrowRef$current === void 0 ? void 0 : _arrowRef$current.clientWidth) || 0;
            }
          }
        }, {
          // https://popper.js.org/docs/v2/modifiers/arrow/
          name: "arrow",
          enabled: !!arrowRef.current,
          options: {
            element: arrowRef.current
          }
        }, {
          // https://popper.js.org/docs/v2/modifiers/#custom-modifiers
          name: "updateState",
          phase: "write",
          requires: ["computeStyles"],
          enabled: // Safari needs styles to be applied in the first render
          (!popperCreated.current || dialog.visible) && "production" !== "test",
          fn: function fn(_ref) {
            var state = _ref.state;
            setPlacement(state.placement);
            setPopoverStyles(applyStyles(state.styles.popper));
            setArrowStyles(applyStyles(state.styles.arrow));
          }
        }]
      });
      popperCreated.current = true;
    }

    return function () {
      if (popper.current) {
        popper.current.destroy();
        popper.current = null;
      }
    };
  }, [originalPlacement, fixed, dialog.visible, flip, offset, preventOverflow]); // Ensure that the popover will be correctly positioned with an additional
  // update.

  react.useEffect(function () {
    if (!dialog.visible) return undefined;
    var id = window.requestAnimationFrame(function () {
      var _popper$current;

      (_popper$current = popper.current) === null || _popper$current === void 0 ? void 0 : _popper$current.forceUpdate();
    });
    return function () {
      window.cancelAnimationFrame(id);
    };
  }, [dialog.visible]);
  return _objectSpread2$2(_objectSpread2$2({}, dialog), {}, {
    unstable_referenceRef: referenceRef,
    unstable_popoverRef: popoverRef,
    unstable_arrowRef: arrowRef,
    unstable_popoverStyles: popoverStyles,
    unstable_arrowStyles: arrowStyles,
    unstable_update: update,
    unstable_originalPlacement: originalPlacement,
    placement: placement,
    place: place
  });
}

// Automatically generated
var DISCLOSURE_STATE_KEYS = ["baseId", "unstable_idCountRef", "visible", "animated", "animating", "setBaseId", "show", "hide", "toggle", "setVisible", "setAnimated", "stopAnimation"];
var DISCLOSURE_KEYS = DISCLOSURE_STATE_KEYS;
var DISCLOSURE_CONTENT_KEYS = DISCLOSURE_KEYS;

var useDisclosureContent = createHook$1({
  name: "DisclosureContent",
  compose: useRole,
  keys: DISCLOSURE_CONTENT_KEYS,
  useProps: function useProps(options, _ref) {
    var htmlOnTransitionEnd = _ref.onTransitionEnd,
        htmlOnAnimationEnd = _ref.onAnimationEnd,
        htmlStyle = _ref.style,
        htmlProps = _objectWithoutPropertiesLoose$3(_ref, ["onTransitionEnd", "onAnimationEnd", "style"]);

    var animating = options.animated && options.animating;

    var _React$useState = react.useState(null),
        transition = _React$useState[0],
        setTransition = _React$useState[1];

    var hidden = !options.visible && !animating;
    var style = hidden ? _objectSpread2$2({
      display: "none"
    }, htmlStyle) : htmlStyle;
    var onTransitionEndRef = useLiveRef(htmlOnTransitionEnd);
    var onAnimationEndRef = useLiveRef(htmlOnAnimationEnd);
    var raf = react.useRef(0);
    react.useEffect(function () {
      if (!options.animated) return undefined; // Double RAF is needed so the browser has enough time to paint the
      // default styles before processing the `data-enter` attribute. Otherwise
      // it wouldn't be considered a transition.
      // See https://github.com/reakit/reakit/issues/643

      raf.current = window.requestAnimationFrame(function () {
        raf.current = window.requestAnimationFrame(function () {
          if (options.visible) {
            setTransition("enter");
          } else if (animating) {
            setTransition("leave");
          } else {
            setTransition(null);
          }
        });
      });
      return function () {
        return window.cancelAnimationFrame(raf.current);
      };
    }, [options.animated, options.visible, animating]);
    var onEnd = react.useCallback(function (event) {
      if (!isSelfTarget(event)) return;
      if (!animating) return; // Ignores number animated

      if (options.animated === true) {
        var _options$stopAnimatio;

        (_options$stopAnimatio = options.stopAnimation) === null || _options$stopAnimatio === void 0 ? void 0 : _options$stopAnimatio.call(options);
      }
    }, [options.animated, animating, options.stopAnimation]);
    var onTransitionEnd = react.useCallback(function (event) {
      var _onTransitionEndRef$c;

      (_onTransitionEndRef$c = onTransitionEndRef.current) === null || _onTransitionEndRef$c === void 0 ? void 0 : _onTransitionEndRef$c.call(onTransitionEndRef, event);
      onEnd(event);
    }, [onEnd]);
    var onAnimationEnd = react.useCallback(function (event) {
      var _onAnimationEndRef$cu;

      (_onAnimationEndRef$cu = onAnimationEndRef.current) === null || _onAnimationEndRef$cu === void 0 ? void 0 : _onAnimationEndRef$cu.call(onAnimationEndRef, event);
      onEnd(event);
    }, [onEnd]);
    return _objectSpread2$2({
      id: options.baseId,
      "data-enter": transition === "enter" ? "" : undefined,
      "data-leave": transition === "leave" ? "" : undefined,
      onTransitionEnd: onTransitionEnd,
      onAnimationEnd: onAnimationEnd,
      hidden: hidden,
      style: style
    }, htmlProps);
  }
});
createComponent$1({
  as: "div",
  useHook: useDisclosureContent
});

function getBodyElement() {
  return canUseDOM ? document.body : null;
}

var PortalContext = /*#__PURE__*/react.createContext(getBodyElement());
function Portal$1(_ref) {
  var children = _ref.children;
  // if it's a nested portal, context is the parent portal
  // otherwise it's document.body
  // https://github.com/reakit/reakit/issues/513
  var context = react.useContext(PortalContext) || getBodyElement();

  var _React$useState = react.useState(function () {
    if (canUseDOM) {
      var element = document.createElement("div");
      element.className = Portal$1.__className;
      return element;
    } // ssr


    return null;
  }),
      hostNode = _React$useState[0];

  useIsomorphicEffect(function () {
    if (!hostNode || !context) return undefined;
    context.appendChild(hostNode);
    return function () {
      context.removeChild(hostNode);
    };
  }, [hostNode, context]);

  if (hostNode) {
    return /*#__PURE__*/reactDom.createPortal( /*#__PURE__*/react.createElement(PortalContext.Provider, {
      value: hostNode
    }, children), hostNode);
  } // ssr


  return null;
}
Portal$1.__className = "__reakit-portal";
Portal$1.__selector = "." + Portal$1.__className;

/**
 * Immutably removes an item from an array.
 *
 * @example
 * import { removeItemFromArray } from "reakit-utils";
 *
 * removeItemFromArray(["a", "b", "c"], "b"); // ["a", "c"]
 *
 * // This only works by reference
 * const obj = {};
 * removeItemFromArray([obj], {}); // [obj]
 * removeItemFromArray([obj], obj); // []
 *
 * @returns {Array} A new array without the passed item.
 */

function removeItemFromArray(array, item) {
  var index = array.indexOf(item);
  return removeIndexFromArray(array, index);
}

var MenuContext$1 = /*#__PURE__*/react.createContext(null);
function useMenuContext(menuRef, role, options) {
  var orphan = "unstable_orphan" in options && options.unstable_orphan;
  var parent = react.useContext(MenuContext$1);

  var _React$useState = react.useState([]),
      children = _React$useState[0],
      setChildren = _React$useState[1];

  var _ref = parent || {},
      addChildToParent = _ref.addChild,
      removeChildFromParent = _ref.removeChild;

  var addChild = react.useCallback(function (ref) {
    return setChildren(function (refs) {
      return [].concat(refs, [ref]);
    });
  }, []);
  var removeChild = react.useCallback(function (ref) {
    return setChildren(function (refs) {
      return removeItemFromArray(refs, ref);
    });
  }, []); // If it's a nested menu, add it to parent

  react.useEffect(function () {
    if (!addChildToParent || orphan) return undefined;
    addChildToParent(menuRef);
    return function () {
      removeChildFromParent === null || removeChildFromParent === void 0 ? void 0 : removeChildFromParent(menuRef);
    };
  }, [menuRef, addChildToParent, removeChildFromParent, orphan]);
  var providerValue = react.useMemo(function () {
    return {
      orientation: options.orientation,
      next: options.next,
      previous: options.previous,
      ref: menuRef,
      role: role,
      parent: parent,
      children: children,
      addChild: addChild,
      removeChild: removeChild
    };
  }, [options.orientation, options.next, options.previous, menuRef, role, parent, children, addChild, removeChild]);
  var wrapElement = react.useCallback(function (element) {
    return /*#__PURE__*/react.createElement(MenuContext$1.Provider, {
      value: providerValue
    }, element);
  }, [providerValue]);
  return wrapElement;
}

function _toConsumableArray$1(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

// Older browsers don't support event options, feature detect it.

// Adopted and modified solution from Bohdan Didukh (2017)
// https://stackoverflow.com/questions/41594997/ios-10-safari-prevent-scrolling-behind-a-fixed-overlay-and-maintain-scroll-posi

var hasPassiveEvents = false;
if (typeof window !== 'undefined') {
  var passiveTestOptions = {
    get passive() {
      hasPassiveEvents = true;
      return undefined;
    }
  };
  window.addEventListener('testPassive', null, passiveTestOptions);
  window.removeEventListener('testPassive', null, passiveTestOptions);
}

var isIosDevice = typeof window !== 'undefined' && window.navigator && window.navigator.platform && (/iP(ad|hone|od)/.test(window.navigator.platform) || window.navigator.platform === 'MacIntel' && window.navigator.maxTouchPoints > 1);


var locks = [];
var documentListenerAdded = false;
var initialClientY = -1;
var previousBodyOverflowSetting = void 0;
var previousBodyPaddingRight = void 0;

// returns true if `el` should be allowed to receive touchmove events.
var allowTouchMove = function allowTouchMove(el) {
  return locks.some(function (lock) {
    if (lock.options.allowTouchMove && lock.options.allowTouchMove(el)) {
      return true;
    }

    return false;
  });
};

var preventDefault = function preventDefault(rawEvent) {
  var e = rawEvent || window.event;

  // For the case whereby consumers adds a touchmove event listener to document.
  // Recall that we do document.addEventListener('touchmove', preventDefault, { passive: false })
  // in disableBodyScroll - so if we provide this opportunity to allowTouchMove, then
  // the touchmove event on document will break.
  if (allowTouchMove(e.target)) {
    return true;
  }

  // Do not prevent if the event has more than one touch (usually meaning this is a multi touch gesture like pinch to zoom).
  if (e.touches.length > 1) return true;

  if (e.preventDefault) e.preventDefault();

  return false;
};

var setOverflowHidden = function setOverflowHidden(options) {
  // If previousBodyPaddingRight is already set, don't set it again.
  if (previousBodyPaddingRight === undefined) {
    var _reserveScrollBarGap = !!options && options.reserveScrollBarGap === true;
    var scrollBarGap = window.innerWidth - document.documentElement.clientWidth;

    if (_reserveScrollBarGap && scrollBarGap > 0) {
      previousBodyPaddingRight = document.body.style.paddingRight;
      document.body.style.paddingRight = scrollBarGap + 'px';
    }
  }

  // If previousBodyOverflowSetting is already set, don't set it again.
  if (previousBodyOverflowSetting === undefined) {
    previousBodyOverflowSetting = document.body.style.overflow;
    document.body.style.overflow = 'hidden';
  }
};

var restoreOverflowSetting = function restoreOverflowSetting() {
  if (previousBodyPaddingRight !== undefined) {
    document.body.style.paddingRight = previousBodyPaddingRight;

    // Restore previousBodyPaddingRight to undefined so setOverflowHidden knows it
    // can be set again.
    previousBodyPaddingRight = undefined;
  }

  if (previousBodyOverflowSetting !== undefined) {
    document.body.style.overflow = previousBodyOverflowSetting;

    // Restore previousBodyOverflowSetting to undefined
    // so setOverflowHidden knows it can be set again.
    previousBodyOverflowSetting = undefined;
  }
};

// https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight#Problems_and_solutions
var isTargetElementTotallyScrolled = function isTargetElementTotallyScrolled(targetElement) {
  return targetElement ? targetElement.scrollHeight - targetElement.scrollTop <= targetElement.clientHeight : false;
};

var handleScroll = function handleScroll(event, targetElement) {
  var clientY = event.targetTouches[0].clientY - initialClientY;

  if (allowTouchMove(event.target)) {
    return false;
  }

  if (targetElement && targetElement.scrollTop === 0 && clientY > 0) {
    // element is at the top of its scroll.
    return preventDefault(event);
  }

  if (isTargetElementTotallyScrolled(targetElement) && clientY < 0) {
    // element is at the bottom of its scroll.
    return preventDefault(event);
  }

  event.stopPropagation();
  return true;
};

var disableBodyScroll = function disableBodyScroll(targetElement, options) {
  // targetElement must be provided
  if (!targetElement) {
    // eslint-disable-next-line no-console
    console.error('disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.');
    return;
  }

  // disableBodyScroll must not have been called on this targetElement before
  if (locks.some(function (lock) {
    return lock.targetElement === targetElement;
  })) {
    return;
  }

  var lock = {
    targetElement: targetElement,
    options: options || {}
  };

  locks = [].concat(_toConsumableArray$1(locks), [lock]);

  if (isIosDevice) {
    targetElement.ontouchstart = function (event) {
      if (event.targetTouches.length === 1) {
        // detect single touch.
        initialClientY = event.targetTouches[0].clientY;
      }
    };
    targetElement.ontouchmove = function (event) {
      if (event.targetTouches.length === 1) {
        // detect single touch.
        handleScroll(event, targetElement);
      }
    };

    if (!documentListenerAdded) {
      document.addEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined);
      documentListenerAdded = true;
    }
  } else {
    setOverflowHidden(options);
  }
};

var enableBodyScroll = function enableBodyScroll(targetElement) {
  if (!targetElement) {
    // eslint-disable-next-line no-console
    console.error('enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.');
    return;
  }

  locks = locks.filter(function (lock) {
    return lock.targetElement !== targetElement;
  });

  if (isIosDevice) {
    targetElement.ontouchstart = null;
    targetElement.ontouchmove = null;

    if (documentListenerAdded && locks.length === 0) {
      document.removeEventListener('touchmove', preventDefault, hasPassiveEvents ? { passive: false } : undefined);
      documentListenerAdded = false;
    }
  } else if (!locks.length) {
    restoreOverflowSetting();
  }
};

var DialogBackdropContext = /*#__PURE__*/react.createContext(undefined);

/**
 * Checks whether `arg` is empty or not.
 *
 * @example
 * import { isEmpty } from "reakit-utils";
 *
 * isEmpty([]); // true
 * isEmpty(["a"]); // false
 * isEmpty({}); // true
 * isEmpty({ a: "a" }); // false
 * isEmpty(); // true
 * isEmpty(null); // true
 * isEmpty(undefined); // true
 * isEmpty(""); // true
 */

function isEmpty$1(arg) {
  if (Array.isArray(arg)) return !arg.length;
  if (isObject(arg)) return !Object.keys(arg).length;
  if (arg == null) return true;
  if (arg === "") return true;
  return false;
}

// Automatically generated
var DIALOG_STATE_KEYS = ["baseId", "unstable_idCountRef", "visible", "animated", "animating", "setBaseId", "show", "hide", "toggle", "setVisible", "setAnimated", "stopAnimation", "modal", "unstable_disclosureRef", "setModal"];
var DIALOG_KEYS = [].concat(DIALOG_STATE_KEYS, ["hideOnEsc", "hideOnClickOutside", "preventBodyScroll", "unstable_initialFocusRef", "unstable_finalFocusRef", "unstable_orphan", "unstable_autoFocusOnShow", "unstable_autoFocusOnHide"]);
var DIALOG_BACKDROP_KEYS = DIALOG_STATE_KEYS;
var DIALOG_DISCLOSURE_KEYS = DIALOG_BACKDROP_KEYS;

function useDisclosureRef(dialogRef, options) {
  var ref = react.useRef(null);
  var animating = !!(options.animated && options.animating);
  react.useEffect(function () {
    if (options.visible || animating) return undefined; // We get the last focused element before the dialog opens, so we can move
    // focus back to it when the dialog closes.

    var onFocus = function onFocus(event) {
      var target = event.target;

      if ("focus" in target) {
        ref.current = target;

        if (options.unstable_disclosureRef) {
          options.unstable_disclosureRef.current = target;
        }
      }
    };

    var document = getDocument(dialogRef.current);
    document.addEventListener("focusin", onFocus);
    return function () {
      return document.removeEventListener("focusin", onFocus);
    };
  }, [options.visible, animating, options.unstable_disclosureRef, dialogRef]);
  react.useEffect(function () {
    var _options$unstable_dis;

    if (!options.visible || animating) return undefined; // Safari and Firefox on MacOS don't focus on buttons on mouse down.
    // Instead, they focus on the closest focusable parent (ultimately, the
    // body element). This works around that by preventing that behavior and
    // forcing focus on the disclosure button. Otherwise, we wouldn't be able
    // to close the dialog by clicking again on the disclosure.

    var onMouseDown = function onMouseDown(event) {
      var element = event.currentTarget;
      if (!isButton(element)) return;
      event.preventDefault();
      element.focus();
    };

    var disclosure = ((_options$unstable_dis = options.unstable_disclosureRef) === null || _options$unstable_dis === void 0 ? void 0 : _options$unstable_dis.current) || ref.current;
    disclosure === null || disclosure === void 0 ? void 0 : disclosure.addEventListener("mousedown", onMouseDown);
    return function () {
      return disclosure === null || disclosure === void 0 ? void 0 : disclosure.removeEventListener("mousedown", onMouseDown);
    };
  }, [options.visible, animating, options.unstable_disclosureRef]);
  return options.unstable_disclosureRef || ref;
}

function usePreventBodyScroll(targetRef, options) {
  var shouldPrevent = Boolean(options.preventBodyScroll && options.visible);
  react.useEffect(function () {
    var element = targetRef.current;
    if (!element || !shouldPrevent) return undefined;
    disableBodyScroll(element, {
      reserveScrollBarGap: true
    });
    return function () {
      return enableBodyScroll(element);
    };
  }, [targetRef, shouldPrevent]);
}

function useFocusOnShow(dialogRef, nestedDialogs, options) {
  var initialFocusRef = options.unstable_initialFocusRef;
  var shouldFocus = options.visible && options.unstable_autoFocusOnShow;
  var animating = !!(options.animated && options.animating);
  useUpdateEffect(function () {
    var dialog = dialogRef.current;
    if (!shouldFocus) return;
    if (!dialog) return;
    if (animating) return; // If there're nested open dialogs, let them handle focus

    if (nestedDialogs.some(function (child) {
      return child.current && !child.current.hidden;
    })) {
      return;
    }

    if (initialFocusRef === null || initialFocusRef === void 0 ? void 0 : initialFocusRef.current) {
      initialFocusRef.current.focus({
        preventScroll: true
      });
    } else {
      var tabbable = getFirstTabbableIn(dialog, true);

      var isActive = function isActive() {
        return hasFocusWithin(dialog);
      };

      if (tabbable) {
        ensureFocus(tabbable, {
          preventScroll: true,
          isActive: isActive
        });
      } else {
        ensureFocus(dialog, {
          preventScroll: true,
          isActive: isActive
        });
      }
    }
  }, [dialogRef, shouldFocus, animating, nestedDialogs, initialFocusRef]);
}

function usePortalRef(dialogRef, options) {
  var portalRef = react.useRef(null);
  react.useEffect(function () {
    var dialog = dialogRef.current;
    if (!dialog || !options.visible) return;
    portalRef.current = closest(dialog, Portal$1.__selector);
  }, [dialogRef, options.visible]);
  return portalRef;
}

function removeFromDOM(element) {
  if (element.parentNode == null) return;
  element.parentNode.removeChild(element);
}

var focusTrapClassName = "__reakit-focus-trap";
function isFocusTrap(element) {
  var _element$classList;

  return (_element$classList = element.classList) === null || _element$classList === void 0 ? void 0 : _element$classList.contains(focusTrapClassName);
}
function useFocusTrap(dialogRef, visibleModals, options) {
  var portalRef = usePortalRef(dialogRef, options);
  var shouldTrap = options.visible && options.modal;
  var beforeElement = react.useRef(null);
  var afterElement = react.useRef(null); // Create before and after elements
  // https://github.com/w3c/aria-practices/issues/545

  react.useEffect(function () {
    if (!shouldTrap) return undefined;
    var portal = portalRef.current;

    if (!portal) {
      return undefined;
    }

    if (!beforeElement.current) {
      var document = getDocument(portal);
      beforeElement.current = document.createElement("div");
      beforeElement.current.className = focusTrapClassName;
      beforeElement.current.tabIndex = 0;
      beforeElement.current.style.position = "fixed";
      beforeElement.current.setAttribute("aria-hidden", "true");
    }

    if (!afterElement.current) {
      afterElement.current = beforeElement.current.cloneNode();
    }

    portal.insertAdjacentElement("beforebegin", beforeElement.current);
    portal.insertAdjacentElement("afterend", afterElement.current);
    return function () {
      if (beforeElement.current) removeFromDOM(beforeElement.current);
      if (afterElement.current) removeFromDOM(afterElement.current);
    };
  }, [portalRef, shouldTrap]); // Focus trap

  react.useEffect(function () {
    var before = beforeElement.current;
    var after = afterElement.current;
    if (!shouldTrap || !before || !after) return undefined;

    var handleFocus = function handleFocus(event) {
      var dialog = dialogRef.current;
      if (!dialog || visibleModals.length) return;
      event.preventDefault();
      var isAfter = event.target === after;
      var tabbable = isAfter ? getFirstTabbableIn(dialog) : getLastTabbableIn(dialog);

      if (tabbable) {
        tabbable.focus();
      } else {
        // fallback to dialog
        dialog.focus();
      }
    };

    before.addEventListener("focus", handleFocus);
    after.addEventListener("focus", handleFocus);
    return function () {
      before.removeEventListener("focus", handleFocus);
      after.removeEventListener("focus", handleFocus);
    };
  }, [dialogRef, visibleModals, shouldTrap]);
}

function hidByFocusingAnotherElement(dialogRef) {
  var dialog = dialogRef.current;
  if (!dialog) return false;
  var activeElement = getActiveElement(dialog);
  if (!activeElement) return false;
  if (contains$1(dialog, activeElement)) return false;
  if (isTabbable(activeElement)) return true;
  if (activeElement.getAttribute("data-dialog") === "true") return true;
  return false;
}

function useFocusOnHide(dialogRef, disclosureRef, options) {
  var shouldFocus = options.unstable_autoFocusOnHide && !options.visible;
  var animating = !!(options.animated && options.animating);
  useUpdateEffect(function () {
    var _options$unstable_fin;

    if (!shouldFocus) return;
    if (animating) return; // Hide was triggered by a click/focus on a tabbable element outside
    // the dialog or on another dialog. We won't change focus then.

    if (hidByFocusingAnotherElement(dialogRef)) {
      return;
    }

    var finalFocusEl = ((_options$unstable_fin = options.unstable_finalFocusRef) === null || _options$unstable_fin === void 0 ? void 0 : _options$unstable_fin.current) || disclosureRef.current;

    if (finalFocusEl) {
      if (finalFocusEl.id) {
        var document = getDocument(finalFocusEl);
        var compositeElement = document.querySelector("[aria-activedescendant=" + finalFocusEl.id + "]");

        if (compositeElement) {
          ensureFocus(compositeElement);
          return;
        }
      }

      ensureFocus(finalFocusEl);
      return;
    }
  }, [shouldFocus, animating, dialogRef, disclosureRef]);
}

var DialogContext$1 = /*#__PURE__*/react.createContext({});
function useNestedDialogs(dialogRef, options) {
  var context = react.useContext(DialogContext$1);

  var _React$useState = react.useState([]),
      dialogs = _React$useState[0],
      setDialogs = _React$useState[1];

  var _React$useState2 = react.useState(dialogs),
      visibleModals = _React$useState2[0],
      setVisibleModals = _React$useState2[1];

  var addDialog = react.useCallback(function (ref) {
    var _context$addDialog;

    (_context$addDialog = context.addDialog) === null || _context$addDialog === void 0 ? void 0 : _context$addDialog.call(context, ref);
    setDialogs(function (prevDialogs) {
      return [].concat(prevDialogs, [ref]);
    });
  }, [context.addDialog]);
  var removeDialog = react.useCallback(function (ref) {
    var _context$removeDialog;

    (_context$removeDialog = context.removeDialog) === null || _context$removeDialog === void 0 ? void 0 : _context$removeDialog.call(context, ref);
    setDialogs(function (prevDialogs) {
      return removeItemFromArray(prevDialogs, ref);
    });
  }, [context.removeDialog]);
  var showDialog = react.useCallback(function (ref) {
    var _context$showDialog;

    (_context$showDialog = context.showDialog) === null || _context$showDialog === void 0 ? void 0 : _context$showDialog.call(context, ref);
    setVisibleModals(function (prevDialogs) {
      return [].concat(prevDialogs, [ref]);
    });
  }, [context.showDialog]);
  var hideDialog = react.useCallback(function (ref) {
    var _context$hideDialog;

    (_context$hideDialog = context.hideDialog) === null || _context$hideDialog === void 0 ? void 0 : _context$hideDialog.call(context, ref);
    setVisibleModals(function (prevDialogs) {
      return removeItemFromArray(prevDialogs, ref);
    });
  }, [context.hideDialog]); // If it's a nested dialog, add it to context

  react.useEffect(function () {
    var _context$addDialog2;

    if (options.unstable_orphan) return undefined;
    (_context$addDialog2 = context.addDialog) === null || _context$addDialog2 === void 0 ? void 0 : _context$addDialog2.call(context, dialogRef);
    return function () {
      var _context$removeDialog2;

      (_context$removeDialog2 = context.removeDialog) === null || _context$removeDialog2 === void 0 ? void 0 : _context$removeDialog2.call(context, dialogRef);
    };
  }, [options.unstable_orphan, context.addDialog, dialogRef, context.removeDialog]);
  react.useEffect(function () {
    var _context$showDialog2;

    if (options.unstable_orphan) return undefined;
    if (!options.modal) return undefined;
    if (!options.visible) return undefined;
    (_context$showDialog2 = context.showDialog) === null || _context$showDialog2 === void 0 ? void 0 : _context$showDialog2.call(context, dialogRef);
    return function () {
      var _context$hideDialog2;

      (_context$hideDialog2 = context.hideDialog) === null || _context$hideDialog2 === void 0 ? void 0 : _context$hideDialog2.call(context, dialogRef);
    };
  }, [options.unstable_orphan, options.modal, options.visible, context.showDialog, dialogRef, context.hideDialog]); // Close all nested dialogs when parent dialog closes

  react.useEffect(function () {
    if (context.visible === false && options.visible && !options.unstable_orphan) {
      var _options$hide;

      (_options$hide = options.hide) === null || _options$hide === void 0 ? void 0 : _options$hide.call(options);
    }
  }, [context.visible, options.visible, options.hide, options.unstable_orphan]); // Provider

  var providerValue = react.useMemo(function () {
    return {
      visible: options.visible,
      addDialog: addDialog,
      removeDialog: removeDialog,
      showDialog: showDialog,
      hideDialog: hideDialog
    };
  }, [options.visible, addDialog, removeDialog, showDialog, hideDialog]);
  var wrap = react.useCallback(function (element) {
    return /*#__PURE__*/react.createElement(DialogContext$1.Provider, {
      value: providerValue
    }, element);
  }, [providerValue]);
  return {
    dialogs: dialogs,
    visibleModals: visibleModals,
    wrap: wrap
  };
}

function dialogContains(target) {
  return function (dialogRef) {
    var dialog = dialogRef.current;
    if (!dialog) return false;
    if (contains$1(dialog, target)) return true;
    var document = getDocument(dialog);
    var backdrop = document.querySelector("[data-dialog-ref=\"" + dialog.id + "\"]");

    if (backdrop) {
      return contains$1(backdrop, target);
    }

    return false;
  };
}

function isDisclosure(target, disclosure) {
  return contains$1(disclosure, target);
}

function isInDocument(target) {
  var document = getDocument(target);

  if (target.tagName === "HTML") {
    return true;
  }

  return contains$1(document.body, target);
}

function useEventListenerOutside(containerRef, disclosureRef, nestedDialogs, eventType, listener, shouldListen, capture) {
  var listenerRef = useLiveRef(listener);
  react.useEffect(function () {
    if (!shouldListen) return undefined;

    var onEvent = function onEvent(event) {
      if (!listenerRef.current) return;
      var container = containerRef.current;
      var disclosure = disclosureRef.current;
      var target = event.target;

      if (!container) {
        return;
      } // When an element is unmounted right after it receives focus, the focus
      // event is triggered after that, when the element isn't part of the
      // current document anymore. So we ignore it.


      if (!isInDocument(target)) return; // Event inside dialog

      if (contains$1(container, target)) return; // Event on disclosure

      if (disclosure && isDisclosure(target, disclosure)) return; // Event inside a nested dialog or focus trap

      if (isFocusTrap(target) || nestedDialogs.some(dialogContains(target))) {
        return;
      }

      listenerRef.current(event);
    };

    var document = getDocument(containerRef.current);
    document.addEventListener(eventType, onEvent, capture);
    return function () {
      return document.removeEventListener(eventType, onEvent, capture);
    };
  }, [containerRef, disclosureRef, nestedDialogs, eventType, shouldListen, listenerRef]);
}

function useMouseDownRef(dialogRef, options) {
  var mouseDownRef = react.useRef();
  react.useEffect(function () {
    if (!options.visible) return undefined;
    if (!options.hideOnClickOutside) return undefined;
    var document = getDocument(dialogRef.current);

    var onMouseDown = function onMouseDown(event) {
      mouseDownRef.current = event.target;
    };

    document.addEventListener("mousedown", onMouseDown);
    return function () {
      return document.removeEventListener("mousedown", onMouseDown);
    };
  }, [options.visible, options.hideOnClickOutside, dialogRef]);
  return mouseDownRef;
}

function useHideOnClickOutside(dialogRef, disclosureRef, nestedDialogs, options) {
  var mouseDownRef = useMouseDownRef(dialogRef, options);
  useEventListenerOutside(dialogRef, disclosureRef, nestedDialogs, "click", function (event) {
    // Make sure the element that has been clicked is the same that last
    // triggered the mousedown event. This prevents the dialog from closing
    // by dragging the cursor (for example, selecting some text inside the
    // dialog and releasing the mouse outside of it).
    if (mouseDownRef.current === event.target) {
      var _options$hide;

      (_options$hide = options.hide) === null || _options$hide === void 0 ? void 0 : _options$hide.call(options);
    }
  }, options.visible && options.hideOnClickOutside);
  useEventListenerOutside(dialogRef, disclosureRef, nestedDialogs, "focusin", function (event) {
    var document = getDocument(dialogRef.current); // Fix for https://github.com/reakit/reakit/issues/619
    // On IE11, calling element.blur() triggers the focus event on
    // document.body, so we make sure to ignore it as well.

    if (event.target !== document && event.target !== document.body) {
      var _options$hide2;

      (_options$hide2 = options.hide) === null || _options$hide2 === void 0 ? void 0 : _options$hide2.call(options);
    }
  }, options.visible && options.hideOnClickOutside);
}

function useDisableHoverOutside(portalRef, nestedDialogs, options) {
  var useEvent = function useEvent(eventType) {
    return useEventListenerOutside(portalRef, {
      current: null
    }, nestedDialogs, eventType, function (event) {
      event.stopPropagation();
      event.preventDefault();
    }, options.visible && options.modal, true);
  };

  useEvent("mouseover");
  useEvent("mousemove");
  useEvent("mouseout");
}

/**
 * When the focused child gets removed from the DOM, we make sure to move focus
 * to the dialog.
 */
function useFocusOnChildUnmount(dialogRef, options) {
  react.useEffect(function () {
    var dialog = dialogRef.current;
    if (!options.visible || !dialog) return undefined;
    var observer = new MutationObserver(function (mutations) {
      var target = mutations[0].target; // If target is not this dialog, then this observer was triggered by a
      // nested dialog, so we just ignore it here and let the nested dialog
      // handle it there.

      if (target !== dialog) return;
      var document = getDocument(dialog);
      var activeElement = getActiveElement(dialog); // We can check if the current focused element is the document body. On
      // IE 11, it's an empty object when the current document is in a frame or
      // iframe.

      if (activeElement === document.body || isEmpty$1(activeElement)) {
        dialog.focus();
      }
    });
    observer.observe(dialog, {
      childList: true,
      subtree: true
    });
    return function () {
      observer.disconnect();
    };
  }, [options.visible, dialogRef]);
}

function isActualElement(element) {
  return element && element.tagName && element.tagName !== "HTML" && element !== getDocument(element).body;
}

function useFocusOnBlur(dialogRef, options) {
  var _React$useReducer = react.useReducer(function (n) {
    return n + 1;
  }, 0),
      blurred = _React$useReducer[0],
      scheduleFocus = _React$useReducer[1];

  useIsomorphicEffect(function () {
    var dialog = dialogRef.current;
    if (!options.visible) return;
    if (!blurred) return; // After blur, if the active element isn't an actual element, this probably
    // means that element.blur() was called on an element inside the dialog.
    // In this case, the browser will automatically focus the body element.
    // So we move focus back to the dialog.

    if (!isActualElement(getActiveElement(dialog))) {
      dialog === null || dialog === void 0 ? void 0 : dialog.focus();
    }
  }, [blurred, dialogRef]);
  var onBlur = react.useCallback(function (event) {
    if (!options.visible) return;
    var nextActiveElement = getNextActiveElementOnBlur(event);

    if (!isActualElement(nextActiveElement)) {
      scheduleFocus();
    }
  }, [options.visible]);
  return onBlur;
}

var useDialog = createHook$1({
  name: "Dialog",
  compose: useDisclosureContent,
  keys: DIALOG_KEYS,
  useOptions: function useOptions(_ref) {
    var _ref$modal = _ref.modal,
        modal = _ref$modal === void 0 ? true : _ref$modal,
        _ref$hideOnEsc = _ref.hideOnEsc,
        hideOnEsc = _ref$hideOnEsc === void 0 ? true : _ref$hideOnEsc,
        _ref$hideOnClickOutsi = _ref.hideOnClickOutside,
        hideOnClickOutside = _ref$hideOnClickOutsi === void 0 ? true : _ref$hideOnClickOutsi,
        _ref$preventBodyScrol = _ref.preventBodyScroll,
        preventBodyScroll = _ref$preventBodyScrol === void 0 ? modal : _ref$preventBodyScrol,
        _ref$unstable_autoFoc = _ref.unstable_autoFocusOnShow,
        unstable_autoFocusOnShow = _ref$unstable_autoFoc === void 0 ? true : _ref$unstable_autoFoc,
        _ref$unstable_autoFoc2 = _ref.unstable_autoFocusOnHide,
        unstable_autoFocusOnHide = _ref$unstable_autoFoc2 === void 0 ? true : _ref$unstable_autoFoc2,
        unstable_orphan = _ref.unstable_orphan,
        options = _objectWithoutPropertiesLoose$3(_ref, ["modal", "hideOnEsc", "hideOnClickOutside", "preventBodyScroll", "unstable_autoFocusOnShow", "unstable_autoFocusOnHide", "unstable_orphan"]);

    return _objectSpread2$2({
      modal: modal,
      hideOnEsc: hideOnEsc,
      hideOnClickOutside: hideOnClickOutside,
      preventBodyScroll: modal && preventBodyScroll,
      unstable_autoFocusOnShow: unstable_autoFocusOnShow,
      unstable_autoFocusOnHide: unstable_autoFocusOnHide,
      unstable_orphan: modal && unstable_orphan
    }, options);
  },
  useProps: function useProps(options, _ref2) {
    var htmlRef = _ref2.ref,
        htmlOnKeyDown = _ref2.onKeyDown,
        htmlOnBlur = _ref2.onBlur,
        htmlWrapElement = _ref2.wrapElement,
        tabIndex = _ref2.tabIndex,
        htmlProps = _objectWithoutPropertiesLoose$3(_ref2, ["ref", "onKeyDown", "onBlur", "wrapElement", "tabIndex"]);

    var dialog = react.useRef(null);
    var backdrop = react.useContext(DialogBackdropContext);
    var hasBackdrop = backdrop && backdrop === options.baseId;
    var disclosure = useDisclosureRef(dialog, options);
    var onKeyDownRef = useLiveRef(htmlOnKeyDown);
    var onBlurRef = useLiveRef(htmlOnBlur);
    var focusOnBlur = useFocusOnBlur(dialog, options);

    var _useNestedDialogs = useNestedDialogs(dialog, options),
        dialogs = _useNestedDialogs.dialogs,
        visibleModals = _useNestedDialogs.visibleModals,
        wrap = _useNestedDialogs.wrap; // VoiceOver/Safari accepts only one `aria-modal` container, so if there
    // are visible child modals, then we don't want to set aria-modal on the
    // parent modal (this component).


    var modal = options.modal && !visibleModals.length ? true : undefined;
    usePreventBodyScroll(dialog, options);
    useFocusTrap(dialog, visibleModals, options);
    useFocusOnChildUnmount(dialog, options);
    useFocusOnShow(dialog, dialogs, options);
    useFocusOnHide(dialog, disclosure, options);
    useHideOnClickOutside(dialog, disclosure, dialogs, options);
    useDisableHoverOutside(dialog, dialogs, options);
    var onKeyDown = react.useCallback(function (event) {
      var _onKeyDownRef$current;

      (_onKeyDownRef$current = onKeyDownRef.current) === null || _onKeyDownRef$current === void 0 ? void 0 : _onKeyDownRef$current.call(onKeyDownRef, event);
      if (event.defaultPrevented) return;
      if (event.key !== "Escape") return;
      if (!options.hideOnEsc) return;

      if (!options.hide) {
        return;
      }

      event.stopPropagation();
      options.hide();
    }, [options.hideOnEsc, options.hide]);
    var onBlur = react.useCallback(function (event) {
      var _onBlurRef$current;

      (_onBlurRef$current = onBlurRef.current) === null || _onBlurRef$current === void 0 ? void 0 : _onBlurRef$current.call(onBlurRef, event);
      focusOnBlur(event);
    }, [focusOnBlur]);
    var wrapElement = react.useCallback(function (element) {
      element = wrap(element);

      if (options.modal && !hasBackdrop) {
        element = /*#__PURE__*/react.createElement(Portal$1, null, element);
      }

      if (htmlWrapElement) {
        element = htmlWrapElement(element);
      }

      return (
        /*#__PURE__*/
        // Prevents Menu > Dialog > Menu to behave as a sub menu
        react.createElement(MenuContext$1.Provider, {
          value: null
        }, element)
      );
    }, [wrap, options.modal, hasBackdrop, htmlWrapElement]);
    return _objectSpread2$2({
      ref: useForkRef(dialog, htmlRef),
      role: "dialog",
      tabIndex: tabIndex != null ? tabIndex : -1,
      "aria-modal": modal,
      "data-dialog": true,
      onKeyDown: onKeyDown,
      onBlur: onBlur,
      wrapElement: wrapElement
    }, htmlProps);
  }
});
createComponent$1({
  as: "div",
  useHook: useDialog,
  useCreateElement: function useCreateElement$1(type, props, children) {
    return useCreateElement(type, props, children);
  }
});

// Automatically generated
var POPOVER_STATE_KEYS = ["baseId", "unstable_idCountRef", "visible", "animated", "animating", "setBaseId", "show", "hide", "toggle", "setVisible", "setAnimated", "stopAnimation", "modal", "unstable_disclosureRef", "setModal", "unstable_referenceRef", "unstable_popoverRef", "unstable_arrowRef", "unstable_popoverStyles", "unstable_arrowStyles", "unstable_originalPlacement", "unstable_update", "placement", "place"];
var POPOVER_KEYS = POPOVER_STATE_KEYS;
var POPOVER_ARROW_KEYS = [].concat(POPOVER_KEYS, ["size"]);
var POPOVER_BACKDROP_KEYS = POPOVER_KEYS;
var POPOVER_DISCLOSURE_KEYS = POPOVER_BACKDROP_KEYS;

var usePopover = createHook$1({
  name: "Popover",
  compose: useDialog,
  keys: POPOVER_KEYS,
  useOptions: function useOptions(_ref) {
    var _ref$modal = _ref.modal,
        modal = _ref$modal === void 0 ? false : _ref$modal,
        options = _objectWithoutPropertiesLoose$3(_ref, ["modal"]);

    return _objectSpread2$2({
      modal: modal
    }, options);
  },
  useProps: function useProps(options, _ref2) {
    var htmlRef = _ref2.ref,
        htmlStyle = _ref2.style,
        htmlProps = _objectWithoutPropertiesLoose$3(_ref2, ["ref", "style"]);

    return _objectSpread2$2({
      ref: useForkRef(options.unstable_popoverRef, htmlRef),
      style: _objectSpread2$2(_objectSpread2$2({}, options.unstable_popoverStyles), htmlStyle)
    }, htmlProps);
  }
});
createComponent$1({
  as: "div",
  useHook: usePopover,
  useCreateElement: function useCreateElement$1(type, props, children) {
    return useCreateElement(type, props, children);
  }
});

var useDialogBackdrop = createHook$1({
  name: "DialogBackdrop",
  compose: useDisclosureContent,
  keys: DIALOG_BACKDROP_KEYS,
  useOptions: function useOptions(_ref) {
    var _ref$modal = _ref.modal,
        modal = _ref$modal === void 0 ? true : _ref$modal,
        options = _objectWithoutPropertiesLoose$3(_ref, ["modal"]);

    return _objectSpread2$2({
      modal: modal
    }, options);
  },
  useProps: function useProps(options, _ref2) {
    var htmlWrapElement = _ref2.wrapElement,
        htmlProps = _objectWithoutPropertiesLoose$3(_ref2, ["wrapElement"]);

    var wrapElement = react.useCallback(function (element) {
      if (options.modal) {
        element = /*#__PURE__*/react.createElement(Portal$1, null, /*#__PURE__*/react.createElement(DialogBackdropContext.Provider, {
          value: options.baseId
        }, element));
      }

      if (htmlWrapElement) {
        return htmlWrapElement(element);
      }

      return element;
    }, [options.modal, htmlWrapElement]);
    return _objectSpread2$2({
      id: undefined,
      "data-dialog-ref": options.baseId,
      wrapElement: wrapElement
    }, htmlProps);
  }
});
createComponent$1({
  as: "div",
  memo: true,
  useHook: useDialogBackdrop
});

var useDisclosure = createHook$1({
  name: "Disclosure",
  compose: useButton,
  keys: DISCLOSURE_KEYS,
  useProps: function useProps(options, _ref) {
    var htmlOnClick = _ref.onClick,
        ariaControls = _ref["aria-controls"],
        htmlProps = _objectWithoutPropertiesLoose$3(_ref, ["onClick", "aria-controls"]);

    var onClickRef = useLiveRef(htmlOnClick);
    var controls = ariaControls ? ariaControls + " " + options.baseId : options.baseId;
    var onClick = react.useCallback(function (event) {
      var _onClickRef$current, _options$toggle;

      (_onClickRef$current = onClickRef.current) === null || _onClickRef$current === void 0 ? void 0 : _onClickRef$current.call(onClickRef, event);
      if (event.defaultPrevented) return;
      (_options$toggle = options.toggle) === null || _options$toggle === void 0 ? void 0 : _options$toggle.call(options);
    }, [options.toggle]);
    return _objectSpread2$2({
      "aria-expanded": !!options.visible,
      "aria-controls": controls,
      onClick: onClick
    }, htmlProps);
  }
});
createComponent$1({
  as: "button",
  memo: true,
  useHook: useDisclosure
});

var useDialogDisclosure = createHook$1({
  name: "DialogDisclosure",
  compose: useDisclosure,
  keys: DIALOG_DISCLOSURE_KEYS,
  useProps: function useProps(options, _ref) {
    var htmlRef = _ref.ref,
        htmlOnClick = _ref.onClick,
        htmlProps = _objectWithoutPropertiesLoose$3(_ref, ["ref", "onClick"]);

    var ref = react.useRef(null);
    var onClickRef = useLiveRef(htmlOnClick);

    var _React$useState = react.useState(false),
        expanded = _React$useState[0],
        setExpanded = _React$useState[1];

    var disclosureRef = options.unstable_disclosureRef; // aria-expanded may be used for styling purposes, so we useLayoutEffect

    useIsomorphicEffect(function () {
      var element = ref.current;

      if (disclosureRef && !disclosureRef.current) {
        disclosureRef.current = element;
      }

      var isCurrentDisclosure = !(disclosureRef === null || disclosureRef === void 0 ? void 0 : disclosureRef.current) || disclosureRef.current === element;
      setExpanded(!!options.visible && isCurrentDisclosure);
    }, [options.visible, disclosureRef]);
    var onClick = react.useCallback(function (event) {
      var _onClickRef$current;

      (_onClickRef$current = onClickRef.current) === null || _onClickRef$current === void 0 ? void 0 : _onClickRef$current.call(onClickRef, event);
      if (event.defaultPrevented) return;

      if (disclosureRef) {
        disclosureRef.current = event.currentTarget;
      }
    }, [disclosureRef]);
    return _objectSpread2$2({
      ref: useForkRef(ref, htmlRef),
      "aria-haspopup": "dialog",
      "aria-expanded": expanded,
      onClick: onClick
    }, htmlProps);
  }
});
createComponent$1({
  as: "button",
  memo: true,
  useHook: useDialogDisclosure
});

// Automatically generated
var MENU_BAR_STATE_KEYS = ["baseId", "unstable_idCountRef", "unstable_virtual", "rtl", "orientation", "items", "groups", "currentId", "loop", "wrap", "shift", "unstable_moves", "unstable_hasActiveWidget", "unstable_includesBaseElement", "unstable_values", "setBaseId", "registerItem", "unregisterItem", "registerGroup", "unregisterGroup", "move", "next", "previous", "up", "down", "first", "last", "sort", "unstable_setVirtual", "setRTL", "setOrientation", "setCurrentId", "setLoop", "setWrap", "setShift", "reset", "unstable_setIncludesBaseElement", "unstable_setHasActiveWidget", "unstable_setValue"];
var MENU_STATE_KEYS = [].concat(MENU_BAR_STATE_KEYS, ["visible", "animated", "animating", "show", "hide", "toggle", "setVisible", "setAnimated", "stopAnimation", "modal", "unstable_disclosureRef", "setModal", "unstable_referenceRef", "unstable_popoverRef", "unstable_arrowRef", "unstable_popoverStyles", "unstable_arrowStyles", "unstable_originalPlacement", "unstable_update", "placement", "place"]);
var MENU_KEYS = MENU_STATE_KEYS;
var MENU_ARROW_KEYS = MENU_KEYS;
var MENU_BAR_KEYS = MENU_ARROW_KEYS;
var MENU_BUTTON_KEYS = MENU_BAR_KEYS;
var MENU_DISCLOSURE_KEYS = MENU_BUTTON_KEYS;
var MENU_GROUP_KEYS = MENU_DISCLOSURE_KEYS;
var MENU_ITEM_KEYS = MENU_GROUP_KEYS;
var MENU_SEPARATOR_KEYS = MENU_ITEM_KEYS;

function useShortcuts(menuRef, _ref, timeout) {
  var items = _ref.items,
      move = _ref.move;

  if (timeout === void 0) {
    timeout = 500;
  }

  var _React$useState = react.useState(""),
      keys = _React$useState[0],
      setKeys = _React$useState[1];

  react.useEffect(function () {
    if (!keys) return undefined;
    var timeoutId = setTimeout(function () {
      return setKeys("");
    }, timeout);
    var stop = items.find(function (s) {
      return Boolean(s.ref.current && s.ref.current.textContent && s.ref.current.textContent.toLowerCase().startsWith(keys));
    });

    if (stop) {
      move(stop.id);
    }

    return function () {
      return clearTimeout(timeoutId);
    };
  }, [keys, items, move, timeout]);
  react.useEffect(function () {
    var menu = menuRef.current;
    if (!menu) return undefined;

    var onKeyDown = function onKeyDown(event) {
      var _target$getAttribute;

      if (event.key.length > 1) return;
      if (event.shiftKey) return;
      if (event.metaKey) return;
      if (event.ctrlKey) return;
      if (event.altKey) return;
      var target = event.target;
      var role = (_target$getAttribute = target.getAttribute) === null || _target$getAttribute === void 0 ? void 0 : _target$getAttribute.call(target, "role");
      var targetIsMenu = target === menu;
      var targetIsMenuItem = role && role.indexOf("menuitem") !== -1 && closest(target, "[role=menu],[role=menubar]") === menu;
      if (!targetIsMenu && !targetIsMenuItem) return;

      if (/^[a-z0-9_-]$/i.test(event.key)) {
        event.stopPropagation();
        event.preventDefault();
        setKeys(function (k) {
          return "" + k + event.key;
        });
      }
    }; // https://github.com/facebook/react/issues/11387#issuecomment-524113945


    menu.addEventListener("keydown", onKeyDown);
    return function () {
      return menu.removeEventListener("keydown", onKeyDown);
    };
  }, [menuRef, setKeys]);
}

var useMenuBar = createHook$1({
  name: "MenuBar",
  compose: useComposite,
  keys: MENU_BAR_KEYS,
  useProps: function useProps(options, _ref) {
    var htmlRef = _ref.ref,
        htmlWrapElement = _ref.wrapElement,
        _ref$role = _ref.role,
        role = _ref$role === void 0 ? "menubar" : _ref$role,
        htmlProps = _objectWithoutPropertiesLoose$3(_ref, ["ref", "wrapElement", "role"]);

    var ref = react.useRef(null);
    var wrap = useMenuContext(ref, role, options);
    useShortcuts(ref, options);
    var wrapElement = react.useCallback(function (element) {
      element = wrap(element);

      if (htmlWrapElement) {
        return htmlWrapElement(element);
      }

      return element;
    }, [wrap, htmlWrapElement]);
    return _objectSpread2$2({
      ref: useForkRef(ref, htmlRef),
      role: role,
      "aria-orientation": options.orientation,
      wrapElement: wrapElement
    }, htmlProps);
  }
});
createComponent$1({
  as: "div",
  useHook: useMenuBar,
  useCreateElement: function useCreateElement$1(type, props, children) {
    return useCreateElement(type, props, children);
  }
});

function usePlacementDir(placement) {
  return react.useMemo(function () {
    var _placement$split;

    return placement === null || placement === void 0 ? void 0 : (_placement$split = placement.split("-")) === null || _placement$split === void 0 ? void 0 : _placement$split[0];
  }, [placement]);
}

var useMenu = createHook$1({
  name: "Menu",
  compose: [useMenuBar, usePopover],
  keys: MENU_KEYS,
  useOptions: function useOptions(options) {
    var parent = react.useContext(MenuContext$1);
    var parentIsMenuBar = (parent === null || parent === void 0 ? void 0 : parent.role) === "menubar";
    return _objectSpread2$2(_objectSpread2$2({
      unstable_autoFocusOnHide: !parentIsMenuBar,
      modal: false
    }, options), {}, {
      // will be handled by MenuButton
      unstable_autoFocusOnShow: false,
      // will be handled differently from usePopover/useDialog
      hideOnEsc: false
    });
  },
  useProps: function useProps(options, _ref) {
    var htmlOnKeyDown = _ref.onKeyDown,
        htmlProps = _objectWithoutPropertiesLoose$3(_ref, ["onKeyDown"]);

    var onKeyDownRef = useLiveRef(htmlOnKeyDown);
    var parent = react.useContext(MenuContext$1);
    var hasParent = !!parent;
    var ancestorMenuBar = parent;

    while (ancestorMenuBar && ancestorMenuBar.role !== "menubar") {
      ancestorMenuBar = ancestorMenuBar.parent;
    }

    var _ref2 = ancestorMenuBar || {},
        next = _ref2.next,
        previous = _ref2.previous,
        orientation = _ref2.orientation;

    var ancestorIsHorizontal = orientation === "horizontal";
    var dir = usePlacementDir(options.placement);
    var onKeyDown = react.useCallback(function (event) {
      var _onKeyDownRef$current;

      (_onKeyDownRef$current = onKeyDownRef.current) === null || _onKeyDownRef$current === void 0 ? void 0 : _onKeyDownRef$current.call(onKeyDownRef, event);
      if (event.defaultPrevented) return;

      if (event.key === "Escape") {
        var _options$hide;

        if (!hasParent) {
          // On Esc, only stop propagation if there's no parent menu.
          // Otherwise, pressing Esc should close all menus
          event.stopPropagation();
        }

        (_options$hide = options.hide) === null || _options$hide === void 0 ? void 0 : _options$hide.call(options);
      } else if (hasParent && !isPortalEvent(event)) {
        // Moves to the next menu button in a horizontal menu bar or close
        // the menu if it's a sub menu
        var ArrowRight = ancestorIsHorizontal && dir !== "left" ? next : dir === "left" && options.hide;
        var ArrowLeft = ancestorIsHorizontal && dir !== "right" ? previous : dir === "right" && options.hide;
        var keyMap = {
          ArrowRight: ArrowRight,
          ArrowLeft: ArrowLeft
        };
        var action = keyMap[event.key];

        if (action) {
          event.preventDefault();

          if (hasParent) {
            event.stopPropagation();
          }

          action();
        }
      }
    }, [hasParent, ancestorIsHorizontal, next, previous, dir, options.hide]);
    return _objectSpread2$2({
      role: "menu",
      onKeyDown: onKeyDown
    }, htmlProps);
  }
});
createComponent$1({
  as: "div",
  useHook: useMenu,
  useCreateElement: function useCreateElement$1(type, props, children) {
    return useCreateElement(type, props, children);
  }
});

var usePopoverArrow = createHook$1({
  name: "PopoverArrow",
  compose: useRole,
  keys: POPOVER_ARROW_KEYS,
  useOptions: function useOptions(_ref) {
    var _ref$size = _ref.size,
        size = _ref$size === void 0 ? 30 : _ref$size,
        options = _objectWithoutPropertiesLoose$3(_ref, ["size"]);

    return _objectSpread2$2({
      size: size
    }, options);
  },
  useProps: function useProps(options, _ref2) {
    var _objectSpread2$1;

    var htmlRef = _ref2.ref,
        htmlStyle = _ref2.style,
        htmlProps = _objectWithoutPropertiesLoose$3(_ref2, ["ref", "style"]);

    var _options$placement$sp = options.placement.split("-"),
        placement = _options$placement$sp[0];

    var transformMap = {
      top: "rotateZ(180deg)",
      right: "rotateZ(-90deg)",
      bottom: "rotateZ(360deg)",
      left: "rotateZ(90deg)"
    };
    var arrowStyles = options.unstable_arrowStyles;
    var transform = transformMap[placement];
    var children = react.useMemo(function () {
      return /*#__PURE__*/react.createElement("svg", {
        viewBox: "0 0 30 30",
        style: {
          transform: transform
        }
      }, /*#__PURE__*/react.createElement("path", {
        className: "stroke",
        d: "M23.7,27.1L17,19.9C16.5,19.3,15.8,19,15,19s-1.6,0.3-2.1,0.9l-6.6,7.2C5.3,28.1,3.4,29,2,29h26 C26.7,29,24.6,28.1,23.7,27.1z"
      }), /*#__PURE__*/react.createElement("path", {
        className: "fill",
        d: "M23,27.8c1.1,1.2,3.4,2.2,5,2.2h2H0h2c1.7,0,3.9-1,5-2.2l6.6-7.2c0.7-0.8,2-0.8,2.7,0L23,27.8L23,27.8z"
      }));
    }, [transform]);
    return _objectSpread2$2({
      ref: useForkRef(options.unstable_arrowRef, htmlRef),
      style: _objectSpread2$2(_objectSpread2$2({}, arrowStyles), {}, (_objectSpread2$1 = {
        fontSize: options.size,
        width: "1em",
        height: "1em",
        pointerEvents: "none"
      }, _objectSpread2$1[placement] = "100%", _objectSpread2$1), htmlStyle),
      children: children
    }, htmlProps);
  }
});
createComponent$1({
  as: "div",
  memo: true,
  useHook: usePopoverArrow
});

function useMenuBarState(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }

  var _useSealedState = useSealedState(initialState),
      _useSealedState$orien = _useSealedState.orientation,
      orientation = _useSealedState$orien === void 0 ? "horizontal" : _useSealedState$orien,
      _useSealedState$unsta = _useSealedState.unstable_values,
      initialValues = _useSealedState$unsta === void 0 ? {} : _useSealedState$unsta,
      sealed = _objectWithoutPropertiesLoose$3(_useSealedState, ["orientation", "unstable_values"]);

  var _React$useState = react.useState(initialValues),
      values = _React$useState[0],
      setValues = _React$useState[1];

  var composite = useCompositeState(_objectSpread2$2(_objectSpread2$2({}, sealed), {}, {
    orientation: orientation
  }));
  return _objectSpread2$2(_objectSpread2$2({}, composite), {}, {
    unstable_values: values,
    unstable_setValue: react.useCallback(function (name, value) {
      setValues(function (vals) {
        var _objectSpread2$1;

        return _objectSpread2$2(_objectSpread2$2({}, vals), {}, (_objectSpread2$1 = {}, _objectSpread2$1[name] = typeof value === "function" ? value(vals) : value, _objectSpread2$1));
      });
    }, [])
  });
}

var usePopoverDisclosure = createHook$1({
  name: "PopoverDisclosure",
  compose: useDialogDisclosure,
  keys: POPOVER_DISCLOSURE_KEYS,
  useProps: function useProps(options, _ref) {
    var htmlRef = _ref.ref,
        htmlProps = _objectWithoutPropertiesLoose$3(_ref, ["ref"]);

    return _objectSpread2$2({
      ref: useForkRef(options.unstable_referenceRef, htmlRef)
    }, htmlProps);
  }
});
createComponent$1({
  as: "button",
  memo: true,
  useHook: usePopoverDisclosure
});

function findVisibleSubmenu(submenus) {
  var visibleSubmenu = submenus === null || submenus === void 0 ? void 0 : submenus.find(function (submenu) {
    return submenu.current && !submenu.current.hidden;
  });
  return visibleSubmenu === null || visibleSubmenu === void 0 ? void 0 : visibleSubmenu.current;
}

var noop$1 = function noop() {};

var useMenuButton = createHook$1({
  name: "MenuButton",
  compose: usePopoverDisclosure,
  keys: MENU_BUTTON_KEYS,
  propsAreEqual: function propsAreEqual(prev, next) {
    prev.unstable_popoverStyles;
        prev.unstable_arrowStyles;
        prev.currentId;
        prev.unstable_moves;
        var prevProps = _objectWithoutPropertiesLoose$3(prev, ["unstable_popoverStyles", "unstable_arrowStyles", "currentId", "unstable_moves"]);

    next.unstable_popoverStyles;
        next.unstable_arrowStyles;
        next.currentId;
        next.unstable_moves;
        var nextProps = _objectWithoutPropertiesLoose$3(next, ["unstable_popoverStyles", "unstable_arrowStyles", "currentId", "unstable_moves"]);

    return usePopoverDisclosure.unstable_propsAreEqual(prevProps, nextProps);
  },
  useProps: function useProps(options, _ref) {
    var htmlRef = _ref.ref,
        htmlOnClick = _ref.onClick,
        htmlOnKeyDown = _ref.onKeyDown,
        htmlOnFocus = _ref.onFocus,
        htmlOnMouseEnter = _ref.onMouseEnter,
        htmlOnMouseDown = _ref.onMouseDown,
        htmlProps = _objectWithoutPropertiesLoose$3(_ref, ["ref", "onClick", "onKeyDown", "onFocus", "onMouseEnter", "onMouseDown"]);

    var parent = react.useContext(MenuContext$1);
    var ref = react.useRef(null);
    var hasPressedMouse = react.useRef(false);

    var _options$placement$sp = options.placement.split("-"),
        dir = _options$placement$sp[0];

    var hasParent = !!parent;
    var parentIsMenuBar = (parent === null || parent === void 0 ? void 0 : parent.role) === "menubar";
    var disabled = options.disabled || htmlProps["aria-disabled"];
    var onClickRef = useLiveRef(htmlOnClick);
    var onKeyDownRef = useLiveRef(htmlOnKeyDown);
    var onFocusRef = useLiveRef(htmlOnFocus);
    var onMouseEnterRef = useLiveRef(htmlOnMouseEnter);
    var onMouseDownRef = useLiveRef(htmlOnMouseDown);
    var onKeyDown = react.useCallback(function (event) {
      var _onKeyDownRef$current;

      if (event.key === "Escape") {
        var _options$hide;

        // Doesn't prevent default on Escape, otherwise we can't close
        // dialogs when MenuButton is focused
        (_options$hide = options.hide) === null || _options$hide === void 0 ? void 0 : _options$hide.call(options);
      } else if (!disabled) {
        // setTimeout prevents scroll jump
        var first = options.first && function () {
          return setTimeout(options.first);
        };

        var last = options.last && function () {
          return setTimeout(options.last);
        };

        var keyMap = {
          Enter: first,
          " ": first,
          ArrowUp: (dir === "top" || dir === "bottom") && last,
          ArrowRight: dir === "right" && first,
          ArrowDown: (dir === "bottom" || dir === "top") && first,
          ArrowLeft: dir === "left" && first
        };
        var action = keyMap[event.key];

        if (action) {
          var _options$show;

          event.preventDefault();
          event.stopPropagation();
          (_options$show = options.show) === null || _options$show === void 0 ? void 0 : _options$show.call(options);
          action();
          return;
        }
      }

      (_onKeyDownRef$current = onKeyDownRef.current) === null || _onKeyDownRef$current === void 0 ? void 0 : _onKeyDownRef$current.call(onKeyDownRef, event);
    }, [disabled, options.hide, options.first, options.last, dir, options.show]);
    var onMouseEnter = react.useCallback(function (event) {
      var _onMouseEnterRef$curr;

      (_onMouseEnterRef$curr = onMouseEnterRef.current) === null || _onMouseEnterRef$curr === void 0 ? void 0 : _onMouseEnterRef$curr.call(onMouseEnterRef, event);
      if (event.defaultPrevented) return; // MenuButton's don't do anything on mouse over when they aren't
      // cointained within a Menu/MenuBar

      if (!parent) return;
      var element = event.currentTarget;

      if (parentIsMenuBar) {
        // if MenuButton is an item inside a MenuBar, it'll only open
        // if there's already another sibling expanded MenuButton
        if (findVisibleSubmenu(parent.children)) {
          element.focus();
        }
      } else {
        // If it's in a Menu, open after a short delay
        // TODO: Make the delay a prop?
        setTimeout(function () {
          if (hasFocusWithin(element)) {
            var _options$show2;

            (_options$show2 = options.show) === null || _options$show2 === void 0 ? void 0 : _options$show2.call(options);
          }
        }, 200);
      }
    }, [parent, parentIsMenuBar, options.show]);
    var onMouseDown = react.useCallback(function (event) {
      var _onMouseDownRef$curre;

      // When in menu bar, the menu button can be activated either by focus
      // or click, but we don't want both to trigger sequentially.
      // Otherwise, onClick would toggle (hide) the menu right after it got
      // shown on focus.
      // This is also useful so we know if the menu button has been clicked
      // using mouse or keyboard. On mouse click, we don't automatically
      // focus the first menu item.
      hasPressedMouse.current = true;
      (_onMouseDownRef$curre = onMouseDownRef.current) === null || _onMouseDownRef$curre === void 0 ? void 0 : _onMouseDownRef$curre.call(onMouseDownRef, event);
    }, []);
    var onFocus = react.useCallback(function (event) {
      var _onFocusRef$current;

      (_onFocusRef$current = onFocusRef.current) === null || _onFocusRef$current === void 0 ? void 0 : _onFocusRef$current.call(onFocusRef, event);
      if (event.defaultPrevented) return;
      if (disabled) return;

      if (parentIsMenuBar && !hasPressedMouse.current) {
        var _options$show3;

        (_options$show3 = options.show) === null || _options$show3 === void 0 ? void 0 : _options$show3.call(options);
      }
    }, [parentIsMenuBar, disabled, options.show]); // If disclosure is rendered as a menu bar item, it's toggable
    // That is, you can click on the expanded disclosure to close its menu.

    var onClick = react.useCallback(function (event) {
      var _onClickRef$current;

      (_onClickRef$current = onClickRef.current) === null || _onClickRef$current === void 0 ? void 0 : _onClickRef$current.call(onClickRef, event);
      if (event.defaultPrevented) return; // If menu button is a menu item inside a menu (not menu bar), you
      // can't close it by clicking on it again.

      if (hasParent && !parentIsMenuBar) {
        var _options$show4;

        (_options$show4 = options.show) === null || _options$show4 === void 0 ? void 0 : _options$show4.call(options);
      } else {
        var _options$toggle;

        // Otherwise, if menu button is a menu bar item or an orphan menu
        // button, it's toggable.
        (_options$toggle = options.toggle) === null || _options$toggle === void 0 ? void 0 : _options$toggle.call(options); // Focus the menu popover when it's opened with mouse click.

        if (hasPressedMouse.current && !parentIsMenuBar && !options.visible) {
          var _options$move;

          (_options$move = options.move) === null || _options$move === void 0 ? void 0 : _options$move.call(options, null);
        }
      }

      hasPressedMouse.current = false;
    }, [hasParent, parentIsMenuBar, options.show, options.toggle, options.visible, options.move]);
    return _objectSpread2$2({
      ref: useForkRef(ref, htmlRef),
      "aria-haspopup": "menu",
      onKeyDown: onKeyDown,
      onMouseEnter: onMouseEnter,
      onMouseDown: onMouseDown,
      onFocus: onFocus,
      onClick: onClick
    }, htmlProps);
  },
  useComposeOptions: function useComposeOptions(options) {
    return _objectSpread2$2(_objectSpread2$2({}, options), {}, {
      // Toggling is handled by MenuButton
      toggle: noop$1
    });
  }
});
createComponent$1({
  as: "button",
  memo: true,
  useHook: useMenuButton
});

function getTriangleArea(a, b, c) {
  return Math.abs((a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y)) / 2);
}

function isPointInTriangle(point, a, b, c) {
  var A = getTriangleArea(a, b, c);
  var A1 = getTriangleArea(point, b, c);
  var A2 = getTriangleArea(a, point, c);
  var A3 = getTriangleArea(a, b, point);
  return A === A1 + A2 + A3;
}

function getSubmenuAnchorPoints(event, visibleSubmenu) {
  var _visibleSubmenu$getBo = visibleSubmenu.getBoundingClientRect(),
      top = _visibleSubmenu$getBo.top,
      right = _visibleSubmenu$getBo.right,
      bottom = _visibleSubmenu$getBo.bottom,
      left = _visibleSubmenu$getBo.left; // If left is bigger than mouse's clientX, than the submenu is visible on
  // the left side


  var x = left > event.clientX ? left : right;
  return [{
    x: x,
    y: top
  }, {
    x: x,
    y: bottom
  }];
}

function useTransitToSubmenu(menu, htmlOnMouseEnter) {
  var onMouseEnterRef = useLiveRef(htmlOnMouseEnter);
  var enterPointRef = react.useRef(null);
  var submenuTopPointRef = react.useRef(null);
  var submenuBottomPointRef = react.useRef(null);
  var previousClientX = react.useRef(0);
  var previousClientY = react.useRef(0);
  var assignSubmenuAnchorPoints = react.useCallback(function (event) {
    if (!(menu === null || menu === void 0 ? void 0 : menu.children.length)) return;
    submenuTopPointRef.current = null;
    submenuBottomPointRef.current = null;
    var visibleSubmenu = findVisibleSubmenu(menu.children);
    if (!visibleSubmenu) return;

    var _getSubmenuAnchorPoin = getSubmenuAnchorPoints(event, visibleSubmenu);

    submenuTopPointRef.current = _getSubmenuAnchorPoin[0];
    submenuBottomPointRef.current = _getSubmenuAnchorPoin[1];
  }, [menu === null || menu === void 0 ? void 0 : menu.children]);
  var isMouseInTransitToSubmenu = react.useCallback(function (event) {
    var isMoving = previousClientX.current !== event.clientX || previousClientY.current !== event.clientY;

    if (event.isTrusted && !isMoving) {
      // Safari sometimes triggers mousemove without a mouse movement
      return true;
    }

    var movementX = Math.abs(previousClientX.current - event.clientX);
    previousClientX.current = event.clientX;
    previousClientY.current = event.clientY;

    var hasAnchorPoints = function hasAnchorPoints() {
      return submenuTopPointRef.current && submenuBottomPointRef.current;
    };

    if (event.type === "mouseleave" && !hasAnchorPoints()) {
      assignSubmenuAnchorPoints(event);
    }

    if (!hasAnchorPoints()) return false;
    return movementX && enterPointRef.current && isPointInTriangle({
      x: event.clientX,
      y: event.clientY
    }, enterPointRef.current, submenuTopPointRef.current, submenuBottomPointRef.current);
  }, [assignSubmenuAnchorPoints]);
  var onMouseEnter = react.useCallback(function (event) {
    var _onMouseEnterRef$curr;

    (_onMouseEnterRef$curr = onMouseEnterRef.current) === null || _onMouseEnterRef$curr === void 0 ? void 0 : _onMouseEnterRef$curr.call(onMouseEnterRef, event);
    if (event.defaultPrevented) return;
    if ((menu === null || menu === void 0 ? void 0 : menu.role) === "menubar") return;
    enterPointRef.current = {
      x: event.clientX,
      y: event.clientY
    };
    assignSubmenuAnchorPoints(event);
  }, [menu === null || menu === void 0 ? void 0 : menu.role, assignSubmenuAnchorPoints]);
  return {
    onMouseEnter: onMouseEnter,
    isMouseInTransitToSubmenu: isMouseInTransitToSubmenu
  };
}

function getMouseDestination(event) {
  var relatedTarget = event.relatedTarget;

  if ((relatedTarget === null || relatedTarget === void 0 ? void 0 : relatedTarget.nodeType) === Node.ELEMENT_NODE) {
    return event.relatedTarget;
  } // IE 11


  return event.toElement || null;
}

function hoveringInside(event) {
  var nextElement = getMouseDestination(event);
  if (!nextElement) return false;
  return contains$1(event.currentTarget, nextElement);
}

function hoveringExpandedMenu(event, children) {
  if (!(children === null || children === void 0 ? void 0 : children.length)) return false;
  var nextElement = getMouseDestination(event);
  if (!nextElement) return false;
  var visibleSubmenu = findVisibleSubmenu(children);
  return visibleSubmenu && contains$1(visibleSubmenu, nextElement);
}

function hoveringAnotherMenuItem(event, items) {
  var nextElement = getMouseDestination(event);
  if (!nextElement) return false;
  return items === null || items === void 0 ? void 0 : items.some(function (item) {
    return item.ref.current && contains$1(item.ref.current, nextElement);
  });
}

var useMenuItem = createHook$1({
  name: "MenuItem",
  compose: useCompositeItem,
  keys: MENU_ITEM_KEYS,
  propsAreEqual: function propsAreEqual(prev, next) {
    prev.unstable_popoverStyles;
        prev.unstable_arrowStyles;
        prev.visible;
        var prevProps = _objectWithoutPropertiesLoose$3(prev, ["unstable_popoverStyles", "unstable_arrowStyles", "visible"]);

    next.unstable_popoverStyles;
        next.unstable_arrowStyles;
        next.visible;
        var nextProps = _objectWithoutPropertiesLoose$3(next, ["unstable_popoverStyles", "unstable_arrowStyles", "visible"]);

    return useCompositeItem.unstable_propsAreEqual(prevProps, nextProps);
  },
  useProps: function useProps(options, _ref) {
    var htmlOnMouseEnter = _ref.onMouseEnter,
        htmlOnMouseMove = _ref.onMouseMove,
        htmlOnMouseLeave = _ref.onMouseLeave,
        htmlProps = _objectWithoutPropertiesLoose$3(_ref, ["onMouseEnter", "onMouseMove", "onMouseLeave"]);

    var menu = react.useContext(MenuContext$1);
    var onMouseMoveRef = useLiveRef(htmlOnMouseMove);
    var onMouseLeaveRef = useLiveRef(htmlOnMouseLeave);

    var _useTransitToSubmenu = useTransitToSubmenu(menu, htmlOnMouseEnter),
        onMouseEnter = _useTransitToSubmenu.onMouseEnter,
        isMouseInTransitToSubmenu = _useTransitToSubmenu.isMouseInTransitToSubmenu;

    var onMouseMove = react.useCallback(function (event) {
      var _onMouseMoveRef$curre, _options$move;

      (_onMouseMoveRef$curre = onMouseMoveRef.current) === null || _onMouseMoveRef$curre === void 0 ? void 0 : _onMouseMoveRef$curre.call(onMouseMoveRef, event);
      if (event.defaultPrevented) return;
      if ((menu === null || menu === void 0 ? void 0 : menu.role) === "menubar") return;
      if (isMouseInTransitToSubmenu(event)) return;
      if (hasFocusWithin(event.currentTarget)) return;
      (_options$move = options.move) === null || _options$move === void 0 ? void 0 : _options$move.call(options, event.currentTarget.id);
    }, [options.move]);
    var onMouseLeave = react.useCallback(function (event) {
      var _onMouseLeaveRef$curr;

      (_onMouseLeaveRef$curr = onMouseLeaveRef.current) === null || _onMouseLeaveRef$curr === void 0 ? void 0 : _onMouseLeaveRef$curr.call(onMouseLeaveRef, event);
      if (event.defaultPrevented) return;
      if ((menu === null || menu === void 0 ? void 0 : menu.role) === "menubar") return;
      if (hoveringInside(event)) return; // If this item is a menu disclosure and mouse is leaving it to focus
      // its respective submenu, we don't want to do anything.

      if (hoveringExpandedMenu(event, menu === null || menu === void 0 ? void 0 : menu.children)) return; // Move focus to menu after blurring

      if (!hoveringAnotherMenuItem(event, options.items)) {
        var _options$move2;

        if (isMouseInTransitToSubmenu(event)) return;
        (_options$move2 = options.move) === null || _options$move2 === void 0 ? void 0 : _options$move2.call(options, null);
      }
    }, [menu === null || menu === void 0 ? void 0 : menu.role, menu === null || menu === void 0 ? void 0 : menu.children, options.items, options.move]);
    return _objectSpread2$2({
      role: "menuitem",
      onMouseEnter: onMouseEnter,
      onMouseMove: onMouseMove,
      onMouseLeave: onMouseLeave
    }, htmlProps);
  }
});
createComponent$1({
  as: "button",
  memo: true,
  useHook: useMenuItem
});

// Automatically generated
var SEPARATOR_KEYS = ["orientation"];

var useSeparator = createHook$1({
  name: "Separator",
  compose: useRole,
  keys: SEPARATOR_KEYS,
  useOptions: function useOptions(_ref) {
    var _ref$orientation = _ref.orientation,
        orientation = _ref$orientation === void 0 ? "horizontal" : _ref$orientation,
        options = _objectWithoutPropertiesLoose$3(_ref, ["orientation"]);

    return _objectSpread2$2({
      orientation: orientation
    }, options);
  },
  useProps: function useProps(options, htmlProps) {
    return _objectSpread2$2({
      role: "separator",
      "aria-orientation": options.orientation
    }, htmlProps);
  }
});
createComponent$1({
  as: "hr",
  memo: true,
  useHook: useSeparator
});

var useMenuSeparator = createHook$1({
  name: "MenuSeparator",
  compose: useSeparator,
  keys: MENU_SEPARATOR_KEYS,
  useOptions: function useOptions(_ref) {
    var _ref$orientation = _ref.orientation,
        orientation = _ref$orientation === void 0 ? "vertical" : _ref$orientation,
        options = _objectWithoutPropertiesLoose$3(_ref, ["orientation"]);

    return _objectSpread2$2({
      orientation: orientation === "vertical" ? "horizontal" : "vertical"
    }, options);
  }
});
createComponent$1({
  as: "hr",
  memo: true,
  useHook: useMenuSeparator
});

function useMenuState(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }

  var parent = react.useContext(MenuContext$1);

  var _useSealedState = useSealedState(initialState),
      _useSealedState$orien = _useSealedState.orientation,
      orientation = _useSealedState$orien === void 0 ? "vertical" : _useSealedState$orien,
      _useSealedState$gutte = _useSealedState.gutter,
      gutter = _useSealedState$gutte === void 0 ? 0 : _useSealedState$gutte,
      sealed = _objectWithoutPropertiesLoose$3(_useSealedState, ["orientation", "gutter"]);

  var placement = sealed.placement || (parent && parent.orientation === "vertical" ? "right-start" : "bottom-start");
  var menuBar = useMenuBarState(_objectSpread2$2(_objectSpread2$2({}, sealed), {}, {
    orientation: orientation
  }));
  var popover = usePopoverState$1(_objectSpread2$2(_objectSpread2$2({}, sealed), {}, {
    placement: placement,
    gutter: gutter
  }));
  react.useEffect(function () {
    if (!popover.visible) {
      menuBar.reset();
    }
  }, [popover.visible, menuBar.reset]);
  return _objectSpread2$2(_objectSpread2$2({}, menuBar), popover);
}

var usePopoverBackdrop = createHook$1({
  name: "PopoverBackdrop",
  compose: useDialogBackdrop,
  keys: POPOVER_BACKDROP_KEYS,
  useOptions: function useOptions(_ref) {
    var _ref$modal = _ref.modal,
        modal = _ref$modal === void 0 ? false : _ref$modal,
        options = _objectWithoutPropertiesLoose$3(_ref, ["modal"]);

    return _objectSpread2$2({
      modal: modal
    }, options);
  }
});
createComponent$1({
  as: "div",
  memo: true,
  useHook: usePopoverBackdrop
});

/**
 * Returns an `onKeyDown` handler to be passed to a component.
 *
 * @param options
 */
function createOnKeyDown(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      keyMap = _ref.keyMap,
      onKey = _ref.onKey,
      stopPropagation = _ref.stopPropagation,
      onKeyDown = _ref.onKeyDown,
      _ref$shouldKeyDown = _ref.shouldKeyDown,
      shouldKeyDown = _ref$shouldKeyDown === void 0 ? function () {
    return true;
  } : _ref$shouldKeyDown,
      _ref$preventDefault = _ref.preventDefault,
      preventDefault = _ref$preventDefault === void 0 ? true : _ref$preventDefault;

  return function (event) {
    if (!keyMap) return;
    var finalKeyMap = typeof keyMap === "function" ? keyMap(event) : keyMap;
    var shouldPreventDefault = typeof preventDefault === "function" ? preventDefault(event) : preventDefault;
    var shouldStopPropagation = typeof stopPropagation === "function" ? stopPropagation(event) : stopPropagation;

    if (event.key in finalKeyMap) {
      var action = finalKeyMap[event.key];

      if (typeof action === "function" && shouldKeyDown(event)) {
        if (shouldPreventDefault) event.preventDefault();
        if (shouldStopPropagation) event.stopPropagation();
        if (onKey) onKey(event);
        action(event); // Prevent onKeyDown from being called twice for the same keys

        return;
      }
    }

    if (onKeyDown && "current" in onKeyDown) {
      var _onKeyDown$current;

      (_onKeyDown$current = onKeyDown.current) === null || _onKeyDown$current === void 0 ? void 0 : _onKeyDown$current.call(onKeyDown, event);
    } else {
      onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);
    }
  };
}

// Automatically generated
var ROVER_STATE_KEYS = ["baseId", "unstable_idCountRef", "orientation", "stops", "currentId", "unstable_pastId", "unstable_moves", "loop", "setBaseId", "register", "unregister", "move", "next", "previous", "first", "last", "unstable_reset", "unstable_orientate"];
var ROVER_KEYS = [].concat(ROVER_STATE_KEYS, ["stopId"]);

function useAllCallbacks() {
  for (var _len = arguments.length, callbacks = new Array(_len), _key = 0; _key < _len; _key++) {
    callbacks[_key] = arguments[_key];
  }

  return react.useCallback(function () {
    var fns = callbacks.filter(Boolean);

    for (var _iterator = _createForOfIteratorHelperLoose$1(fns), _step; !(_step = _iterator()).done;) {
      var callback = _step.value;
      callback.apply(void 0, arguments);
    }
  }, callbacks);
}

var useRover = createHook$1({
  name: "Rover",
  compose: [useClickable, unstable_useId],
  keys: ROVER_KEYS,
  useProps: function useProps(options, _ref) {
    var htmlRef = _ref.ref,
        _ref$tabIndex = _ref.tabIndex,
        htmlTabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex,
        htmlOnFocus = _ref.onFocus,
        htmlOnKeyDown = _ref.onKeyDown,
        htmlProps = _objectWithoutPropertiesLoose$3(_ref, ["ref", "tabIndex", "onFocus", "onKeyDown"]);

    var ref = react.useRef(null);
    var id = options.stopId || options.id;
    var trulyDisabled = options.disabled && !options.focusable;
    var noFocused = options.currentId == null;
    var focused = options.currentId === id;
    var isFirst = (options.stops || [])[0] && options.stops[0].id === id;
    var shouldTabIndex = focused || isFirst && noFocused;
    react.useEffect(function () {
      if (trulyDisabled || !id) return undefined;
      options.register && options.register(id, ref);
      return function () {
        return options.unregister && options.unregister(id);
      };
    }, [id, trulyDisabled, options.register, options.unregister]);
    react.useEffect(function () {
      var rover = ref.current;

      if (!rover) {
        return;
      }

      if (options.unstable_moves && focused && !hasFocusWithin(rover)) {
        rover.focus();
      }
    }, [focused, options.unstable_moves]);
    var onFocus = react.useCallback(function (event) {
      if (!id || !event.currentTarget.contains(event.target)) return; // this is already focused, so we move silently

      options.move(id, true);
    }, [options.move, id]);
    var onKeyDown = react.useMemo(function () {
      return createOnKeyDown({
        onKeyDown: htmlOnKeyDown,
        stopPropagation: true,
        shouldKeyDown: function shouldKeyDown(event) {
          return (// Ignore portals
            // https://github.com/facebook/react/issues/11387
            event.currentTarget.contains(event.target)
          );
        },
        keyMap: {
          ArrowUp: options.orientation !== "horizontal" && options.previous,
          ArrowRight: options.orientation !== "vertical" && options.next,
          ArrowDown: options.orientation !== "horizontal" && options.next,
          ArrowLeft: options.orientation !== "vertical" && options.previous,
          Home: options.first,
          End: options.last,
          PageUp: options.first,
          PageDown: options.last
        }
      });
    }, [htmlOnKeyDown, options.orientation, options.previous, options.next, options.first, options.last]);
    return _objectSpread2$2({
      id: id,
      ref: useForkRef(ref, htmlRef),
      tabIndex: shouldTabIndex ? htmlTabIndex : -1,
      onFocus: useAllCallbacks(onFocus, htmlOnFocus),
      onKeyDown: onKeyDown
    }, htmlProps);
  }
});
createComponent$1({
  as: "button",
  useHook: useRover
});

function reducer$2(state, action) {
  var stops = state.stops,
      currentId = state.currentId,
      pastId = state.unstable_pastId,
      moves = state.unstable_moves,
      loop = state.loop;

  switch (action.type) {
    case "register":
      {
        var _id = action.id,
            _ref = action.ref;

        if (stops.length === 0) {
          return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
            stops: [{
              id: _id,
              ref: _ref
            }]
          });
        }

        var index = stops.findIndex(function (stop) {
          return stop.id === _id;
        });

        if (index >= 0) {
          return state;
        }

        var indexToInsertAt = stops.findIndex(function (stop) {
          if (!stop.ref.current || !_ref.current) return false; // Return true if the new rover element is located earlier in the DOM
          // than stop's element, else false:

          return Boolean(stop.ref.current.compareDocumentPosition(_ref.current) & Node.DOCUMENT_POSITION_PRECEDING);
        }); // findIndex returns -1 when the new rover should be inserted
        // at the end of stops (the compareDocumentPosition test
        // always returns false in that case).

        if (indexToInsertAt === -1) {
          return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
            stops: [].concat(stops, [{
              id: _id,
              ref: _ref
            }])
          });
        }

        return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
          stops: [].concat(stops.slice(0, indexToInsertAt), [{
            id: _id,
            ref: _ref
          }], stops.slice(indexToInsertAt))
        });
      }

    case "unregister":
      {
        var _id2 = action.id;
        var nextStops = stops.filter(function (stop) {
          return stop.id !== _id2;
        });

        if (nextStops.length === stops.length) {
          return state;
        }

        return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
          stops: nextStops,
          unstable_pastId: pastId && pastId === _id2 ? null : pastId,
          currentId: currentId && currentId === _id2 ? null : currentId
        });
      }

    case "move":
      {
        var _id3 = action.id,
            silent = action.silent;
        var nextMoves = silent ? moves : moves + 1;

        if (_id3 === null) {
          return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
            currentId: null,
            unstable_pastId: currentId,
            unstable_moves: nextMoves
          });
        }

        var _index = stops.findIndex(function (stop) {
          return stop.id === _id3;
        }); // Item doesn't exist, so we don't count a move


        if (_index === -1) {
          return state;
        }

        if (stops[_index].id === currentId) {
          return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
            unstable_moves: nextMoves
          });
        }

        return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
          currentId: stops[_index].id,
          unstable_pastId: currentId,
          unstable_moves: nextMoves
        });
      }

    case "next":
      {
        if (currentId == null) {
          return reducer$2(state, {
            type: "move",
            id: stops[0] && stops[0].id
          });
        }

        var _index2 = stops.findIndex(function (stop) {
          return stop.id === currentId;
        }); // If loop is truthy, turns [0, currentId, 2, 3] into [currentId, 2, 3, 0]
        // Otherwise turns into [currentId, 2, 3]


        var reorderedStops = [].concat(stops.slice(_index2 + 1), loop ? stops.slice(0, _index2) : []);
        var nextIndex = reorderedStops.findIndex(function (stop) {
          return stop.id === currentId;
        }) + 1;
        return reducer$2(state, {
          type: "move",
          id: reorderedStops[nextIndex] && reorderedStops[nextIndex].id
        });
      }

    case "previous":
      {
        var _reducer = reducer$2(_objectSpread2$2(_objectSpread2$2({}, state), {}, {
          stops: stops.slice().reverse()
        }), {
          type: "next"
        });
            _reducer.stops;
            var nextState = _objectWithoutPropertiesLoose$3(_reducer, ["stops"]);

        return _objectSpread2$2(_objectSpread2$2({}, state), nextState);
      }

    case "first":
      {
        var stop = stops[0];
        return reducer$2(state, {
          type: "move",
          id: stop && stop.id
        });
      }

    case "last":
      {
        var _stop = stops[stops.length - 1];
        return reducer$2(state, {
          type: "move",
          id: _stop && _stop.id
        });
      }

    case "reset":
      {
        return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
          currentId: null,
          unstable_pastId: null
        });
      }

    case "orientate":
      return _objectSpread2$2(_objectSpread2$2({}, state), {}, {
        orientation: action.orientation
      });

    default:
      throw new Error();
  }
}

function useRoverState$1(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }

  var _useSealedState = useSealedState(initialState),
      orientation = _useSealedState.orientation,
      _useSealedState$curre = _useSealedState.currentId,
      currentId = _useSealedState$curre === void 0 ? null : _useSealedState$curre,
      _useSealedState$loop = _useSealedState.loop,
      loop = _useSealedState$loop === void 0 ? false : _useSealedState$loop,
      sealed = _objectWithoutPropertiesLoose$3(_useSealedState, ["orientation", "currentId", "loop"]);

  var _React$useReducer = react.useReducer(reducer$2, {
    orientation: orientation,
    stops: [],
    currentId: currentId,
    unstable_pastId: null,
    unstable_moves: 0,
    loop: loop
  }),
      state = _React$useReducer[0],
      dispatch = _React$useReducer[1];

  var idState = unstable_useIdState(sealed);
  return _objectSpread2$2(_objectSpread2$2(_objectSpread2$2({}, idState), state), {}, {
    register: useAction(function (id, ref) {
      return dispatch({
        type: "register",
        id: id,
        ref: ref
      });
    }),
    unregister: useAction(function (id) {
      return dispatch({
        type: "unregister",
        id: id
      });
    }),
    move: useAction(function (id, silent) {
      return dispatch({
        type: "move",
        id: id,
        silent: silent
      });
    }),
    next: useAction(function () {
      return dispatch({
        type: "next"
      });
    }),
    previous: useAction(function () {
      return dispatch({
        type: "previous"
      });
    }),
    first: useAction(function () {
      return dispatch({
        type: "first"
      });
    }),
    last: useAction(function () {
      return dispatch({
        type: "last"
      });
    }),
    unstable_reset: useAction(function () {
      return dispatch({
        type: "reset"
      });
    }),
    unstable_orientate: useAction(function (o) {
      return dispatch({
        type: "orientate",
        orientation: o
      });
    })
  });
}

function useAction(fn) {
  return react.useCallback(fn, []);
}

// Automatically generated
var TAB_STATE_KEYS = ["baseId", "unstable_idCountRef", "unstable_virtual", "rtl", "orientation", "items", "groups", "currentId", "loop", "wrap", "shift", "unstable_moves", "unstable_hasActiveWidget", "unstable_includesBaseElement", "selectedId", "panels", "manual", "setBaseId", "registerItem", "unregisterItem", "registerGroup", "unregisterGroup", "move", "next", "previous", "up", "down", "first", "last", "sort", "unstable_setVirtual", "setRTL", "setOrientation", "setCurrentId", "setLoop", "setWrap", "setShift", "reset", "unstable_setIncludesBaseElement", "unstable_setHasActiveWidget", "select", "setSelectedId", "registerPanel", "unregisterPanel"];
var TAB_KEYS = TAB_STATE_KEYS;
var TAB_LIST_KEYS = TAB_KEYS;
var TAB_PANEL_KEYS = [].concat(TAB_LIST_KEYS, ["tabId"]);

function useTabPanelId(options) {
  return react.useMemo(function () {
    var _options$panels, _options$panels$find;

    return ((_options$panels = options.panels) === null || _options$panels === void 0 ? void 0 : (_options$panels$find = _options$panels.find(function (panel) {
      return panel.groupId === options.id;
    })) === null || _options$panels$find === void 0 ? void 0 : _options$panels$find.id) || undefined;
  }, [options.panels, options.id]);
}

var useTab = createHook$1({
  name: "Tab",
  compose: useCompositeItem,
  keys: TAB_KEYS,
  useOptions: function useOptions(_ref) {
    var _ref$focusable = _ref.focusable,
        focusable = _ref$focusable === void 0 ? true : _ref$focusable,
        options = _objectWithoutPropertiesLoose$3(_ref, ["focusable"]);

    return _objectSpread2$2({
      focusable: focusable
    }, options);
  },
  useProps: function useProps(options, _ref2) {
    var htmlOnClick = _ref2.onClick,
        htmlOnFocus = _ref2.onFocus,
        htmlProps = _objectWithoutPropertiesLoose$3(_ref2, ["onClick", "onFocus"]);

    var selected = options.selectedId === options.id;
    var tabPanelId = useTabPanelId(options);
    var onClickRef = useLiveRef(htmlOnClick);
    var onFocusRef = useLiveRef(htmlOnFocus);
    var onClick = react.useCallback(function (event) {
      var _onClickRef$current, _options$select;

      (_onClickRef$current = onClickRef.current) === null || _onClickRef$current === void 0 ? void 0 : _onClickRef$current.call(onClickRef, event);
      if (event.defaultPrevented) return;
      if (options.disabled) return;
      if (!options.id) return;
      if (selected) return;
      (_options$select = options.select) === null || _options$select === void 0 ? void 0 : _options$select.call(options, options.id);
    }, [options.disabled, selected, options.select, options.id]);
    var onFocus = react.useCallback(function (event) {
      var _onFocusRef$current, _options$select2;

      (_onFocusRef$current = onFocusRef.current) === null || _onFocusRef$current === void 0 ? void 0 : _onFocusRef$current.call(onFocusRef, event);
      if (event.defaultPrevented) return;
      if (options.disabled) return;
      if (options.manual) return;
      if (!options.id) return;
      if (selected) return;
      (_options$select2 = options.select) === null || _options$select2 === void 0 ? void 0 : _options$select2.call(options, options.id);
    }, [options.id, options.disabled, options.manual, selected, options.select]);
    return _objectSpread2$2({
      role: "tab",
      "aria-selected": selected,
      "aria-controls": tabPanelId,
      onClick: onClick,
      onFocus: onFocus
    }, htmlProps);
  }
});
createComponent$1({
  as: "button",
  memo: true,
  useHook: useTab
});

var useTabList = createHook$1({
  name: "TabList",
  compose: useComposite,
  keys: TAB_LIST_KEYS,
  useProps: function useProps(options, htmlProps) {
    return _objectSpread2$2({
      role: "tablist",
      "aria-orientation": options.orientation
    }, htmlProps);
  }
});
createComponent$1({
  as: "div",
  useHook: useTabList,
  useCreateElement: function useCreateElement$1(type, props, children) {
    return useCreateElement(type, props, children);
  }
});

function getTabsWithoutPanel(tabs, panels) {
  var panelsTabIds = panels.map(function (panel) {
    return panel.groupId;
  }).filter(Boolean);
  return tabs.filter(function (item) {
    return panelsTabIds.indexOf(item.id || undefined) === -1;
  });
}

function getPanelIndex(panels, panel) {
  var panelsWithoutTabId = panels.filter(function (p) {
    return !p.groupId;
  });
  return panelsWithoutTabId.indexOf(panel);
}
/**
 * When <TabPanel> is used without tabId:
 *
 *   - First render: getTabId will return undefined because options.panels
 * doesn't contain the current panel yet (registerPanel wasn't called yet).
 * Thus registerPanel will be called without groupId (tabId).
 *
 *   - Second render: options.panels already contains the current panel
 * (because registerPanel was called in the previous render). This means that
 * we'll be able to get the related tabId with the tab panel index. Basically,
 * we filter out all the tabs and panels that have already matched. In this
 * phase, registerPanel will be called again with the proper groupId (tabId).
 *
 *   - In the third render, panel.groupId will be already defined, so we just
 * return it. registerPanel is not called.
 */


function getTabId(options) {
  var _options$panels, _tabsWithoutPanel$pan;

  var panel = (_options$panels = options.panels) === null || _options$panels === void 0 ? void 0 : _options$panels.find(function (p) {
    return p.id === options.id;
  });
  var tabId = options.tabId || (panel === null || panel === void 0 ? void 0 : panel.groupId);

  if (tabId || !panel || !options.panels || !options.items) {
    return tabId;
  }

  var panelIndex = getPanelIndex(options.panels, panel);
  var tabsWithoutPanel = getTabsWithoutPanel(options.items, options.panels);
  return ((_tabsWithoutPanel$pan = tabsWithoutPanel[panelIndex]) === null || _tabsWithoutPanel$pan === void 0 ? void 0 : _tabsWithoutPanel$pan.id) || undefined;
}

var useTabPanel = createHook$1({
  name: "TabPanel",
  compose: [unstable_useId, useDisclosureContent],
  keys: TAB_PANEL_KEYS,
  useProps: function useProps(options, _ref) {
    var htmlRef = _ref.ref,
        htmlProps = _objectWithoutPropertiesLoose$3(_ref, ["ref"]);

    var ref = react.useRef(null);
    var tabId = getTabId(options);
    var id = options.id,
        registerPanel = options.registerPanel,
        unregisterPanel = options.unregisterPanel;
    react.useEffect(function () {
      if (!id) return undefined;
      registerPanel === null || registerPanel === void 0 ? void 0 : registerPanel({
        id: id,
        ref: ref,
        groupId: tabId
      });
      return function () {
        unregisterPanel === null || unregisterPanel === void 0 ? void 0 : unregisterPanel(id);
      };
    }, [tabId, id, registerPanel, unregisterPanel]);
    return _objectSpread2$2({
      ref: useForkRef(ref, htmlRef),
      role: "tabpanel",
      tabIndex: 0,
      "aria-labelledby": tabId
    }, htmlProps);
  },
  useComposeOptions: function useComposeOptions(options) {
    var tabId = getTabId(options);
    return _objectSpread2$2({
      visible: tabId ? options.selectedId === tabId : false
    }, options);
  }
});
createComponent$1({
  as: "div",
  useHook: useTabPanel
});

function useTabState$1(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }

  var _useSealedState = useSealedState(initialState),
      initialSelectedId = _useSealedState.selectedId,
      _useSealedState$loop = _useSealedState.loop,
      loop = _useSealedState$loop === void 0 ? true : _useSealedState$loop,
      _useSealedState$manua = _useSealedState.manual,
      manual = _useSealedState$manua === void 0 ? false : _useSealedState$manua,
      sealed = _objectWithoutPropertiesLoose$3(_useSealedState, ["selectedId", "loop", "manual"]);

  var composite = useCompositeState(_objectSpread2$2({
    loop: loop,
    currentId: initialSelectedId
  }, sealed));
  var panels = useCompositeState();

  var _React$useState = react.useState(initialSelectedId),
      selectedId = _React$useState[0],
      setSelectedId = _React$useState[1];

  var select = react.useCallback(function (id) {
    composite.move(id);
    setSelectedId(id);
  }, [composite.move]); // If selectedId is not set, use the currentId. It's still possible to have
  // no selected tab with useTabState({ selectedId: null });

  react.useEffect(function () {
    if (selectedId === null) return;
    var selectedItem = composite.items.find(function (item) {
      return item.id === selectedId;
    });
    if (selectedItem) return;

    if (composite.currentId) {
      setSelectedId(composite.currentId);
    }
  }, [selectedId, composite.items, composite.currentId]);
  return _objectSpread2$2(_objectSpread2$2({}, composite), {}, {
    selectedId: selectedId,
    panels: panels.items,
    manual: manual,
    select: select,
    setSelectedId: setSelectedId,
    registerPanel: react.useCallback(function (panel) {
      return panels.registerItem(panel);
    }, [panels.registerItem]),
    unregisterPanel: react.useCallback(function (id) {
      return panels.unregisterItem(id);
    }, [panels.unregisterItem])
  });
}

// Automatically generated
var TOOLTIP_STATE_KEYS = ["baseId", "unstable_idCountRef", "visible", "animated", "animating", "setBaseId", "show", "hide", "toggle", "setVisible", "setAnimated", "stopAnimation", "unstable_disclosureRef", "unstable_referenceRef", "unstable_popoverRef", "unstable_arrowRef", "unstable_popoverStyles", "unstable_arrowStyles", "unstable_originalPlacement", "unstable_update", "placement", "place", "unstable_timeout", "unstable_setTimeout"];
var TOOLTIP_KEYS = [].concat(TOOLTIP_STATE_KEYS, ["unstable_portal"]);
var TOOLTIP_ARROW_KEYS = TOOLTIP_STATE_KEYS;
var TOOLTIP_REFERENCE_KEYS = TOOLTIP_ARROW_KEYS;

var globalState = {
  currentTooltipId: null,
  listeners: new Set(),
  subscribe: function subscribe(listener) {
    var _this = this;

    this.listeners.add(listener);
    return function () {
      _this.listeners.delete(listener);
    };
  },
  show: function show(id) {
    this.currentTooltipId = id;
    this.listeners.forEach(function (listener) {
      return listener(id);
    });
  },
  hide: function hide(id) {
    if (this.currentTooltipId === id) {
      this.currentTooltipId = null;
      this.listeners.forEach(function (listener) {
        return listener(null);
      });
    }
  }
};

function globallyHideTooltipOnEscape(event) {
  if (event.defaultPrevented) return;

  if (event.key === "Escape") {
    globalState.show(null);
  }
}

var useTooltip = createHook$1({
  name: "Tooltip",
  compose: useDisclosureContent,
  keys: TOOLTIP_KEYS,
  useOptions: function useOptions(_ref) {
    var _ref$unstable_portal = _ref.unstable_portal,
        unstable_portal = _ref$unstable_portal === void 0 ? true : _ref$unstable_portal,
        options = _objectWithoutPropertiesLoose$3(_ref, ["unstable_portal"]);

    return _objectSpread2$2({
      unstable_portal: unstable_portal
    }, options);
  },
  useProps: function useProps(options, _ref2) {
    var htmlRef = _ref2.ref,
        htmlStyle = _ref2.style,
        htmlWrapElement = _ref2.wrapElement,
        htmlProps = _objectWithoutPropertiesLoose$3(_ref2, ["ref", "style", "wrapElement"]);

    react.useEffect(function () {
      var _options$unstable_pop;

      var document = getDocument((_options$unstable_pop = options.unstable_popoverRef) === null || _options$unstable_pop === void 0 ? void 0 : _options$unstable_pop.current);
      document.addEventListener("keydown", globallyHideTooltipOnEscape);
    }, []);
    var wrapElement = react.useCallback(function (element) {
      if (options.unstable_portal) {
        element = /*#__PURE__*/react.createElement(Portal$1, null, element);
      }

      if (htmlWrapElement) {
        return htmlWrapElement(element);
      }

      return element;
    }, [options.unstable_portal, htmlWrapElement]);
    return _objectSpread2$2({
      ref: useForkRef(options.unstable_popoverRef, htmlRef),
      role: "tooltip",
      style: _objectSpread2$2(_objectSpread2$2({}, options.unstable_popoverStyles), {}, {
        pointerEvents: "none"
      }, htmlStyle),
      wrapElement: wrapElement
    }, htmlProps);
  }
});
createComponent$1({
  as: "div",
  memo: true,
  useHook: useTooltip
});

var useTooltipArrow = createHook$1({
  name: "TooltipArrow",
  compose: usePopoverArrow,
  keys: TOOLTIP_ARROW_KEYS,
  useOptions: function useOptions(_ref) {
    var _ref$size = _ref.size,
        size = _ref$size === void 0 ? 16 : _ref$size,
        options = _objectWithoutPropertiesLoose$3(_ref, ["size"]);

    return _objectSpread2$2({
      size: size
    }, options);
  }
});
createComponent$1({
  as: "div",
  memo: true,
  useHook: useTooltipArrow
});

var useTooltipReference = createHook$1({
  name: "TooltipReference",
  compose: useRole,
  keys: TOOLTIP_REFERENCE_KEYS,
  useProps: function useProps(options, _ref) {
    var htmlRef = _ref.ref,
        htmlOnFocus = _ref.onFocus,
        htmlOnBlur = _ref.onBlur,
        htmlOnMouseEnter = _ref.onMouseEnter,
        htmlOnMouseLeave = _ref.onMouseLeave,
        htmlProps = _objectWithoutPropertiesLoose$3(_ref, ["ref", "onFocus", "onBlur", "onMouseEnter", "onMouseLeave"]);

    var onFocusRef = useLiveRef(htmlOnFocus);
    var onBlurRef = useLiveRef(htmlOnBlur);
    var onMouseEnterRef = useLiveRef(htmlOnMouseEnter);
    var onMouseLeaveRef = useLiveRef(htmlOnMouseLeave);
    var onFocus = react.useCallback(function (event) {
      var _onFocusRef$current, _options$show;

      (_onFocusRef$current = onFocusRef.current) === null || _onFocusRef$current === void 0 ? void 0 : _onFocusRef$current.call(onFocusRef, event);
      if (event.defaultPrevented) return;
      (_options$show = options.show) === null || _options$show === void 0 ? void 0 : _options$show.call(options);
    }, [options.show]);
    var onBlur = react.useCallback(function (event) {
      var _onBlurRef$current, _options$hide;

      (_onBlurRef$current = onBlurRef.current) === null || _onBlurRef$current === void 0 ? void 0 : _onBlurRef$current.call(onBlurRef, event);
      if (event.defaultPrevented) return;
      (_options$hide = options.hide) === null || _options$hide === void 0 ? void 0 : _options$hide.call(options);
    }, [options.hide]);
    var onMouseEnter = react.useCallback(function (event) {
      var _onMouseEnterRef$curr, _options$show2;

      (_onMouseEnterRef$curr = onMouseEnterRef.current) === null || _onMouseEnterRef$curr === void 0 ? void 0 : _onMouseEnterRef$curr.call(onMouseEnterRef, event);
      if (event.defaultPrevented) return;
      (_options$show2 = options.show) === null || _options$show2 === void 0 ? void 0 : _options$show2.call(options);
    }, [options.show]);
    var onMouseLeave = react.useCallback(function (event) {
      var _onMouseLeaveRef$curr, _options$hide2;

      (_onMouseLeaveRef$curr = onMouseLeaveRef.current) === null || _onMouseLeaveRef$curr === void 0 ? void 0 : _onMouseLeaveRef$curr.call(onMouseLeaveRef, event);
      if (event.defaultPrevented) return;
      (_options$hide2 = options.hide) === null || _options$hide2 === void 0 ? void 0 : _options$hide2.call(options);
    }, [options.hide]);
    return _objectSpread2$2({
      ref: useForkRef(options.unstable_referenceRef, htmlRef),
      tabIndex: 0,
      onFocus: onFocus,
      onBlur: onBlur,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave,
      "aria-describedby": options.baseId
    }, htmlProps);
  }
});
createComponent$1({
  as: "div",
  useHook: useTooltipReference
});

function useTooltipState$1(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }

  var _useSealedState = useSealedState(initialState),
      _useSealedState$place = _useSealedState.placement,
      placement = _useSealedState$place === void 0 ? "top" : _useSealedState$place,
      _useSealedState$unsta = _useSealedState.unstable_timeout,
      initialTimeout = _useSealedState$unsta === void 0 ? 0 : _useSealedState$unsta,
      sealed = _objectWithoutPropertiesLoose$3(_useSealedState, ["placement", "unstable_timeout"]);

  var _React$useState = react.useState(initialTimeout),
      timeout = _React$useState[0],
      setTimeout = _React$useState[1];

  var showTimeout = react.useRef(null);
  var hideTimeout = react.useRef(null);

  var _usePopoverState = usePopoverState$1(_objectSpread2$2(_objectSpread2$2({}, sealed), {}, {
    placement: placement
  }));
      _usePopoverState.modal;
      _usePopoverState.setModal;
      var popover = _objectWithoutPropertiesLoose$3(_usePopoverState, ["modal", "setModal"]);

  var clearTimeouts = react.useCallback(function () {
    if (showTimeout.current !== null) {
      window.clearTimeout(showTimeout.current);
    }

    if (hideTimeout.current !== null) {
      window.clearTimeout(hideTimeout.current);
    }
  }, []);
  var hide = react.useCallback(function () {
    clearTimeouts();
    popover.hide(); // Let's give some time so people can move from a reference to another
    // and still show tooltips immediately

    hideTimeout.current = window.setTimeout(function () {
      globalState.hide(popover.baseId);
    }, timeout);
  }, [clearTimeouts, popover.hide, timeout, popover.baseId]);
  var show = react.useCallback(function () {
    clearTimeouts();

    if (!timeout || globalState.currentTooltipId) {
      // If there's no timeout or a tooltip visible already, we can show this
      // immediately
      globalState.show(popover.baseId);
      popover.show();
    } else {
      // There may be a reference with focus whose tooltip is still not visible
      // In this case, we want to update it before it gets shown.
      globalState.show(null); // Otherwise, wait a little bit to show the tooltip

      showTimeout.current = window.setTimeout(function () {
        globalState.show(popover.baseId);
        popover.show();
      }, timeout);
    }
  }, [clearTimeouts, timeout, popover.show, popover.baseId]);
  react.useEffect(function () {
    return globalState.subscribe(function (id) {
      if (id !== popover.baseId) {
        clearTimeouts();

        if (popover.visible) {
          // Make sure there will be only one tooltip visible
          popover.hide();
        }
      }
    });
  }, [popover.baseId, clearTimeouts, popover.visible, popover.hide]);
  react.useEffect(function () {
    return function () {
      clearTimeouts();
      globalState.hide(popover.baseId);
    };
  }, [clearTimeouts, popover.baseId]);
  return _objectSpread2$2(_objectSpread2$2({}, popover), {}, {
    hide: hide,
    show: show,
    unstable_timeout: timeout,
    unstable_setTimeout: setTimeout
  });
}

// Automatically generated
var VISUALLY_HIDDEN_KEYS = [];

var useVisuallyHidden = createHook$1({
  name: "VisuallyHidden",
  compose: useRole,
  keys: VISUALLY_HIDDEN_KEYS,
  useProps: function useProps(_, _ref) {
    var htmlStyle = _ref.style,
        htmlProps = _objectWithoutPropertiesLoose$3(_ref, ["style"]);

    return _objectSpread2$2({
      style: _objectSpread2$2({
        border: 0,
        clip: "rect(0 0 0 0)",
        height: "1px",
        margin: "-1px",
        overflow: "hidden",
        padding: 0,
        position: "absolute",
        whiteSpace: "nowrap",
        width: "1px"
      }, htmlStyle)
    }, htmlProps);
  }
});
var VisuallyHidden = createComponent$1({
  as: "span",
  memo: true,
  useHook: useVisuallyHidden
});

/**
 * Provider component that is used by `reakit`'s `Provider` underneath.
 *
 * @example
 * // instead of using
 * import { Provider } from "reakit";
 * // you can use this
 * import { SystemProvider } from "reakit-system";
 * // reakit's Provider has more features, such as ID generation
 * import * as system from "reakit-system-bootstrap";
 *
 * function App() {
 *   return (
 *     <SystemProvider unstable_system={system}>
 *       <div>App</div>
 *     </SystemProvider>
 *   );
 * }
 *
 * @param props
 */
function SystemProvider(_ref) {
  var children = _ref.children,
      system = _ref.unstable_system;
  return /*#__PURE__*/react.createElement(SystemContext.Provider, {
    value: system
  }, children);
}

var defaultSystem = {};
function Provider$1(_ref) {
  var prefix = _ref.unstable_prefix,
      _ref$unstable_system = _ref.unstable_system,
      system = _ref$unstable_system === void 0 ? defaultSystem : _ref$unstable_system,
      children = _ref.children;
  return /*#__PURE__*/react.createElement(unstable_IdProvider, {
    prefix: prefix
  }, /*#__PURE__*/react.createElement(SystemProvider, {
    unstable_system: system
  }, children));
}

var _templateObject$14, _templateObject2$O, _templateObject3$M, _templateObject4$K, _templateObject5$E, _templateObject6$D, _templateObject7$A, _templateObject8$z, _templateObject9$r, _templateObject10$q, _templateObject11$k, _templateObject12$h, _templateObject13$d, _templateObject14$c, _templateObject15$c, _templateObject16$c, _templateObject17$c, _templateObject18$a, _templateObject19$9, _templateObject20$9, _templateObject21$8, _templateObject22$6, _templateObject23$5;
getDefaultPalette({});
var Button$2 = function Button(styleProps) {
  return css(_templateObject$14 || (_templateObject$14 = _taggedTemplateLiteralLoose(["\n  align-items: center;\n  background-color: ", ";\n  border-radius: ", ";\n  box-shadow: 0 1px 3px 0px rgba(0, 0, 0, 0.05);\n  color: ", ";\n  fill: ", ";\n  cursor: pointer;\n  display: inline-flex;\n  font-weight: ", ";\n  min-height: 2.75rem;\n  justify-content: center;\n  padding: 0 ", "rem;\n  text-decoration: none;\n  hyphens: auto;\n  transition: box-shadow 0.1s ease-in-out 0s, border 0.1s, background-color 0.1s;\n\n  ", "\n\n  & {\n    ", ";\n  }\n\n  &[disabled],\n  &[aria-disabled=\"true\"] {\n    ", ";\n  }\n\n  ", "\n  ", ";\n  ", ";\n  ", ";\n\n  ", ";\n  ", ";\n  ", ";\n"])), palette(styleProps.palette)(styleProps), borderRadius('default')(styleProps), palette(styleProps.palette + "Inverted")(styleProps), palette(styleProps.palette + "Inverted")(styleProps), fontWeight('semibold')(styleProps), space(4)(styleProps), styleProps.palette === 'default' && css$1(_templateObject2$O || (_templateObject2$O = _taggedTemplateLiteralLoose(["\n      border: 1px solid ", ";\n    "])), palette('white900', {
    dark: 'gray600'
  })(styleProps)), theme(styleProps.themeKey, "styles.base")(styleProps), getDisabledProperties(styleProps), styleProps.size && getSizeProperties$1(styleProps), styleProps.isLoading && getLoadingProperties(styleProps), styleProps.isStatic && getStaticProperties(styleProps), isInteractive(styleProps) && getInteractiveProperties(styleProps), styleProps.variant === 'outlined' && getOutlinedProperties(styleProps), styleProps.variant === 'link' && getLinkProperties(styleProps), styleProps.variant === 'ghost' && getGhostProperties(styleProps));
};
var ButtonIcon = function ButtonIcon(styleProps) {
  return css(_templateObject3$M || (_templateObject3$M = _taggedTemplateLiteralLoose(["\n  ", ";\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), styleProps.isBefore && css$1(_templateObject4$K || (_templateObject4$K = _taggedTemplateLiteralLoose(["\n      margin-left: -", "em;\n      margin-right: ", "em;\n\n      & {\n        ", ";\n      }\n    "])), space(1)(styleProps), space(2)(styleProps), theme(styleProps.themeKey, "styles.before")(styleProps)), styleProps.isAfter && css$1(_templateObject5$E || (_templateObject5$E = _taggedTemplateLiteralLoose(["\n      margin-left: ", "em;\n      margin-right: -", "em;\n\n      & {\n        ", ";\n      }\n    "])), space(2)(styleProps), space(1)(styleProps), theme(styleProps.themeKey, "styles.after")(styleProps)), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var ButtonSpinnerWrapper = function ButtonSpinnerWrapper(styleProps) {
  return css(_templateObject6$D || (_templateObject6$D = _taggedTemplateLiteralLoose(["\n  position: absolute;\n  align-items: center;\n  justify-content: center;\n\n  & + .bb-Text {\n    opacity: 0;\n  }\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var ButtonSpinner = function ButtonSpinner(styleProps) {
  return css(_templateObject7$A || (_templateObject7$A = _taggedTemplateLiteralLoose(["\n  && {\n    font-size: 1.25em;\n  }\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var ButtonClose$1 = function ButtonClose(styleProps) {
  return css(_templateObject8$z || (_templateObject8$z = _taggedTemplateLiteralLoose(["\n  && {\n    min-height: unset;\n    padding: ", "em;\n  }\n\n  & {\n    ", ";\n  }\n"])), space(2)(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var isInteractive = function isInteractive(styleProps) {
  return !styleProps.isStatic && !styleProps.isLoading && !styleProps.disabled && styleProps.variant !== 'link';
};
var getDisabledProperties = function getDisabledProperties(styleProps) {
  return css$1(_templateObject9$r || (_templateObject9$r = _taggedTemplateLiteralLoose(["\n  & {\n    cursor: not-allowed;\n    opacity: ", ";\n    outline: unset;\n    pointer-events: unset;\n  }\n  & {\n    ", ";\n  }\n"])), styleProps.colorMode === 'dark' ? '0.5' : '0.7', theme(styleProps.themeKey, "styles.disabled")(styleProps));
};
var getSizeProperties$1 = function getSizeProperties(styleProps) {
  var styles = {
    small: css$1(_templateObject10$q || (_templateObject10$q = _taggedTemplateLiteralLoose(["\n      & {\n        font-size: ", "em;\n        min-height: 2rem;\n        padding: 0 ", "rem;\n      }\n      & {\n        ", ";\n      }\n    "])), fontSize('100')(styleProps), space(3)(styleProps), theme(styleProps.themeKey, "styles.sizes.small")(styleProps)),
    default: css$1(_templateObject11$k || (_templateObject11$k = _taggedTemplateLiteralLoose(["\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "styles.sizes.default")(styleProps)),
    medium: css$1(_templateObject12$h || (_templateObject12$h = _taggedTemplateLiteralLoose(["\n      & {\n        min-height: 3rem;\n        padding: 0 ", "rem;\n      }\n      & {\n        ", ";\n      }\n    "])), space(5)(styleProps), theme(styleProps.themeKey, "styles.sizes.medium")(styleProps)),
    large: css$1(_templateObject13$d || (_templateObject13$d = _taggedTemplateLiteralLoose(["\n      & {\n        font-size: ", "em;\n        min-height: 3.25rem;\n        padding: 0 ", "rem;\n      }\n      & {\n        ", ";\n      }\n    "])), fontSize('300')(styleProps), space(6)(styleProps), theme(styleProps.themeKey, "styles.sizes.large")(styleProps))
  };
  return styles[styleProps.size];
};
var getLoadingProperties = function getLoadingProperties(styleProps) {
  return css$1(_templateObject14$c || (_templateObject14$c = _taggedTemplateLiteralLoose(["\n  & {\n    cursor: not-allowed;\n    position: relative;\n\n    &:focus {\n      box-shadow: unset !important;\n      outline: unset !important;\n    }\n  }\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.loading")(styleProps));
};
var getStaticProperties = function getStaticProperties(styleProps) {
  return css$1(_templateObject15$c || (_templateObject15$c = _taggedTemplateLiteralLoose(["\n  & {\n    cursor: default;\n    outline: unset;\n\n    &:focus {\n      box-shadow: unset !important;\n      outline: unset !important;\n    }\n  }\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.static")(styleProps));
};
var getInteractiveProperties = function getInteractiveProperties(styleProps) {
  return css$1(_templateObject16$c || (_templateObject16$c = _taggedTemplateLiteralLoose(["\n  &:focus {\n    outline: unset;\n    z-index: 2;\n    box-shadow: ", "\n        0px 0px 0px 1px,\n      ", "\n        0px 0px 0px 3px;\n\n    ", ";\n\n    && {\n      ", ";\n    }\n  }\n\n  ", ";\n\n  ", ";\n"])), palette(styleProps.palette === 'default' ? 'gray200' : styleProps.palette, {
    dark: styleProps.palette === 'default' ? 'gray700' : styleProps.palette
  })(styleProps), palette(styleProps.palette === 'default' ? 'gray100' : styleProps.palette + "200", {
    dark: styleProps.palette === 'default' ? 'gray600' : styleProps.palette + "200"
  })(styleProps), styleProps.palette === 'default' && css$1(_templateObject17$c || (_templateObject17$c = _taggedTemplateLiteralLoose(["\n      border-color: transparent;\n    "]))), theme(styleProps.themeKey, "styles.focus")(styleProps), styleProps.variant !== 'link' && css$1(_templateObject18$a || (_templateObject18$a = _taggedTemplateLiteralLoose(["\n    &:hover {\n      background-color: ", ";\n\n      & {\n        ", ";\n      }\n    }\n  "])), palette((styleProps.palette === 'default' ? 'white' : styleProps.palette) + "600", {
    dark: "" + (styleProps.palette === 'default' ? 'black100' : styleProps.palette + "600")
  })(styleProps), theme(styleProps.themeKey, "styles.hover")(styleProps)), styleProps.variant !== 'link' && css$1(_templateObject19$9 || (_templateObject19$9 = _taggedTemplateLiteralLoose(["\n    &:hover:active {\n      background-color: ", ";\n\n      & {\n        ", ";\n      }\n    }\n  "])), palette(styleProps.palette === 'default' ? 'white800' : styleProps.palette + "700", {
    dark: "" + (styleProps.palette === 'default' ? 'black200' : styleProps.palette + "700")
  })(styleProps), theme(styleProps.themeKey, "styles.hoveractive")(styleProps)));
};
var getLinkProperties = function getLinkProperties(styleProps) {
  return css$1(_templateObject20$9 || (_templateObject20$9 = _taggedTemplateLiteralLoose(["\n  & {\n    border: 0;\n    background: unset;\n    color: ", ";\n    fill: ", ";\n    box-shadow: unset;\n\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n\n  & {\n    ", ";\n  }\n"])), styleProps.palette === 'default' ? palette('text')(styleProps) : palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps), styleProps.palette === 'default' ? palette('text')(styleProps) : palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps), theme(styleProps.themeKey, "styles.link")(styleProps));
};
var getOutlinedProperties = function getOutlinedProperties(styleProps) {
  return css$1(_templateObject21$8 || (_templateObject21$8 = _taggedTemplateLiteralLoose(["\n  & {\n    background-color: ", ";\n    border: 1px solid ", ";\n    color: ", ";\n    fill: ", ";\n    box-shadow: unset;\n\n    ", ";\n  }\n  & {\n    ", ";\n  }\n"])), palette('default')(styleProps), palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps), palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps), palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps), isInteractive(styleProps) && css$1(_templateObject22$6 || (_templateObject22$6 = _taggedTemplateLiteralLoose(["\n      &:hover {\n        border-color: ", ";\n        background-color: ", ";\n      }\n\n      &:hover:active {\n        border-color: ", ";\n        background-color: ", ";\n      }\n    "])), palette(styleProps.palette)(styleProps), palette(styleProps.palette + "Tint", {
    dark: styleProps.palette + "Shade"
  })(styleProps), palette(styleProps.palette)(styleProps), palette(styleProps.palette + "100", {
    dark: styleProps.palette + "900"
  })(styleProps)), theme(styleProps.themeKey, "styles.outlined")(styleProps));
};
var getGhostProperties = function getGhostProperties(styleProps) {
  return css$1(_templateObject23$5 || (_templateObject23$5 = _taggedTemplateLiteralLoose(["\n  & {\n    background-color: unset;\n    border: unset;\n    color: ", ";\n    fill: ", ";\n    box-shadow: unset;\n\n    &:hover {\n      background-color: rgba(0, 0, 0, 0.05);\n    }\n    &:hover:active {\n      background-color: rgba(0, 0, 0, 0.1);\n    }\n  }\n  & {\n    ", ";\n  }\n"])), styleProps.palette === 'default' ? palette('defaultInverted')(styleProps) : palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps), styleProps.palette === 'default' ? palette('defaultInverted')(styleProps) : palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps), theme(styleProps.themeKey, "styles.ghost")(styleProps));
};

var _templateObject$13, _templateObject2$N, _templateObject3$L, _templateObject4$J, _templateObject5$D, _templateObject6$C, _templateObject7$z, _templateObject8$y;
var FLEX_HORIZONTAL_ALIGN_MAP$1 = {
  left: 'flex-start',
  center: 'center',
  right: 'flex-end'
};
var FLEX_VERTICAL_ALIGN_MAP$1 = {
  top: 'flex-start',
  center: 'center',
  bottom: 'flex-end'
};
var style = function style(styleProps) {
  return css(_templateObject$13 || (_templateObject$13 = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n\n  ", ";\n\n  ", ";\n"])), styleProps.style, getAlignmentAttributes(styleProps), styleProps.altitude && css$1(_templateObject2$N || (_templateObject2$N = _taggedTemplateLiteralLoose(["\n      & {\n        ", " !important;\n      }\n    "])), altitude(styleProps.altitude)(styleProps)));
};
var Box$1 = function Box(styleProps) {
  return css(_templateObject3$L || (_templateObject3$L = _taggedTemplateLiteralLoose(["\n  margin: unset;\n  padding: unset;\n  border: unset;\n  background: unset;\n  font: unset;\n  font-family: inherit;\n  font-size: 100%;\n  box-sizing: border-box;\n\n  &:focus:not(:focus-visible) {\n    outline: none;\n  }\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, 'styles.base')(styleProps));
};
function getAlignmentAttributes(styleProps) {
  return css$1(_templateObject4$J || (_templateObject4$J = _taggedTemplateLiteralLoose(["\n    ", "\n  "])), (styleProps.alignY || styleProps.alignX) && css$1(_templateObject5$D || (_templateObject5$D = _taggedTemplateLiteralLoose(["\n      display: flex;\n\n      ", "\n\n      ", "\n\n      ", "\n    "])), !styleProps.display && css$1(_templateObject6$C || (_templateObject6$C = _taggedTemplateLiteralLoose(["\n          flex-direction: column;\n        "]))), styleProps.alignY && css$1(_templateObject7$z || (_templateObject7$z = _taggedTemplateLiteralLoose(["\n          justify-content: ", ";\n        "])), FLEX_VERTICAL_ALIGN_MAP$1[styleProps.alignY]), styleProps.alignX && css$1(_templateObject8$y || (_templateObject8$y = _taggedTemplateLiteralLoose(["\n          align-items: ", ";\n        "])), FLEX_HORIZONTAL_ALIGN_MAP$1[styleProps.alignX])));
}

var useProps$1Z = createHook(function (_props, _ref) {
  var disableCSSProps = _ref.disableCSSProps,
      themeKey = _ref.themeKey;
  var props = _props;
  var _props2 = props,
      use = _props2.use;

  if (use && typeof use !== 'string' && use.useProps) {
    var newProps = use.useProps(_objectSpread2$3(_objectSpread2$3({}, props), {}, {
      use: undefined
    }));
    props = _objectSpread2$3(_objectSpread2$3({}, props), newProps);
  } // Convert CSS props to an object.
  // Example input:
  // props = { color: 'red', backgroundColor: 'blue', isEnabled: true }
  //
  // Example output:
  // style = { color: 'red', backgroundColor: 'blue' }


  var style$1 = useStyle(props, {
    disableCSSProps: disableCSSProps
  }); // Append the styles from above as a className on the DOM element (with precedence).

  var className = useClassName({
    style: style,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      style: style$1
    }),
    themeKey: themeKey,
    prevClassName: props.className
  }); // Append the Box styles as a className on the DOM element.

  className = useClassName({
    style: Box$1,
    styleProps: props,
    prevClassName: className,
    themeKey: themeKey
  }); // Pick out and invalid HTML props & omit the CSS props.

  var htmlProps = omitCSSProps(pickHTMLProps(_objectSpread2$3(_objectSpread2$3({}, props), {}, {
    className: className
  }))); // const htmlProps = { ...props, className };

  if (props.elementRef) {
    // @ts-ignore
    htmlProps.ref = mergeRefs(props.elementRef, props.ref);
  }

  if (props.wrapElement) {
    // @ts-ignore
    htmlProps.wrapElement = props.wrapElement;
  }

  return _objectSpread2$3({}, htmlProps);
}, {
  themeKey: 'Box'
});
var Box = createComponent(function (props) {
  var boxProps = useProps$1Z(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: boxProps
  });
}, {
  attach: {
    displayName: 'Box',
    useProps: useProps$1Z
  },
  themeKey: 'Box'
});

var _templateObject$12, _templateObject2$M, _templateObject3$K, _templateObject4$I, _templateObject5$C, _templateObject6$B, _templateObject7$y;
var FLEX_HORIZONTAL_ALIGN_MAP = {
  left: 'flex-start',
  center: 'center',
  right: 'flex-end'
};
var FLEX_VERTICAL_ALIGN_MAP = {
  top: 'flex-start',
  center: 'center',
  bottom: 'flex-end'
};
var Flex$1 = function Flex(styleProps) {
  return css(_templateObject$12 || (_templateObject$12 = _taggedTemplateLiteralLoose(["\n  display: flex;\n\n  ", "\n\n  & {\n    ", ";\n  }\n"])), getFlexAlignmentAttributes(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
function getFlexAlignmentAttributes(styleProps) {
  return css$1(_templateObject2$M || (_templateObject2$M = _taggedTemplateLiteralLoose(["\n    && {\n      ", "\n    }\n  "])), (styleProps.alignY || styleProps.alignX) && css$1(_templateObject3$K || (_templateObject3$K = _taggedTemplateLiteralLoose(["\n        flex-direction: unset;\n\n        ", "\n\n        ", "\n      "])), styleProps.alignY && css$1(_templateObject4$I || (_templateObject4$I = _taggedTemplateLiteralLoose(["\n          align-items: ", ";\n          ", "\n        "])), FLEX_VERTICAL_ALIGN_MAP[styleProps.alignY], !styleProps.alignX && css$1(_templateObject5$C || (_templateObject5$C = _taggedTemplateLiteralLoose(["\n            justify-content: unset;\n          "])))), styleProps.alignX && css$1(_templateObject6$B || (_templateObject6$B = _taggedTemplateLiteralLoose(["\n          justify-content: ", ";\n          ", "\n        "])), FLEX_HORIZONTAL_ALIGN_MAP[styleProps.alignX], !styleProps.alignY && css$1(_templateObject7$y || (_templateObject7$y = _taggedTemplateLiteralLoose(["\n            align-items: unset;\n          "]))))));
}

var useProps$1Y = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: Flex$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Flex'
});
var Flex = createComponent(function (props) {
  var flexProps = useProps$1Y(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: flexProps
  });
}, {
  attach: {
    useProps: useProps$1Y,
    displayName: 'Flex'
  },
  themeKey: 'Flex'
});

var _templateObject$11;
var Icon$1 = function Icon(styleProps) {
  return css(_templateObject$11 || (_templateObject$11 = _taggedTemplateLiteralLoose(["\n  fill: ", ";\n  position: relative;\n  height: 1em;\n  width: 1em;\n\n  & {\n    ", ";\n  }\n"])), styleProps.color ? palette(styleProps.color)(styleProps) : 'inherit', theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$1X = createHook(function (props, _ref) {
  var _theme$Icon$iconNames, _theme$Icon, _theme$Icon$iconNames2, _theme$Icon$icons, _theme$Icon2;

  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: Icon$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });

  var _useTheme = useTheme(),
      theme = _useTheme.theme; // @ts-ignore


  var icon = (_theme$Icon$iconNames = theme === null || theme === void 0 ? void 0 : (_theme$Icon = theme.Icon) === null || _theme$Icon === void 0 ? void 0 : (_theme$Icon$iconNames2 = _theme$Icon.iconNames) === null || _theme$Icon$iconNames2 === void 0 ? void 0 : _theme$Icon$iconNames2[props.icon]) !== null && _theme$Icon$iconNames !== void 0 ? _theme$Icon$iconNames : props.icon;
  var icons = (_theme$Icon$icons = theme === null || theme === void 0 ? void 0 : (_theme$Icon2 = theme.Icon) === null || _theme$Icon2 === void 0 ? void 0 : _theme$Icon2.icons) !== null && _theme$Icon$icons !== void 0 ? _theme$Icon$icons : {};
  var iconInfo = icons[icon];

  if (props.type) {
    // @ts-ignore
    var parsedIcons = parseIcons([props.icon], {
      type: props.type
    });
    iconInfo = Object.entries(parsedIcons)[0][1];
  } else if (typeof props.icon === 'object') {
    iconInfo = props.icon;
  }

  var _ref2 = iconInfo || {},
      _ref2$viewBoxWidth = _ref2.viewBoxWidth,
      viewBoxWidth = _ref2$viewBoxWidth === void 0 ? 0 : _ref2$viewBoxWidth,
      _ref2$viewBoxHeight = _ref2.viewBoxHeight,
      viewBoxHeight = _ref2$viewBoxHeight === void 0 ? 0 : _ref2$viewBoxHeight,
      _ref2$paths = _ref2.paths,
      paths = _ref2$paths === void 0 ? [] : _ref2$paths;

  return _objectSpread2$3(_objectSpread2$3({
    role: 'img',
    viewBox: "0 0 " + viewBoxWidth + " " + viewBoxHeight,
    'aria-hidden': !props['aria-label'] && !props.label
  }, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(react.Fragment, null, props.label && /*#__PURE__*/react.createElement("title", null, props.label), paths.map(function (path) {
      return /*#__PURE__*/react.createElement("path", {
        key: path,
        d: path,
        fill: "currentColor",
        fillRule: "evenodd"
      });
    }))
  });
}, {
  themeKey: 'Icon'
});
var Icon = createComponent(function (props) {
  var iconProps = useProps$1X(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: iconProps
  });
}, {
  attach: {
    useProps: useProps$1X,
    displayName: 'Icon'
  },
  defaultProps: {
    use: 'svg'
  },
  themeKey: 'Icon'
});

var _templateObject$10, _templateObject2$L, _templateObject3$J;
var Text$2 = function Text(styleProps) {
  return css(_templateObject$10 || (_templateObject$10 = _taggedTemplateLiteralLoose(["\n  abbr& {\n    border-bottom: 1px dotted;\n    cursor: help;\n    text-decoration: none;\n  }\n\n  code& {\n    font-family: monospace;\n  }\n\n  i& {\n    font-style: italic;\n  }\n\n  kbd& {\n    background: #454d5d;\n    border-radius: 0.1rem;\n    color: #fff;\n    fill: #fff;\n    padding: 0.1rem 0.2rem;\n  }\n\n  mark& {\n    background: #ffe9b3;\n    border-radius: 0.1rem;\n    padding: 0.1rem 0.2rem;\n  }\n\n  strong& {\n    font-weight: bold;\n  }\n\n  sub&,\n  sup& {\n    font-size: 0.8em;\n    vertical-align: baseline;\n  }\n\n  ins&,\n  u& {\n    text-decoration-skip: ink edges;\n  }\n\n  i&,\n  cite&,\n  var&,\n  em& {\n    font-style: italic;\n  }\n\n  kbd&,\n  pre&,\n  samp& {\n    font-family: 'SF Mono', 'Segoe UI Mono', 'Roboto Mono', Menlo, Courier, monospace;\n  }\n\n  & .bb-Icon {\n    vertical-align: -0.125em;\n  }\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var TextInline$1 = function TextInline(styleProps) {
  return css(_templateObject2$L || (_templateObject2$L = _taggedTemplateLiteralLoose(["\n  ", ";\n\n  line-height: ", ";\n"])), Text$2(styleProps), lineHeight('none')(styleProps));
};
var TextBlock$1 = function TextBlock(styleProps) {
  return css(_templateObject3$J || (_templateObject3$J = _taggedTemplateLiteralLoose(["\n  ", ";\n\n  display: block;\n  ", ";\n"])), Text$2(styleProps), getCapsizeStyles({
    lineHeight: 'default'
  })(styleProps));
};

var useProps$1W = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: Text$2,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Text'
});
var Text$1 = createComponent(function (props) {
  var textProps = useProps$1W(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$1W,
    displayName: 'Text'
  },
  defaultProps: {
    use: 'span'
  },
  themeKey: 'Text'
});

var useProps$1V = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: TextBlock$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Text.Block'
});
var TextBlock = createComponent(function (props) {
  var textBlockProps = useProps$1V(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textBlockProps
  });
}, {
  attach: {
    useProps: useProps$1V,
    displayName: 'Text.Block'
  },
  defaultProps: {
    use: 'span'
  },
  themeKey: 'Text.Block'
});

var useProps$1U = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: TextInline$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Text.Inline'
});
var TextInline = createComponent(function (props) {
  var textInlineProps = useProps$1U(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textInlineProps
  });
}, {
  attach: {
    useProps: useProps$1U,
    displayName: 'Text.Inline'
  },
  defaultProps: {
    use: 'span'
  },
  themeKey: 'Text.Inline'
});

var Text = Object.assign(Text$1, {
  Block: TextBlock,
  Inline: TextInline
});

var _templateObject$$, _templateObject2$K, _templateObject3$I, _templateObject4$H, _templateObject5$B, _templateObject6$A, _templateObject7$x, _templateObject8$x, _templateObject9$q, _templateObject10$p;
var defaultDashArrayValueMax = 325;
var defaultDashOffset = 200;
var progressDashArrayValue = 126;
var SpinnerWrapper = function SpinnerWrapper(styleProps) {
  return css(_templateObject$$ || (_templateObject$$ = _taggedTemplateLiteralLoose(["\n  line-height: ", ";\n  font-size: 20px;\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), lineHeight('none')(styleProps), styleProps.size && getSizeProperties(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var Spinner$1 = function Spinner(styleProps) {
  return css(_templateObject2$K || (_templateObject2$K = _taggedTemplateLiteralLoose(["\n  width: 1em;\n  height: 1em;\n  transform: rotate(-90deg);\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), typeof styleProps.value === 'undefined' && getSpinnerAnimation(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var TrackCircle = function TrackCircle(styleProps) {
  return css(_templateObject3$I || (_templateObject3$I = _taggedTemplateLiteralLoose(["\n  stroke: ", ";\n\n  & {\n    ", ";\n  }\n"])), palette(styleProps.trackColor || styleProps.color + "100", {
    dark: styleProps.trackColor || styleProps.color + "900"
  })(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var LoaderCircle = function LoaderCircle(styleProps) {
  return css(_templateObject4$H || (_templateObject4$H = _taggedTemplateLiteralLoose(["\n  stroke-dasharray: ", ";\n  stroke-dashoffset: ", ";\n  stroke: ", ";\n  transition: stroke-dashoffset 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n\n  & {\n    ", ";\n  }\n"])), typeof styleProps.value === 'number' ? progressDashArrayValue : getDashArrayValue(styleProps), typeof styleProps.value === 'number' ? progressDashArrayValue - styleProps.value / 100 * progressDashArrayValue + "px" : defaultDashOffset + "px", palette(styleProps.color)(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var getDashArrayValue = function getDashArrayValue(styleProps) {
  var percentageString = styleProps.perimeter.split('%')[0];
  var percentage = parseFloat(percentageString);
  var scalar = percentage / 100;
  return defaultDashOffset + scalar * (defaultDashArrayValueMax - defaultDashOffset);
};
var getSizeProperties = function getSizeProperties(styleProps) {
  var sizeProperties = {
    small: css$1(_templateObject5$B || (_templateObject5$B = _taggedTemplateLiteralLoose(["\n      & svg {\n        font-size: 14px;\n        border-width: 2px;\n      }\n\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "styles.sizes.small")(styleProps)),
    default: css$1(_templateObject6$A || (_templateObject6$A = _taggedTemplateLiteralLoose(["\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "styles.sizes.default")(styleProps)),
    medium: css$1(_templateObject7$x || (_templateObject7$x = _taggedTemplateLiteralLoose(["\n      & svg {\n        font-size: 28px;\n      }\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "styles.sizes.medium")(styleProps)),
    large: css$1(_templateObject8$x || (_templateObject8$x = _taggedTemplateLiteralLoose(["\n      & svg {\n        font-size: 36px;\n      }\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "styles.sizes.large")(styleProps))
  };
  return sizeProperties[styleProps.size];
};
var rotate = keyframes(_templateObject9$q || (_templateObject9$q = _taggedTemplateLiteralLoose(["\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n"])));
var getSpinnerAnimation = function getSpinnerAnimation(styleProps) {
  return css$1(_templateObject10$p || (_templateObject10$p = _taggedTemplateLiteralLoose(["\n  animation: ", " ", " infinite linear;\n"])), rotate, styleProps.duration);
};

var useProps$1T = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: SpinnerWrapper,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var spinnerClassName = useClassName({
    style: Spinner$1,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'vector'
  });
  var trackCircleClassName = useClassName({
    style: TrackCircle,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'trackCircle'
  });
  var loaderCircleClassName = useClassName({
    style: LoaderCircle,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'loaderCircle'
  });
  var children = /*#__PURE__*/react.createElement("svg", {
    viewBox: "22 22 44 44",
    className: spinnerClassName
  }, props.hasTrack && /*#__PURE__*/react.createElement("circle", {
    cx: "44",
    cy: "44",
    r: "20",
    fill: "none",
    strokeWidth: "4",
    className: trackCircleClassName
  }), /*#__PURE__*/react.createElement("circle", {
    cx: "44",
    cy: "44",
    r: "20",
    fill: "none",
    strokeWidth: "4",
    className: loaderCircleClassName
  }));
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: children
  });
}, {
  defaultProps: {
    color: 'primary',
    duration: '0.6s',
    perimeter: '40%'
  },
  themeKey: 'Spinner'
});
var Spinner = createComponent(function (props) {
  var spinnerProps = useProps$1T(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: spinnerProps
  });
}, {
  attach: {
    useProps: useProps$1T,
    displayName: 'Spinner'
  },
  themeKey: 'Spinner'
});

var useProps$1S = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var disabled = props.disabled,
      focusable = props.focusable,
      iconAfter = props.iconAfter,
      iconAfterProps = props.iconAfterProps,
      iconBefore = props.iconBefore,
      iconBeforeProps = props.iconBeforeProps,
      spinnerProps = props.spinnerProps,
      unstable_clickOnEnter = props.unstable_clickOnEnter,
      unstable_clickOnSpace = props.unstable_clickOnSpace,
      htmlProps = _objectWithoutPropertiesLoose$4(props, ["disabled", "focusable", "iconAfter", "iconAfterProps", "iconBefore", "iconBeforeProps", "spinnerProps", "unstable_clickOnEnter", "unstable_clickOnSpace"]);

  var buttonProps = useButton({
    disabled: disabled,
    focusable: focusable,
    unstable_clickOnEnter: unstable_clickOnEnter,
    unstable_clickOnSpace: unstable_clickOnSpace
  }, htmlProps);
  htmlProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, htmlProps), buttonProps));
  var className = useClassName({
    style: Button$2,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: htmlProps.className
  });
  var iconBeforeClassName = useClassName({
    style: ButtonIcon,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      isBefore: true
    }),
    themeKey: themeKey,
    themeKeySuffix: 'Icon'
  });
  var iconAfterClassName = useClassName({
    style: ButtonIcon,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      isAfter: true
    }),
    themeKey: themeKey,
    themeKeySuffix: 'Icon'
  });
  var spinnerWrapperClassName = useClassName({
    style: ButtonSpinnerWrapper,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'SpinnerWrapper'
  });
  var spinnerClassName = useClassName({
    style: ButtonSpinner,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Spinner'
  });
  var spinnerColor = props.palette;

  if (props.variant === 'default') {
    spinnerColor = props.palette + "Inverted";
  }

  if (props.palette === 'default') {
    spinnerColor = 'defaultInverted';
  }

  var spinnerTrackColor;

  if (props.variant === 'default') {
    spinnerTrackColor = props.palette + "300";
  }

  if (props.palette === 'default') {
    spinnerColor = 'gray100';
  }

  var children = /*#__PURE__*/react.createElement(react.Fragment, null, props.isLoading && /*#__PURE__*/react.createElement(Flex, {
    className: spinnerWrapperClassName
  }, /*#__PURE__*/react.createElement(Spinner, _extends$1({
    use: Flex,
    className: spinnerClassName,
    color: spinnerColor,
    trackColor: spinnerTrackColor,
    hasTrack: true
  }, spinnerProps))), /*#__PURE__*/react.createElement(ConditionalWrap, {
    condition: props.isLoading,
    wrap: function wrap(children) {
      return /*#__PURE__*/react.createElement(Text, null, children);
    }
  }, /*#__PURE__*/react.createElement(react.Fragment, null, iconBefore && /*#__PURE__*/react.createElement(Icon, _extends$1({
    className: iconBeforeClassName,
    icon: iconBefore
  }, iconBeforeProps)), htmlProps.children, iconAfter && /*#__PURE__*/react.createElement(Icon, _extends$1({
    className: iconAfterClassName,
    icon: iconAfter
  }, iconAfterProps)))));
  return _objectSpread2$3(_objectSpread2$3({}, htmlProps), {}, {
    className: className,
    children: children
  });
}, {
  defaultProps: {
    disabled: false,
    iconAfter: undefined,
    iconBefore: undefined,
    isLoading: false,
    isStatic: false,
    variant: 'default',
    palette: 'default',
    size: 'default',
    type: 'button'
  },
  themeKey: 'Button'
});
var Button$1 = createComponent(function (props) {
  var buttonProps = useProps$1S(props);
  return createElement({
    children: props.children,
    component: Button$3,
    use: props.use,
    htmlProps: buttonProps
  });
}, {
  attach: {
    useProps: useProps$1S,
    displayName: 'Button'
  },
  themeKey: 'Button'
});

var useProps$1R = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var iconProps = props.iconProps,
      label = props.label,
      restProps = _objectWithoutPropertiesLoose$4(props, ["iconProps", "label"]);

  var buttonProps = Button$1.useProps(restProps);
  var className = useClassName({
    style: ButtonClose$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: buttonProps.className
  });
  var children = /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Icon, _extends$1({
    fontSize: "300",
    icon: "close"
  }, iconProps)), /*#__PURE__*/react.createElement(VisuallyHidden, null, label));
  return _objectSpread2$3(_objectSpread2$3({}, buttonProps), {}, {
    className: className,
    children: children
  });
}, {
  defaultProps: {
    label: 'Close',
    variant: 'ghost'
  },
  themeKey: 'Button.Close'
});
var ButtonClose = createComponent(function (props) {
  var buttonCloseProps = useProps$1R(props);
  return createElement({
    children: props.children,
    component: Button$3,
    use: props.use,
    htmlProps: buttonCloseProps
  });
}, {
  attach: {
    useProps: useProps$1R,
    displayName: 'Button.Close'
  },
  themeKey: 'Button.Close'
});

var Button = Object.assign(Button$1, {
  Close: ButtonClose
});

var _templateObject$_, _templateObject2$J, _templateObject3$H, _templateObject4$G, _templateObject5$A, _templateObject6$z, _templateObject7$w, _templateObject8$w, _templateObject9$p, _templateObject10$o, _templateObject11$j;
var Set$2 = function Set(styleProps) {
  return css(_templateObject$_ || (_templateObject$_ = _taggedTemplateLiteralLoose(["\n  display: flex;\n\n  ", ";\n\n  &&& > * {\n    ", ";\n\n    ", ";\n  }\n\n  &&& > *:first-child {\n    ", ";\n  }\n\n  &&& > *:not(:last-child):not(:first-child) {\n    ", ";\n  }\n\n  &&& > *:last-child {\n    ", ";\n  }\n\n  & {\n    ", ";\n  }\n"])), styleProps.orientation === 'vertical' ? css$1(_templateObject2$J || (_templateObject2$J = _taggedTemplateLiteralLoose(["\n          flex-direction: column;\n\n          ", ";\n\n          ", "\n\n          & {\n            ", ";\n          }\n        "])), !styleProps.isFilled && css$1(_templateObject3$H || (_templateObject3$H = _taggedTemplateLiteralLoose(["\n            align-items: flex-start;\n          "]))), getAlignmentAttributes(styleProps), theme(styleProps.themeKey, "styles.vertical")(styleProps)) : css$1(_templateObject4$G || (_templateObject4$G = _taggedTemplateLiteralLoose(["\n          ", ";\n        "])), breakpoint(styleProps.verticalBelow ? "max-" + styleProps.verticalBelow : null, css$1(_templateObject5$A || (_templateObject5$A = _taggedTemplateLiteralLoose(["\n              flex-direction: column;\n\n              ", ";\n\n              ", "\n\n              & {\n                ", ";\n              }\n            "])), !styleProps.isFilled && css$1(_templateObject6$z || (_templateObject6$z = _taggedTemplateLiteralLoose(["\n                align-items: flex-start;\n              "]))), getAlignmentAttributes(styleProps), theme(styleProps.themeKey, "styles.vertical")(styleProps)), {
    else: css$1(_templateObject7$w || (_templateObject7$w = _taggedTemplateLiteralLoose(["\n                flex-wrap: wrap;\n                align-items: center;\n                justify-content: flex-start;\n                margin-left: -", "rem;\n                margin-top: -", "rem;\n\n                ", "\n\n                & {\n                  ", ";\n                }\n              "])), space(styleProps.spacing)(styleProps), space(styleProps.spacing)(styleProps), getFlexAlignmentAttributes(styleProps), theme(styleProps.themeKey, "styles.horizontal")(styleProps))
  })(styleProps)), styleProps.orientation === 'vertical' ? css$1(_templateObject8$w || (_templateObject8$w = _taggedTemplateLiteralLoose(["\n            &:not(:last-child) {\n              margin-bottom: ", "rem;\n            }\n\n            & {\n              ", ";\n            }\n          "])), space(styleProps.spacing)(styleProps), theme(styleProps.themeKey, "styles.child.vertical")(styleProps)) : css$1(_templateObject9$p || (_templateObject9$p = _taggedTemplateLiteralLoose(["\n            ", ";\n          "])), breakpoint(styleProps.verticalBelow ? "max-" + styleProps.verticalBelow : null, css$1(_templateObject10$o || (_templateObject10$o = _taggedTemplateLiteralLoose(["\n                &:not(:last-child) {\n                  margin-bottom: ", "rem;\n                }\n\n                & {\n                  ", ";\n                }\n              "])), space(styleProps.spacing)(styleProps), theme(styleProps.themeKey, "styles.child.vertical")(styleProps)), {
    else: css$1(_templateObject11$j || (_templateObject11$j = _taggedTemplateLiteralLoose(["\n                  margin-left: ", "rem;\n                  margin-top: ", "rem;\n\n                  & {\n                    ", ";\n                  }\n                "])), space(styleProps.spacing)(styleProps), space(styleProps.spacing)(styleProps), theme(styleProps.themeKey, "styles.child.horizontal")(styleProps))
  })(styleProps)), theme(styleProps.themeKey, "styles.child.base")(styleProps), theme(styleProps.themeKey, "styles.child.first")(styleProps), theme(styleProps.themeKey, "styles.child.middle")(styleProps), theme(styleProps.themeKey, "styles.child.last")(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$1Q = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: Set$2,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  defaultProps: {
    isFilled: false,
    orientation: 'horizontal',
    spacing: 'minor-2',
    verticalBelow: undefined
  },
  themeKey: 'Set'
});
var Set$1 = createComponent(function (props) {
  var setProps = useProps$1Q(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: setProps
  });
}, {
  attach: {
    useProps: useProps$1Q,
    displayName: 'Set'
  },
  themeKey: 'Set'
});

var useProps$1P = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var addonButtons = props.addonButtons,
      cancelProps = props.cancelProps,
      cancelText = props.cancelText,
      isLoading = props.isLoading,
      onClickCancel = props.onClickCancel,
      onClickSubmit = props.onClickSubmit,
      overrides = props.overrides,
      palette = props.palette,
      size = props.size,
      submitProps = props.submitProps,
      submitText = props.submitText,
      type = props.type,
      restProps = _objectWithoutPropertiesLoose$4(props, ["addonButtons", "cancelProps", "cancelText", "isLoading", "onClickCancel", "onClickSubmit", "overrides", "palette", "size", "submitProps", "submitText", "type"]);

  var setProps = Set$1.useProps(_objectSpread2$3(_objectSpread2$3({}, restProps), {}, {
    overrides: overrides
  }), {
    themeKey: 'ActionButtons'
  });
  var className = useClassName({
    style: ActionButtons$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: setProps.className
  });
  var children = /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Button, _extends$1({
    onClick: onClickCancel,
    overrides: overrides,
    size: size
  }, cancelProps), cancelText), addonButtons, /*#__PURE__*/react.createElement(Button, _extends$1({
    isLoading: isLoading,
    onClick: onClickSubmit,
    overrides: overrides,
    palette: palette,
    size: size,
    type: type
  }, submitProps), submitText));
  return _objectSpread2$3(_objectSpread2$3({}, setProps), {}, {
    className: className,
    children: children
  });
}, {
  defaultProps: {
    addonButtons: undefined,
    cancelProps: {},
    cancelText: 'Cancel',
    isLoading: false,
    onClickSubmit: undefined,
    onClickCancel: undefined,
    palette: 'primary',
    submitProps: {},
    submitText: 'Submit',
    type: 'submit'
  },
  themeKey: 'ActionButtons'
});
var ActionButtons = createComponent(function (props) {
  var actionButtonsProps = useProps$1P(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: actionButtonsProps
  });
}, {
  attach: {
    useProps: useProps$1P,
    displayName: 'ActionButtons'
  },
  themeKey: 'ActionButtons'
});

var _templateObject$Z, _templateObject2$I, _templateObject3$G, _templateObject4$F, _templateObject5$z, _templateObject6$y, _templateObject7$v, _templateObject8$v, _templateObject9$o, _templateObject10$n, _templateObject11$i, _templateObject12$g, _templateObject13$c, _templateObject14$b, _templateObject15$b, _templateObject16$b, _templateObject17$b, _templateObject18$9, _templateObject19$8, _templateObject20$8, _templateObject21$7, _templateObject22$5, _templateObject23$4, _templateObject24$4, _templateObject25$4, _templateObject26$4, _templateObject27$4, _templateObject28$3, _templateObject29$3;
var Alert$2 = function Alert(styleProps) {
  return css(_templateObject$Z || (_templateObject$Z = _taggedTemplateLiteralLoose(["\n  background-color: ", ";\n  border-radius: ", ";\n  position: relative;\n  overflow: hidden;\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  & {\n    ", ";\n  }\n"])), palette('background', {
    dark: 'gray900'
  })(styleProps), borderRadius('default')(styleProps), styleProps.variant === 'bordered' && css$1(_templateObject2$I || (_templateObject2$I = _taggedTemplateLiteralLoose(["\n      border: 1px solid ", ";\n    "])), palette('white800', {
    dark: 'gray'
  })(styleProps)), styleProps.variant === 'shadowed' && css$1(_templateObject3$G || (_templateObject3$G = _taggedTemplateLiteralLoose(["\n      ", ";\n    "])), altitude('100')(styleProps)), styleProps.variant === 'tint' && css$1(_templateObject4$F || (_templateObject4$F = _taggedTemplateLiteralLoose(["\n      background-color: ", ";\n    "])), palette(styleProps.type + "Tint", {
    dark: styleProps.type + "Shade"
  })(styleProps)), styleProps.variant === 'fill' && getFillAttributes(styleProps), (styleProps.accent === 'top' || styleProps.accent === 'bottom') && css$1(_templateObject5$z || (_templateObject5$z = _taggedTemplateLiteralLoose(["\n      display: block;\n    "]))), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var AlertContent$1 = function AlertContent(styleProps) {
  return css(_templateObject6$y || (_templateObject6$y = _taggedTemplateLiteralLoose(["\n  ", "\n\n  & {\n    ", ";\n  }\n"])), styleProps.isInline && css$1(_templateObject7$v || (_templateObject7$v = _taggedTemplateLiteralLoose(["\n      display: flex;\n\n      & > *:first-child {\n        margin-right: ", "rem;\n      }\n    "])), space(1)(styleProps)), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var AlertWrapper$1 = function AlertWrapper(styleProps) {
  return css(_templateObject8$v || (_templateObject8$v = _taggedTemplateLiteralLoose(["\n  align-items: center;\n  justify-content: space-between;\n  flex: 1;\n  padding: ", "rem ", "rem;\n\n  ", "\n\n  ", "\n  ", "\n  ", "\n\n  & {\n    ", ";\n  }\n"])), space(1, 'major')(styleProps), space(2, 'major')(styleProps), styleProps.isInline && css$1(_templateObject9$o || (_templateObject9$o = _taggedTemplateLiteralLoose(["\n      display: flex;\n\n      & > *:first-child {\n        margin-right: ", "rem;\n      }\n    "])), space(1)(styleProps)), styleProps.accent === true && css$1(_templateObject10$n || (_templateObject10$n = _taggedTemplateLiteralLoose(["\n      margin-left: ", ";\n    "])), styleProps.accentSize), styleProps.accent === 'bottom' && css$1(_templateObject11$i || (_templateObject11$i = _taggedTemplateLiteralLoose(["\n      margin-bottom: ", ";\n    "])), styleProps.accentSize), styleProps.accent === 'top' && css$1(_templateObject12$g || (_templateObject12$g = _taggedTemplateLiteralLoose(["\n      margin-top: ", ";\n    "])), styleProps.accentSize), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var AlertTitle$1 = function AlertTitle(styleProps) {
  return css(_templateObject13$c || (_templateObject13$c = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var AlertDescription$1 = function AlertDescription(styleProps) {
  return css(_templateObject14$b || (_templateObject14$b = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var AlertIconWrapper = function AlertIconWrapper(styleProps) {
  return css(_templateObject15$b || (_templateObject15$b = _taggedTemplateLiteralLoose(["\n  line-height: 0.9;\n  margin-right: ", "rem;\n\n  & {\n    ", ";\n  }\n"])), space(4)(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var AlertCloseButton = function AlertCloseButton(styleProps) {
  return css(_templateObject16$b || (_templateObject16$b = _taggedTemplateLiteralLoose(["\n  && {\n    ", "\n  }\n\n  & {\n    ", ";\n  }\n"])), styleProps.isInline && css$1(_templateObject17$b || (_templateObject17$b = _taggedTemplateLiteralLoose(["\n        padding: 0;\n      "]))), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var AlertAccent$1 = function AlertAccent(styleProps) {
  return css(_templateObject18$9 || (_templateObject18$9 = _taggedTemplateLiteralLoose(["\n  position: absolute;\n  background-color: ", ";\n\n  ", "\n\n  ", "\n\n  ", "\n  ", "\n\n  ", "\n\n  ", "\n\n  & {\n    ", ";\n  }\n"])), palette(styleProps.type)(styleProps), (styleProps.accent === true || styleProps.accent === 'bottom') && css$1(_templateObject19$8 || (_templateObject19$8 = _taggedTemplateLiteralLoose(["\n      bottom: 0;\n    "]))), styleProps.accent === 'top' && css$1(_templateObject20$8 || (_templateObject20$8 = _taggedTemplateLiteralLoose(["\n      top: 0;\n    "]))), (styleProps.accent === true || styleProps.accent === 'left') && css$1(_templateObject21$7 || (_templateObject21$7 = _taggedTemplateLiteralLoose(["\n      height: 100%;\n      width: ", ";\n    "])), styleProps.accentSize), (styleProps.accent === 'top' || styleProps.accent === 'bottom') && css$1(_templateObject22$5 || (_templateObject22$5 = _taggedTemplateLiteralLoose(["\n      width: 100%;\n      height: ", ";\n    "])), styleProps.accentSize), styleProps.isBackground && css$1(_templateObject23$4 || (_templateObject23$4 = _taggedTemplateLiteralLoose(["\n      opacity: 0.3;\n      left: 0;\n    "]))), !styleProps.isBackground && styleProps.countdown && css$1(_templateObject24$4 || (_templateObject24$4 = _taggedTemplateLiteralLoose(["\n      ", " ", ";\n    "])), styleProps.accent === true && css$1(_templateObject25$4 || (_templateObject25$4 = _taggedTemplateLiteralLoose(["\n        animation: ", " ", "ms linear forwards;\n      "])), heightCountdown, styleProps.countdown), (styleProps.accent === 'top' || styleProps.accent === 'bottom') && css$1(_templateObject26$4 || (_templateObject26$4 = _taggedTemplateLiteralLoose(["\n        animation: ", " ", "ms linear forwards;\n      "])), widthCountdown, styleProps.countdown)), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var getFillAttributes = function getFillAttributes(styleProps) {
  return css$1(_templateObject27$4 || (_templateObject27$4 = _taggedTemplateLiteralLoose(["\n  background-color: ", ";\n  color: ", ";\n"])), palette(styleProps.type)(styleProps), palette(styleProps.type + "Inverted")(styleProps));
};
var heightCountdown = keyframes(_templateObject28$3 || (_templateObject28$3 = _taggedTemplateLiteralLoose(["\n  from {\n    height: 100%;\n  }\n\n  to {\n    height: 0%;\n  }\n"])));
var widthCountdown = keyframes(_templateObject29$3 || (_templateObject29$3 = _taggedTemplateLiteralLoose(["\n  from {\n    width: 100%;\n  }\n\n  to {\n    width: 0%;\n  }\n"])));

var AlertContext = react.createContext({});
var useProps$1O = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var accent = props.accent,
      countdown = props.countdown,
      closeButtonProps = props.closeButtonProps,
      closeButtonIconProps = props.closeButtonIconProps,
      hasIcon = props.hasIcon;
      props.iconProps;
      props.isInline;
      var onClickClose = props.onClickClose,
      overrides = props.overrides,
      showCloseButton = props.showCloseButton,
      title = props.title,
      type = props.type,
      variant = props.variant,
      restProps = _objectWithoutPropertiesLoose$4(props, ["accent", "countdown", "closeButtonProps", "closeButtonIconProps", "hasIcon", "iconProps", "isInline", "onClickClose", "overrides", "showCloseButton", "title", "type", "variant"]);

  var flexProps = Flex.useProps(restProps);
  var className = useClassName({
    style: Alert$2,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: flexProps.className
  });
  var alertCloseButtonClassName = useClassName({
    style: AlertCloseButton,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'CloseButton'
  });
  var titleId = useUniqueId();
  var descriptionId = useUniqueId();
  var context = react.useMemo(function () {
    return _objectSpread2$3({
      descriptionId: descriptionId,
      titleId: titleId
    }, props);
  }, [descriptionId, props, titleId]);
  var palette = 'default';

  if (variant === 'fill') {
    palette = type + "Inverted";
  }

  if (variant === 'tint') {
    palette = type;
  }

  var children = /*#__PURE__*/react.createElement(AlertContext.Provider, {
    value: context
  }, accent && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(AlertAccent, {
    overrides: overrides
  }), countdown ? /*#__PURE__*/react.createElement(AlertAccent, {
    overrides: overrides,
    isBackground: true
  }) : null), /*#__PURE__*/react.createElement(AlertWrapper, {
    overrides: overrides
  }, /*#__PURE__*/react.createElement(Flex, {
    alignItems: "center"
  }, hasIcon && /*#__PURE__*/react.createElement(AlertIcon, {
    overrides: overrides
  }), /*#__PURE__*/react.createElement(AlertContent, {
    overrides: overrides
  }, title && /*#__PURE__*/react.createElement(AlertTitle, {
    overrides: overrides
  }, title), /*#__PURE__*/react.createElement(AlertDescription, {
    overrides: overrides
  }, props.children))), showCloseButton && /*#__PURE__*/react.createElement(Flex, null, /*#__PURE__*/react.createElement(Button.Close, _extends$1({
    className: alertCloseButtonClassName,
    onClick: onClickClose,
    palette: palette,
    iconProps: closeButtonIconProps
  }, closeButtonProps)))));
  return _objectSpread2$3(_objectSpread2$3({}, flexProps), {}, {
    'aria-describedby': props.children ? descriptionId : undefined,
    'aria-labelledby': props.title ? titleId : undefined,
    className: className,
    children: children,
    role: 'alert'
  });
}, {
  defaultProps: {
    accentSize: '4px',
    hasIcon: true,
    type: 'info',
    variant: 'shadowed'
  },
  themeKey: 'Alert'
});
var Alert$1 = createComponent(function (props) {
  var alertProps = useProps$1O(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: alertProps
  });
}, {
  attach: {
    useProps: useProps$1O,
    displayName: 'Alert'
  },
  themeKey: 'Alert'
}); /////////////////////////////////////

function AlertIcon(props) {
  var iconProps = props.iconProps,
      restProps = _objectWithoutPropertiesLoose$4(props, ["iconProps"]);

  var context = react.useContext(AlertContext);
  var alertIconWrapperClassName = useClassName({
    style: AlertIconWrapper,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, context), props),
    themeKey: context.themeKey || 'Alert',
    themeKeySuffix: 'IconWrapper'
  });
  var fontSize = '400';

  if (!context.title || context.isInline) {
    fontSize = '200';
  }

  return /*#__PURE__*/react.createElement(Box, _extends$1({
    className: alertIconWrapperClassName
  }, restProps), /*#__PURE__*/react.createElement(Icon, _extends$1({
    "aria-hidden": true,
    color: context.variant === 'fill' ? context.type + "Inverted" : context.type,
    fontSize: fontSize,
    icon: context.type
  }, iconProps)));
} /////////////////////////////////////

function AlertContent(props) {
  var children = props.children,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children"]);

  var context = react.useContext(AlertContext);
  var alertContentClassName = useClassName({
    style: AlertContent$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, context), props),
    themeKey: context.themeKey || 'Alert',
    themeKeySuffix: 'Content'
  });
  return /*#__PURE__*/react.createElement(Box, _extends$1({
    className: alertContentClassName
  }, restProps), children);
} /////////////////////////////////////

function AlertWrapper(props) {
  var children = props.children,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children"]);

  var context = react.useContext(AlertContext);
  var alertWrapperClassName = useClassName({
    style: AlertWrapper$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, context), props),
    themeKey: context.themeKey || 'Alert',
    themeKeySuffix: 'Wrapper'
  });
  return /*#__PURE__*/react.createElement(Flex, _extends$1({
    className: alertWrapperClassName
  }, restProps), children);
} /////////////////////////////////////

function AlertAccent(props) {
  var children = props.children,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children"]);

  var context = react.useContext(AlertContext);
  var alertAccentClassName = useClassName({
    style: AlertAccent$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, context), props),
    themeKey: context.themeKey || 'Alert',
    themeKeySuffix: 'Accent'
  });
  return /*#__PURE__*/react.createElement(Box, _extends$1({
    className: alertAccentClassName
  }, restProps), children);
} /////////////////////////////////////

function AlertTitle(props) {
  var children = props.children,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children"]);

  var context = react.useContext(AlertContext);
  var alertTitleClassName = useClassName({
    style: AlertTitle$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, context), props),
    themeKey: context.themeKey || 'Alert',
    themeKeySuffix: 'Title'
  });
  return /*#__PURE__*/react.createElement(Box, _extends$1({
    className: alertTitleClassName
  }, restProps), /*#__PURE__*/react.createElement(Text, {
    fontWeight: "semibold",
    id: context.titleId
  }, children));
} /////////////////////////////////////

function AlertDescription(props) {
  var children = props.children,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children"]);

  var context = react.useContext(AlertContext);
  var alertDescriptionClassName = useClassName({
    style: AlertDescription$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, context), props),
    themeKey: context.themeKey || 'Alert',
    themeKeySuffix: 'Description'
  });
  return /*#__PURE__*/react.createElement(Box, _extends$1({
    className: alertDescriptionClassName,
    id: context.descriptionId
  }, restProps), children);
}

var Alert = Object.assign(Alert$1, {
  Icon: AlertIcon,
  Content: AlertContent,
  Description: AlertDescription,
  Title: AlertTitle
});

var _templateObject$Y, _templateObject2$H, _templateObject3$F, _templateObject4$E, _templateObject5$y, _templateObject6$x, _templateObject7$u, _templateObject8$u, _templateObject9$n, _templateObject10$m;
var Autosuggest$1 = function Autosuggest(styleProps) {
  return css(_templateObject$Y || (_templateObject$Y = _taggedTemplateLiteralLoose(["\n  position: relative;\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var AutosuggestPopover = function AutosuggestPopover(styleProps) {
  return css(_templateObject2$H || (_templateObject2$H = _taggedTemplateLiteralLoose(["\n  &&& {\n    max-width: 100%;\n    width: 100%;\n    max-height: ", ";\n  }\n\n  & {\n    ", ";\n  }\n"])), styleProps.popoverHeight, theme(styleProps.themeKey, "styles.base")(styleProps));
};
var AutosuggestItem$1 = function AutosuggestItem(styleProps) {
  return css(_templateObject3$F || (_templateObject3$F = _taggedTemplateLiteralLoose(["\n  &&& {\n    font-weight: 300;\n\n    &[aria-selected=\"true\"] {\n      background-color: ", ";\n    }\n\n    &[aria-disabled=\"true\"] {\n      color: ", ";\n    }\n  }\n\n  & {\n    ", ";\n  }\n"])), palette('white600')(styleProps), palette('gray100')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var AutosuggestItemText = function AutosuggestItemText(styleProps) {
  return css(_templateObject4$E || (_templateObject4$E = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var AutosuggestStaticItem$1 = function AutosuggestStaticItem(styleProps) {
  return css(_templateObject5$y || (_templateObject5$y = _taggedTemplateLiteralLoose(["\n  padding: ", "rem ", "rem;\n  width: 100%;\n\n  & {\n    ", ";\n  }\n"])), space(1.5)(styleProps), space(4)(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var AutosuggestClearButtonWrapper = function AutosuggestClearButtonWrapper(styleProps) {
  return css(_templateObject6$x || (_templateObject6$x = _taggedTemplateLiteralLoose(["\n  align-items: center;\n  justify-content: center;\n  padding: ", "rem ", "rem;\n\n  & {\n    ", ";\n  }\n"])), space(1)(styleProps), space(2)(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var AutosuggestClearButton = function AutosuggestClearButton(styleProps) {
  return css(_templateObject7$u || (_templateObject7$u = _taggedTemplateLiteralLoose(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: ", "rem ", "rem;\n\n  & {\n    ", ";\n  }\n"])), space(1)(styleProps), space(2)(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var AutosuggestInput = function AutosuggestInput(styleProps) {
  return css(_templateObject8$u || (_templateObject8$u = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var AutosuggestField$1 = function AutosuggestField(styleProps) {
  return css(_templateObject9$n || (_templateObject9$n = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var ItemsWrapper = function ItemsWrapper(styleProps) {
  return css(_templateObject10$m || (_templateObject10$m = _taggedTemplateLiteralLoose(["\n  max-height: calc(", " - 1rem);\n  overflow-y: scroll;\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), styleProps.popoverHeight, getHiddenScrollbarStyles(), theme(styleProps.themeKey, "styles.base")(styleProps));
};

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

////////////////////////////////////////////////////////
var invocationTimestamps = new Map(); ////////////////////////////////////////////////////////

var recordsCache = new Map();
var records = {
  clear: function clear(opts) {
    recordsCache.clear();

    if (opts && opts.cacheProvider) {
      opts.cacheProvider.clear();
    }

    return;
  },
  delete: function _delete(key, opts) {
    recordsCache.delete(key);

    if (opts && opts.cacheProvider) {
      opts.cacheProvider.delete(key);
    }

    return;
  },
  set: function set(key, valOrFn, opts) {
    var record = recordsCache.get(key);

    if (record && record.cacheTimeout) {
      clearTimeout(record.cacheTimeout);
    }

    var val = valOrFn;

    if (typeof val === 'function') {
      val = val(record || {});
    }

    var cacheTimeout;

    if (opts && opts.cacheTime) {
      cacheTimeout = setTimeout(function () {
        records.delete(key);
      }, opts.cacheTime);
    } // Set an updated timestamp on the cached record


    val = _objectSpread({}, val, {
      cacheTimeout: cacheTimeout,
      updated: new Date()
    });
    recordsCache.set(key, val);

    if (opts && opts.cacheProvider) {
      opts.cacheProvider.set(key, val);
    }

    return;
  },
  get: function get(key, opts) {
    // First, check to see if the record exists in the cache.
    var record = recordsCache.get(key);

    if (record) {
      return record;
    } // Otherwise, fallback to the cache provider.


    if (opts && opts.cacheProvider) {
      var value = opts.cacheProvider.get(key);

      if (value) {
        return value;
      }
    }

    return undefined;
  }
}; ////////////////////////////////////////////////////////

var promises = new Map();
var revalidators = new Map();
var suspenders = new Map();
var updaters = new Map();

var CACHE_STRATEGIES = {
  CONTEXT_ONLY: 'context-only',
  CONTEXT_AND_VARIABLES: 'context-and-variables'
};
var LOAD_POLICIES = {
  CACHE_FIRST: 'cache-first',
  CACHE_AND_LOAD: 'cache-and-load',
  LOAD_ONLY: 'load-only',
  CACHE_ONLY: 'cache-only'
};
var STATES = {
  IDLE: 'idle',
  PENDING: 'pending',
  PENDING_SLOW: 'pending-slow',
  RESOLVED: 'resolved',
  REJECTED: 'rejected',
  RELOADING: 'reloading',
  RELOADING_SLOW: 'reloading-slow'
};

var defaultConfig = {
  cacheTime: 0,
  cacheStrategy: CACHE_STRATEGIES.CONTEXT_AND_VARIABLES,
  debounce: 0,
  debounceCache: true,
  dedupingInterval: 500,
  delay: 0,
  defer: false,
  loadPolicy: LOAD_POLICIES.CACHE_AND_LOAD,
  revalidateOnWindowFocus: false,
  revalidateTime: 300000,
  suspense: false,
  throwError: false,
  timeout: 5000
};
var Context = react.createContext(defaultConfig);

function useDetectMounted() {
  var hasMounted = react.useRef(true);
  var hasRendered = react.useRef(false);
  react.useEffect(function () {
    hasRendered.current = true;
    return function cleanup() {
      hasMounted.current = false;
    };
  }, []);
  return [hasMounted, hasRendered];
}

var noop = function noop() {};

function useInterval(callback, delay) {
  var savedCallback = react.useRef(noop);
  react.useEffect(function () {
    savedCallback.current = callback;
  }, [callback]);
  react.useEffect(function () {
    var handler = function handler() {
      return savedCallback.current.apply(savedCallback, arguments);
    };

    if (typeof delay === 'number') {
      var id = setInterval(handler, delay);
      return function () {
        return clearInterval(id);
      };
    }

    return;
  }, [delay]);
}

function usePrevious(value) {
  var ref = react.useRef();
  react.useEffect(function () {
    ref.current = value;
  }, [value]);
  return ref.current;
}

function useTimeout() {
  var timeout = react.useRef(undefined);

  var _setTimeout = react.useCallback(function (fn, ms) {
    // @ts-ignore
    timeout.current = setTimeout(fn, ms);
  }, []);

  var _clearTimeout = react.useCallback(function () {
    return clearTimeout(timeout.current);
  }, []);

  react.useEffect(function () {
    return function cleanup() {
      if (timeout) {
        clearTimeout(timeout.current);
      }
    };
  }, []);
  return [_setTimeout, _clearTimeout];
}

function isDocumentVisible() {
  if (typeof document !== 'undefined' && typeof document.visibilityState !== 'undefined') {
    return document.visibilityState !== 'hidden';
  }

  return true;
}
function isOnline() {
  if (typeof navigator.onLine !== 'undefined') {
    return navigator.onLine;
  }

  return true;
}
function getCacheKey(_ref) {
  var context = _ref.context,
      variablesHash = _ref.variablesHash,
      cacheStrategy = _ref.cacheStrategy;
  var cacheKey = Array.isArray(context) ? context.join('.') : context;

  if (variablesHash && cacheStrategy === CACHE_STRATEGIES.CONTEXT_AND_VARIABLES) {
    cacheKey = "".concat(cacheKey, ".").concat(variablesHash);
  }

  return cacheKey;
}

function broadcastChanges(cacheKey, record) {
  var updaters$$1 = updaters.get(cacheKey);

  if (updaters$$1) {
    updaters$$1.forEach(function (updater) {
      return updater({
        record: record,
        shouldBroadcast: false
      });
    });
  }
}

var IDLE_RECORD = {
  error: undefined,
  response: undefined,
  state: STATES.IDLE
};
function useLoads(context, fn, localConfig) {
  var globalConfig = react.useContext(Context);

  var config = _objectSpread({}, globalConfig, localConfig || {});

  var cacheProvider = config.cacheProvider,
      cacheStrategy = config.cacheStrategy,
      cacheTime = config.cacheTime,
      debounce = config.debounce,
      debounceCache = config.debounceCache,
      dedupingInterval = config.dedupingInterval,
      dedupeManualLoad = config.dedupeManualLoad,
      delay = config.delay,
      _initialResponse = config.initialResponse,
      loadPolicy = config.loadPolicy,
      onReject = config.onReject,
      onResolve = config.onResolve,
      pollingInterval = config.pollingInterval,
      pollWhile = config.pollWhile,
      pollWhenHidden = config.pollWhenHidden,
      rejectRetryInterval = config.rejectRetryInterval,
      revalidateOnWindowFocus = config.revalidateOnWindowFocus,
      revalidateTime = config.revalidateTime,
      suspense = config.suspense,
      throwError = config.throwError,
      timeout = config.timeout,
      updateFn = config.update;
  var defer = config.defer;
  var variables = config.variables;

  if (typeof variables === 'function') {
    try {
      variables = variables();
      defer = config.defer;
    } catch (err) {
      defer = true;
    }
  }

  var variablesHash = react.useMemo(function () {
    return JSON.stringify(variables);
  }, [variables]);
  var cacheKey = getCacheKey({
    context: context,
    variablesHash: variablesHash,
    cacheStrategy: cacheStrategy
  });
  var loadCount = react.useRef(0);
  var debounceCount = react.useRef(0);
  var prevCacheKey = usePrevious(cacheKey);
  var isSameContext = !prevCacheKey || prevCacheKey === cacheKey;
  var prevVariablesHash = usePrevious(JSON.stringify(variables));
  var isSameVariables = variablesHash === prevVariablesHash;

  var _useDetectMounted = useDetectMounted(),
      _useDetectMounted2 = _slicedToArray(_useDetectMounted, 2),
      hasMounted = _useDetectMounted2[0],
      hasRendered = _useDetectMounted2[1];

  var _useTimeout = useTimeout(),
      _useTimeout2 = _slicedToArray(_useTimeout, 2),
      setDelayTimeout = _useTimeout2[0],
      clearDelayTimeout = _useTimeout2[1];

  var _useTimeout3 = useTimeout(),
      _useTimeout4 = _slicedToArray(_useTimeout3, 1),
      setErrorRetryTimeout = _useTimeout4[0];

  var _useTimeout5 = useTimeout(),
      _useTimeout6 = _slicedToArray(_useTimeout5, 2),
      setTimeoutTimeout = _useTimeout6[0],
      clearTimeoutTimeout = _useTimeout6[1];

  var cachedRecord = react.useMemo(function () {
    if (cacheKey && loadPolicy !== LOAD_POLICIES.LOAD_ONLY) {
      return records.get(cacheKey, {
        cacheProvider: cacheProvider
      });
    }

    return;
  }, [cacheProvider, cacheKey, loadPolicy]);
  var initialResponse = react.useMemo(function () {
    return _initialResponse;
  }, []); // eslint-disable-line

  var initialRecord = initialResponse ? {
    response: initialResponse,
    error: undefined,
    state: STATES.RESOLVED
  } : _objectSpread({}, IDLE_RECORD, {
    state: defer ? STATES.IDLE : STATES.PENDING
  });

  if (cachedRecord && !defer) {
    initialRecord = cachedRecord;
  }

  var reducer = react.useCallback(function (state, action) {
    switch (action.type) {
      case STATES.IDLE:
        return IDLE_RECORD;

      case STATES.PENDING:
        return _objectSpread({}, state, {
          state: STATES.PENDING
        });

      case STATES.PENDING_SLOW:
        return _objectSpread({}, state, {
          state: STATES.PENDING_SLOW
        });

      case STATES.RESOLVED:
        return {
          isCached: action.isCached,
          error: undefined,
          response: action.response,
          state: STATES.RESOLVED
        };

      case STATES.REJECTED:
        return {
          isCached: action.isCached,
          error: action.error,
          response: undefined,
          state: STATES.REJECTED
        };

      case STATES.RELOADING:
        return _objectSpread({}, state, {
          state: STATES.RELOADING
        });

      case STATES.RELOADING_SLOW:
        return _objectSpread({}, state, {
          state: STATES.RELOADING_SLOW
        });

      default:
        return state;
    }
  }, []);

  var _React$useReducer = react.useReducer(reducer, initialRecord),
      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),
      record = _React$useReducer2[0],
      dispatch = _React$useReducer2[1];

  var handleLoading = react.useCallback(function (_ref) {
    var isReloading = _ref.isReloading,
        isSlow = _ref.isSlow,
        promise = _ref.promise;
    var reloadingState = isSlow ? STATES.RELOADING_SLOW : STATES.RELOADING;
    var pendingState = isSlow ? STATES.PENDING_SLOW : STATES.PENDING;
    dispatch({
      type: isReloading ? reloadingState : pendingState
    });

    if (cacheKey) {
      records.set(cacheKey, function (record) {
        return _objectSpread({}, record, {
          state: isReloading ? STATES.RELOADING : STATES.PENDING
        });
      }, {
        cacheTime: cacheTime,
        cacheProvider: cacheProvider
      });

      if (!isReloading) {
        promises.set(cacheKey, promise);
      }
    }
  }, [cacheProvider, cacheTime, cacheKey]);
  var handleData = react.useCallback(function (_ref2) {
    var count = _ref2.count,
        record = _ref2.record,
        shouldBroadcast = _ref2.shouldBroadcast;

    if (hasMounted.current && (!count || count === loadCount.current)) {
      // @ts-ignore
      clearDelayTimeout(); // @ts-ignore

      clearTimeoutTimeout();
      dispatch(_objectSpread({
        type: record.state,
        isCached: Boolean(cacheKey)
      }, record));

      if (cacheKey) {
        records.set(cacheKey, record, {
          cacheProvider: cacheProvider,
          cacheTime: cacheTime
        });
        var isSuspended = suspenders.get(cacheKey);
        suspenders.set(cacheKey, typeof isSuspended === 'undefined');
        promises.delete(cacheKey);

        if (shouldBroadcast) {
          broadcastChanges(cacheKey, record);
        }
      }
    }
  }, [cacheProvider, cacheTime, clearDelayTimeout, clearTimeoutTimeout, cacheKey, hasMounted]);
  var handleOptimisticData = react.useCallback(function (_ref3, state, count) {
    var data = _ref3.data,
        contextOrCallback = _ref3.contextOrCallback,
        callback = _ref3.callback;
    var newData = data;
    var optimisticCacheKey = cacheKey;

    if (_typeof(contextOrCallback) === 'object') {
      var _variablesHash = JSON.stringify(contextOrCallback.variables);

      optimisticCacheKey = getCacheKey({
        context: contextOrCallback.context,
        variablesHash: _variablesHash,
        cacheStrategy: cacheStrategy
      });
    }

    if (typeof data === 'function') {
      var cachedValue = IDLE_RECORD;

      if (optimisticCacheKey) {
        cachedValue = records.get(optimisticCacheKey, {
          cacheProvider: cacheProvider
        }) || IDLE_RECORD;
      }

      newData = data(state === STATES.RESOLVED ? cachedValue.response : cachedValue.error);
    }

    var newRecord = {
      error: state === STATES.REJECTED ? newData : undefined,
      response: state === STATES.RESOLVED ? newData : undefined,
      state: state
    };

    if (!optimisticCacheKey || cacheKey === optimisticCacheKey) {
      handleData({
        count: count,
        record: newRecord,
        shouldBroadcast: true
      });
    } else {
      records.set(optimisticCacheKey, newRecord, {
        cacheProvider: cacheProvider,
        cacheTime: cacheTime
      });
    }

    var newCallback = typeof contextOrCallback === 'function' ? contextOrCallback : callback;
    newCallback && newCallback(newData);
  }, [cacheStrategy, cacheKey, cacheProvider, handleData, cacheTime]);
  var load = react.useCallback(function () {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return function () {
      for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
        _args[_key] = arguments[_key];
      }

      var _opts$setInvocationTi = opts.setInvocationTimestamp,
          setInvocationTimestamp = _opts$setInvocationTi === void 0 ? true : _opts$setInvocationTi;

      if (!opts.isManualInvoke && variables && isSameVariables) {
        return;
      } // Build cacheKey based of these args?


      var args = _args.filter(function (arg) {
        return arg.constructor.name !== 'Class';
      });

      if (variables && (!args || args.length === 0)) {
        args = variables;
      }

      if (context && debounce > 0) {
        var now = new Date().getTime();

        if (setInvocationTimestamp) {
          invocationTimestamps.set(context, now);
          invocationTimestamps.set('latest', now);
        }

        var latestInvocationTimestamp = invocationTimestamps.get(context || 'latest');

        if (latestInvocationTimestamp) {
          if (Math.abs(now - latestInvocationTimestamp) < debounce) {
            debounceCount.current = debounceCount.current + 1;
            setTimeout(function () {
              return load(_objectSpread({
                count: debounceCount.current,
                setInvocationTimestamp: false
              }, opts)).apply(void 0, _args);
            }, debounce);
            return;
          }

          if (debounceCount.current !== (opts.count || 0)) {
            return;
          }
        }

        debounceCount.current = 0;
      }

      var cachedRecord;

      if (cacheKey) {
        cachedRecord = records.get(cacheKey, {
          cacheProvider: cacheProvider
        });
      }

      if (cachedRecord) {
        var isDuplicate = // @ts-ignore
        Math.abs(new Date() - cachedRecord.updated) < dedupingInterval && (!opts.isManualInvoke || dedupeManualLoad);
        if (isDuplicate) return;
      }

      loadCount.current = loadCount.current + 1;
      var count = loadCount.current;

      if (cacheKey) {
        var isSuspended = suspenders.get(cacheKey);

        if (suspense && isSuspended) {
          suspenders.set(cacheKey, false);
          return;
        }
      }

      if (cacheKey && loadPolicy !== LOAD_POLICIES.LOAD_ONLY) {
        if (!defer && cachedRecord) {
          dispatch(_objectSpread({
            type: cachedRecord.state,
            isCached: true
          }, cachedRecord));

          if (cachedRecord.state === STATES.RESOLVED || cachedRecord.state === STATES.REJECTED) {
            // @ts-ignore
            var isStale = Math.abs(new Date() - cachedRecord.updated) >= revalidateTime;
            var isCachedWithCacheFirst = !isStale && !opts.isManualInvoke && loadPolicy === LOAD_POLICIES.CACHE_FIRST;
            if (isCachedWithCacheFirst) return;
          }
        }
      }

      var loadFn = opts.fn ? opts.fn : fn;
      var promiseOrFn = loadFn.apply(void 0, _toConsumableArray(args));
      var promise = promiseOrFn;

      if (typeof promiseOrFn === 'function') {
        promise = promiseOrFn({
          cachedRecord: cachedRecord,
          setResponse: function setResponse(data, contextOrCallback, callback) {
            return handleOptimisticData({
              data: data,
              contextOrCallback: contextOrCallback,
              callback: callback
            }, STATES.RESOLVED, count);
          },
          setError: function setError(data, contextOrCallback, callback) {
            return handleOptimisticData({
              data: data,
              contextOrCallback: contextOrCallback,
              callback: callback
            }, STATES.REJECTED, count);
          }
        });
      }

      var isReloading = context && isSameContext && (count > 1 || cachedRecord && !defer || initialResponse) || debounce > 0 && debounceCache;

      if (delay > 0) {
        setDelayTimeout(function () {
          return handleLoading({
            isReloading: isReloading,
            promise: promise
          });
        }, delay);
      } else {
        handleLoading({
          isReloading: isReloading,
          promise: promise
        });
      }

      if (timeout > 0) {
        setTimeoutTimeout(function () {
          return handleLoading({
            isReloading: isReloading,
            isSlow: true,
            promise: promise
          });
        }, timeout);
      }

      if (typeof promise === 'function') return;
      return promise.then(function (response) {
        handleData({
          count: count,
          record: {
            error: undefined,
            response: response,
            state: STATES.RESOLVED
          },
          shouldBroadcast: true
        });
        onResolve && onResolve(response);
        return response;
      }).catch(function (error) {
        handleData({
          count: count,
          record: {
            response: undefined,
            error: error,
            state: STATES.REJECTED
          },
          shouldBroadcast: false
        });
        onReject && onReject(error);

        if (rejectRetryInterval) {
          var _count = Math.min(loadCount.current || 0, 8);

          var _timeout = typeof rejectRetryInterval === 'function' ? rejectRetryInterval(_count) : ~~((Math.random() + 0.5) * (1 << _count)) * rejectRetryInterval;

          setErrorRetryTimeout(function () {
            return load()(args);
          }, _timeout);
        }

        if (throwError && !suspense) {
          throw error;
        }
      });
    };
  }, [variablesHash, isSameVariables, context, debounce, cacheKey, loadPolicy, fn, isSameContext, defer, initialResponse, debounceCache, delay, timeout, cacheProvider, dedupingInterval, dedupeManualLoad, suspense, revalidateTime, handleOptimisticData, setDelayTimeout, handleLoading, setTimeoutTimeout, handleData, onResolve, onReject, rejectRetryInterval, throwError, setErrorRetryTimeout]);
  var update = react.useMemo(function () {
    if (!updateFn) return;

    if (Array.isArray(updateFn)) {
      return updateFn.map(function (fn) {
        return load({
          fn: fn,
          isManualInvoke: true
        });
      });
    }

    return load({
      fn: updateFn,
      isManualInvoke: true
    });
  }, [load, updateFn]);
  var reset = react.useCallback(function () {
    dispatch({
      type: STATES.IDLE
    });
  }, []);
  react.useEffect(function () {
    if (!cachedRecord && cacheKey && !initialResponse && !debounceCache) {
      reset();
    }
  }, [cachedRecord, cacheKey, initialResponse, reset, debounceCache]);
  react.useEffect(function () {
    if (cachedRecord && !defer && loadPolicy !== LOAD_POLICIES.LOAD_ONLY) {
      dispatch(_objectSpread({
        type: cachedRecord.state,
        isCached: true
      }, cachedRecord));
    }
  }, [cachedRecord, loadPolicy, dispatch, defer]);
  react.useEffect(function () {
    if (defer || suspense && !hasRendered.current && !cachedRecord || loadPolicy === LOAD_POLICIES.CACHE_ONLY) return;
    load()();
  }, [defer, cacheKey, suspense, hasRendered, cachedRecord, load, loadPolicy]);
  react.useEffect(function () {
    if (defer) return;
    var updaters$$1 = updaters.get(cacheKey);

    if (updaters$$1) {
      var newUpdaters = [].concat(_toConsumableArray(updaters$$1), [handleData]);
      updaters.set(cacheKey, newUpdaters);
    } else {
      updaters.set(cacheKey, [handleData]);
    }

    return function cleanup() {
      var updaters$$1 = updaters.get(cacheKey);
      var newUpdaters = updaters$$1.filter(function (updater) {
        return updater !== handleData;
      });
      updaters.set(cacheKey, newUpdaters);
    };
  }, [cacheKey, defer, handleData]);
  react.useEffect(function () {
    if (!revalidateOnWindowFocus || defer) return;
    var revalidate = load();
    revalidators.set(cacheKey, revalidate);
    return function cleanup() {
      revalidators.delete(cacheKey);
    };
  }, [cacheKey, defer, handleData, load, revalidateOnWindowFocus]);
  var shouldPoll = !defer;

  if (shouldPoll && pollWhile) {
    if (typeof pollWhile === 'function') {
      shouldPoll = pollWhile(record);
    } else {
      shouldPoll = pollWhile;
    }
  }

  useInterval(function () {
    if (!isDocumentVisible() && !pollWhenHidden) return;
    load({
      isManualInvoke: true
    })();
  }, shouldPoll ? pollingInterval : undefined);
  var states = react.useMemo(function () {
    return {
      isIdle: record.state === STATES.IDLE && Boolean(!record.response),
      isPending: record.state === STATES.PENDING || record.state === STATES.PENDING_SLOW,
      isPendingSlow: record.state === STATES.PENDING_SLOW,
      isResolved: record.state === STATES.RESOLVED || Boolean(record.response),
      isRejected: record.state === STATES.REJECTED,
      isReloading: record.state === STATES.RELOADING || record.state === STATES.RELOADING_SLOW,
      isReloadingSlow: record.state === STATES.RELOADING_SLOW
    };
  }, [record.response, record.state]);

  if (suspense && !defer) {
    if (cacheKey) {
      var _record = records.get(cacheKey);

      var promise = promises.get(cacheKey);

      if (_record && promise) {
        throw promise;
      }

      if (!_record) {
        load()();
      }
    }

    if (states.isRejected) {
      throw record.error;
    }
  }

  return react.useMemo(function () {
    return _objectSpread({
      load: load({
        isManualInvoke: true
      }),
      update: update,
      reset: reset,
      response: record.response,
      error: record.error,
      state: record.state
    }, states, {
      isCached: Boolean(record.isCached)
    });
  }, [load, update, reset, record.response, record.error, record.state, record.isCached, states]);
}
var eventsBinded = false;

if (typeof window !== 'undefined' && window.addEventListener && !eventsBinded) {
  var revalidate = function revalidate() {
    if (!isDocumentVisible() || !isOnline()) return;
    revalidators.forEach(function (revalidator) {
      return revalidator && revalidator();
    });
  };

  window.addEventListener('visibilitychange', revalidate, false);
  window.addEventListener('focus', revalidate, false);
  eventsBinded = true;
}

var _templateObject$X, _templateObject2$G, _templateObject3$E, _templateObject4$D, _templateObject5$x, _templateObject6$w, _templateObject7$t, _templateObject8$t, _templateObject9$m, _templateObject10$l, _templateObject11$h, _templateObject12$f, _templateObject13$b, _templateObject14$a, _templateObject15$a, _templateObject16$a, _templateObject17$a, _templateObject18$8, _templateObject19$7, _templateObject20$7, _templateObject21$6, _templateObject22$4, _templateObject23$3, _templateObject24$3, _templateObject25$3, _templateObject26$3, _templateObject27$3, _templateObject28$2, _templateObject29$2, _templateObject30$2, _templateObject31$1;
var InputWrapper = function InputWrapper(styleProps) {
  return css(_templateObject$X || (_templateObject$X = _taggedTemplateLiteralLoose(["\n  align-items: center;\n  position: relative;\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), styleProps.size && wrapperSizeProperties$1(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var Input$2 = function Input(styleProps) {
  return css(_templateObject2$G || (_templateObject2$G = _taggedTemplateLiteralLoose(["\n  -webkit-appearance: none;\n  background: ", ";\n  color: ", ";\n  height: 2.75em;\n  width: 100%;\n  transition: box-shadow 0.1s ease-in-out 0s, border-color 0.1s, background-color 0.1s;\n\n  ", "\n\n  &[disabled] {\n    background-color: ", ";\n    box-shadow: unset;\n    color: ", ";\n    cursor: not-allowed;\n\n    & {\n      ", ";\n    }\n  }\n\n  &:focus {\n    outline: unset;\n    z-index: 2;\n\n    & {\n      ", ";\n    }\n  }\n\n  &::placeholder {\n    color: ", ";\n\n    & {\n      ", ";\n    }\n  }\n\n  ", ";\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), palette('white', {
    dark: 'black100'
  })(styleProps), palette('text')(styleProps), getVariantStyles$1(styleProps), palette('white700', {
    dark: 'black200'
  })(styleProps), palette('text100')(styleProps), theme(styleProps.themeKey, "styles.disabled")(styleProps), theme(styleProps.themeKey, "styles.focus")(styleProps), palette(styleProps.palette || 'gray300')(styleProps), theme(styleProps.themeKey, "styles.placeholder")(styleProps), (styleProps.after || styleProps.isLoading) && css$1(_templateObject3$E || (_templateObject3$E = _taggedTemplateLiteralLoose(["\n      & {\n        padding-right: 2.3em;\n      }\n    "]))), styleProps.before && css$1(_templateObject4$D || (_templateObject4$D = _taggedTemplateLiteralLoose(["\n      & {\n        padding-left: 2.3em;\n      }\n    "]))), theme(styleProps.themeKey, "styles.base")(styleProps));
};

function getVariantStyles$1(styleProps) {
  if (styleProps.variant === 'bordered') {
    return css$1(_templateObject5$x || (_templateObject5$x = _taggedTemplateLiteralLoose(["\n      border: 1px solid\n        ", ";\n      border-radius: ", ";\n      padding: 0.4em 0.8em;\n\n      &:focus {\n        border-color: ", ";\n        box-shadow: ", "\n          0px 0px 0px 3px !important;\n\n        & {\n          ", ";\n        }\n      }\n\n      ", "\n\n      & {\n        ", ";\n      }\n    "])), palette(styleProps.palette || 'white900', {
      dark: styleProps.palette || 'gray700'
    })(styleProps), borderRadius('default')(styleProps), palette(styleProps.palette || 'primary')(styleProps), palette((styleProps.palette || 'primary') + "Tint", {
      dark: (styleProps.palette || 'primary') + "Shade"
    })(styleProps), theme(styleProps.themeKey, "variants.bordered.styles.focus")(styleProps), styleProps.state && css$1(_templateObject6$w || (_templateObject6$w = _taggedTemplateLiteralLoose(["\n        & {\n          border-color: ", ";\n          box-shadow: ", " 0px 0px\n            0px 3px !important;\n        }\n      "])), palette("" + styleProps.state)(styleProps), palette(styleProps.state + "Tint", {
      dark: styleProps.state + "Shade"
    })(styleProps)), theme(styleProps.themeKey, "variants.bordered.styles.base")(styleProps));
  }

  if (styleProps.variant === 'borderless') {
    return css$1(_templateObject7$t || (_templateObject7$t = _taggedTemplateLiteralLoose(["\n      border-top-left-radius: ", ";\n      border-top-right-radius: ", ";\n      border-bottom: 1px solid transparent;\n\n      &:focus {\n        border-bottom-color: ", ";\n        box-shadow: ", "\n          0px 2px 0px !important;\n      }\n\n      &[disabled] {\n        border-radius: ", ";\n        padding: 0.4em 0.8em;\n      }\n\n      ", "\n    "])), borderRadius('default')(styleProps), borderRadius('default')(styleProps), palette(styleProps.palette || 'primary')(styleProps), palette((styleProps.palette || 'primary') + "Tint", {
      dark: styleProps.palette + "Shade"
    })(styleProps), borderRadius('default')(styleProps), styleProps.state && css$1(_templateObject8$t || (_templateObject8$t = _taggedTemplateLiteralLoose(["\n        & {\n          border-color: ", ";\n          box-shadow: ", " 0px 2px\n            0px !important;\n        }\n      "])), palette("" + styleProps.state)(styleProps), palette(styleProps.state + "Tint", {
      dark: styleProps.state + "Shade"
    })(styleProps)));
  }

  if (styleProps.variant === 'underline') {
    return css$1(_templateObject9$m || (_templateObject9$m = _taggedTemplateLiteralLoose(["\n      border-top-left-radius: ", ";\n      border-top-right-radius: ", ";\n      border-bottom: 1px solid\n        ", ";\n\n      &:focus {\n        border-bottom-color: ", ";\n        box-shadow: ", "\n          0px 2px 0px !important;\n      }\n\n      &[disabled] {\n        padding: 0.4em 0.8em;\n      }\n\n      ", "\n    "])), borderRadius('default')(styleProps), borderRadius('default')(styleProps), palette(styleProps.palette || 'white900', {
      dark: styleProps.palette || 'gray700'
    })(styleProps), palette(styleProps.palette || 'primary')(styleProps), palette((styleProps.palette || 'primary') + "Tint", {
      dark: styleProps.palette + "Shade"
    })(styleProps), styleProps.state && css$1(_templateObject10$l || (_templateObject10$l = _taggedTemplateLiteralLoose(["\n        & {\n          border-color: ", ";\n          box-shadow: ", " 0px 2px\n            0px !important;\n        }\n      "])), palette("" + styleProps.state)(styleProps), palette(styleProps.state + "Tint", {
      dark: styleProps.state + "Shade"
    })(styleProps)));
  }

  return css$1(_templateObject11$h || (_templateObject11$h = _taggedTemplateLiteralLoose([""])));
}

var InputIcon$1 = function InputIcon(styleProps) {
  return css(_templateObject12$f || (_templateObject12$f = _taggedTemplateLiteralLoose(["\n  && {\n    fill: ", ";\n    height: 2.75em;\n    margin: 0 0.75em;\n    top: 0;\n\n    ", ";\n  }\n"])), palette('text100')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var InputSpinner = function InputSpinner(styleProps) {
  return css(_templateObject13$b || (_templateObject13$b = _taggedTemplateLiteralLoose(["\n  && {\n    font-size: inherit;\n    align-items: center;\n    display: flex;\n    position: absolute;\n    height: 2.75em;\n    margin: 0 0.75em;\n    top: 0;\n    right: 0;\n    z-index: 2;\n\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var InputField$2 = function InputField(styleProps) {
  return css(_templateObject14$a || (_templateObject14$a = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var InputFieldGroup = function InputFieldGroup(styleProps) {
  return css(_templateObject15$a || (_templateObject15$a = _taggedTemplateLiteralLoose(["\n  & .bb-InputWrapper {\n    flex: 1;\n  }\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
function wrapperSizeProperties$1(styleProps) {
  var properties = {
    small: css$1(_templateObject16$a || (_templateObject16$a = _taggedTemplateLiteralLoose(["\n      font-size: ", "rem;\n\n      & {\n        ", ";\n      }\n    "])), fontSize('150')(styleProps), theme(styleProps.themeKey, "styles.sizes.small")(styleProps)),
    default: css$1(_templateObject17$a || (_templateObject17$a = _taggedTemplateLiteralLoose(["\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "styles.sizes.default")(styleProps)),
    medium: css$1(_templateObject18$8 || (_templateObject18$8 = _taggedTemplateLiteralLoose(["\n      font-size: ", "rem;\n\n      & {\n        ", ";\n      }\n    "])), fontSize('300')(styleProps), theme(styleProps.themeKey, "styles.sizes.medium")(styleProps)),
    large: css$1(_templateObject19$7 || (_templateObject19$7 = _taggedTemplateLiteralLoose(["\n      font-size: ", "rem;\n\n      & {\n        ", ";\n      }\n    "])), fontSize('400')(styleProps), theme(styleProps.themeKey, "styles.sizes.large")(styleProps))
  };
  return properties[styleProps.size];
} /////////////////////////////////////////////////////////////////////

var LabelWrapper$2 = function LabelWrapper(styleProps) {
  return css(_templateObject20$7 || (_templateObject20$7 = _taggedTemplateLiteralLoose(["\n  align-items: center;\n  color: ", ";\n  display: flex;\n  position: absolute;\n  height: 100%;\n  transition: transform 100ms;\n  transform-origin: top left;\n  transform: translateY(0px) scale(1);\n\n  ", "\n\n  ", "\n\n  ", ";\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), palette(styleProps.palette || 'gray300')(styleProps), getLabelWrapperVariantStyles(styleProps), styleProps.isFocused && css$1(_templateObject21$6 || (_templateObject21$6 = _taggedTemplateLiteralLoose(["\n      transform: translateY(-1.1em) scale(0.75);\n    "]))), (styleProps.after || styleProps.isLoading) && css$1(_templateObject22$4 || (_templateObject22$4 = _taggedTemplateLiteralLoose(["\n      & {\n        margin-right: 2.3em;\n      }\n    "]))), styleProps.before && css$1(_templateObject23$3 || (_templateObject23$3 = _taggedTemplateLiteralLoose(["\n      & {\n        margin-left: 2.3em;\n      }\n    "]))), theme(styleProps.themeKey, "styles.base")(styleProps));
};

function getLabelWrapperVariantStyles(styleProps) {
  if (styleProps.variant === 'bordered') {
    return css$1(_templateObject24$3 || (_templateObject24$3 = _taggedTemplateLiteralLoose(["\n      margin-left: 0.8em;\n\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "variants.bordered.styles.base")(styleProps));
  }

  return css$1(_templateObject25$3 || (_templateObject25$3 = _taggedTemplateLiteralLoose([""])));
} /////////////////////////////////////////////////////////////////////


var LabelWrapperBackground$1 = function LabelWrapperBackground(styleProps) {
  return css(_templateObject26$3 || (_templateObject26$3 = _taggedTemplateLiteralLoose(["\n  padding: 0 0.25em;\n  position: absolute;\n  opacity: 0;\n  transition: opacity 100ms;\n  transform: translateY(-1em) scale(0.75);\n  transform-origin: top left;\n\n  ", "\n\n  ", "\n\n  ", ";\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), getLabelWrapperBackgroundVariantStyles(styleProps), styleProps.isFocused && css$1(_templateObject27$3 || (_templateObject27$3 = _taggedTemplateLiteralLoose(["\n      opacity: 1;\n    "]))), (styleProps.after || styleProps.isLoading) && css$1(_templateObject28$2 || (_templateObject28$2 = _taggedTemplateLiteralLoose(["\n      & {\n        margin-right: 2.1em;\n      }\n    "]))), styleProps.before && css$1(_templateObject29$2 || (_templateObject29$2 = _taggedTemplateLiteralLoose(["\n      & {\n        margin-left: 2.1em;\n      }\n    "]))), theme(styleProps.themeKey, "styles.base")(styleProps));
};

function getLabelWrapperBackgroundVariantStyles(styleProps) {
  if (styleProps.variant === 'bordered') {
    return css$1(_templateObject30$2 || (_templateObject30$2 = _taggedTemplateLiteralLoose(["\n      background-color: ", ";\n      margin-left: 0.6em;\n\n      & {\n        ", ";\n      }\n    "])), palette('white', {
      dark: 'black100'
    })(styleProps), theme(styleProps.themeKey, "variants.bordered.styles.base")(styleProps));
  }

  return css$1(_templateObject31$1 || (_templateObject31$1 = _taggedTemplateLiteralLoose([""])));
}

function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e["default"]:e}var React=_interopDefault(react);function _defaults2(e,t){for(var n=Object.getOwnPropertyNames(t),a=0;a<n.length;a++){var i=n[a],r=Object.getOwnPropertyDescriptor(t,i);r&&r.configurable&&e[i]===undefined&&Object.defineProperty(e,i,r);}return e}function _extends(){return (_extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a]);}return e}).apply(this,arguments)}function _inheritsLoose(e,t){e.prototype=Object.create(t.prototype),_defaults2(e.prototype.constructor=e,t);}function _objectWithoutPropertiesLoose(e,t){if(null==e)return {};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],0<=t.indexOf(n)||(i[n]=e[n]);return i}function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var invariant=function(e,t,n,a,i,r,o,s){if(!e){var l;if(t===undefined)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else {var u=[n,a,i,r,o,s],c=0;(l=new Error(t.replace(/%s/g,function(){return u[c++]}))).name="Invariant Violation";}throw l.framesToPop=1,l}},invariant_1=invariant;function setInputSelection(e,t,n){if("selectionStart"in e&&"selectionEnd"in e)e.selectionStart=t,e.selectionEnd=n;else {var a=e.createTextRange();a.collapse(!0),a.moveStart("character",t),a.moveEnd("character",n-t),a.select();}}function getInputSelection(e){var t=0,n=0;if("selectionStart"in e&&"selectionEnd"in e)t=e.selectionStart,n=e.selectionEnd;else {var a=document.selection.createRange();a.parentElement()===e&&(t=-a.moveStart("character",-e.value.length),n=-a.moveEnd("character",-e.value.length));}return {start:t,end:n,length:n-t}}var defaultFormatChars={9:"[0-9]",a:"[A-Za-z]","*":"[A-Za-z0-9]"},defaultMaskChar="_";function parseMask(e,t,n){var a="",i="",r=null,o=[];if(t===undefined&&(t=defaultMaskChar),null==n&&(n=defaultFormatChars),!e||"string"!=typeof e)return {maskChar:t,formatChars:n,mask:null,prefix:null,lastEditablePosition:null,permanents:[]};var s=!1;return e.split("").forEach(function(e){s=!s&&"\\"===e||(s||!n[e]?(o.push(a.length),a.length===o.length-1&&(i+=e)):r=a.length+1,a+=e,!1);}),{maskChar:t,formatChars:n,prefix:i,mask:a,lastEditablePosition:r,permanents:o}}function isPermanentCharacter(e,t){return -1!==e.permanents.indexOf(t)}function isAllowedCharacter(e,t,n){var a=e.mask,i=e.formatChars;if(!n)return !1;if(isPermanentCharacter(e,t))return a[t]===n;var r=i[a[t]];return new RegExp(r).test(n)}function isEmpty(n,e){return e.split("").every(function(e,t){return isPermanentCharacter(n,t)||!isAllowedCharacter(n,t,e)})}function getFilledLength(e,t){var n=e.maskChar,a=e.prefix;if(!n){for(;t.length>a.length&&isPermanentCharacter(e,t.length-1);)t=t.slice(0,t.length-1);return t.length}for(var i=a.length,r=t.length;r>=a.length;r--){var o=t[r];if(!isPermanentCharacter(e,r)&&isAllowedCharacter(e,r,o)){i=r+1;break}}return i}function isFilled(e,t){return getFilledLength(e,t)===e.mask.length}function formatValue(e,t){var n=e.maskChar,a=e.mask,i=e.prefix;if(!n){for((t=insertString(e,"",t,0)).length<i.length&&(t=i);t.length<a.length&&isPermanentCharacter(e,t.length);)t+=a[t.length];return t}if(t)return insertString(e,formatValue(e,""),t,0);for(var r=0;r<a.length;r++)isPermanentCharacter(e,r)?t+=a[r]:t+=n;return t}function clearRange(n,e,a,t){var i=a+t,r=n.maskChar,o=n.mask,s=n.prefix,l=e.split("");if(r)return l.map(function(e,t){return t<a||i<=t?e:isPermanentCharacter(n,t)?o[t]:r}).join("");for(var u=i;u<l.length;u++)isPermanentCharacter(n,u)&&(l[u]="");return a=Math.max(s.length,a),l.splice(a,i-a),e=l.join(""),formatValue(n,e)}function insertString(r,o,e,s){var l=r.mask,u=r.maskChar,c=r.prefix,t=e.split(""),h=isFilled(r,o);return !u&&s>o.length&&(o+=l.slice(o.length,s)),t.every(function(e){for(;i=e,isPermanentCharacter(r,a=s)&&i!==l[a];){if(s>=o.length&&(o+=l[s]),t=e,n=s,u&&isPermanentCharacter(r,n)&&t===u)return !0;if(++s>=l.length)return !1}var t,n,a,i;return !isAllowedCharacter(r,s,e)&&e!==u||(s<o.length?o=u||h||s<c.length?o.slice(0,s)+e+o.slice(s+1):(o=o.slice(0,s)+e+o.slice(s),formatValue(r,o)):u||(o+=e),++s<l.length)}),o}function getInsertStringLength(a,e,t,i){var r=a.mask,o=a.maskChar,n=t.split(""),s=i;return n.every(function(e){for(;n=e,isPermanentCharacter(a,t=i)&&n!==r[t];)if(++i>=r.length)return !1;var t,n;return (isAllowedCharacter(a,i,e)||e===o)&&i++,i<r.length}),i-s}function getLeftEditablePosition(e,t){for(var n=t;0<=n;--n)if(!isPermanentCharacter(e,n))return n;return null}function getRightEditablePosition(e,t){for(var n=e.mask,a=t;a<n.length;++a)if(!isPermanentCharacter(e,a))return a;return null}function getStringValue(e){return e||0===e?e+"":""}function processChange(e,t,n,a,i){var r=e.mask,o=e.prefix,s=e.lastEditablePosition,l=t,u="",c=0,h=0,f=Math.min(i.start,n.start);if(n.end>i.start?h=(c=getInsertStringLength(e,a,u=l.slice(i.start,n.end),f))?i.length:0:l.length<a.length&&(h=a.length-l.length),l=a,h){if(1===h&&!i.length)f=i.start===n.start?getRightEditablePosition(e,n.start):getLeftEditablePosition(e,n.start);l=clearRange(e,l,f,h);}return l=insertString(e,l,u,f),(f+=c)>=r.length?f=r.length:f<o.length&&!c?f=o.length:f>=o.length&&f<s&&c&&(f=getRightEditablePosition(e,f)),u||(u=null),{value:l=formatValue(e,l),enteredString:u,selection:{start:f,end:f}}}function isWindowsPhoneBrowser(){var e=new RegExp("windows","i"),t=new RegExp("phone","i"),n=navigator.userAgent;return e.test(n)&&t.test(n)}function isFunction(e){return "function"==typeof e}function getRequestAnimationFrame(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame}function getCancelAnimationFrame(){return window.cancelAnimationFrame||window.webkitCancelRequestAnimationFrame||window.webkitCancelAnimationFrame||window.mozCancelAnimationFrame}function defer(e){return (!!getCancelAnimationFrame()?getRequestAnimationFrame():function(){return setTimeout(e,1e3/60)})(e)}function cancelDefer(e){(getCancelAnimationFrame()||clearTimeout)(e);}var InputElement=function(c){function e(e){var f=c.call(this,e)||this;f.focused=!1,f.mounted=!1,f.previousSelection=null,f.selectionDeferId=null,f.saveSelectionLoopDeferId=null,f.saveSelectionLoop=function(){f.previousSelection=f.getSelection(),f.saveSelectionLoopDeferId=defer(f.saveSelectionLoop);},f.runSaveSelectionLoop=function(){null===f.saveSelectionLoopDeferId&&f.saveSelectionLoop();},f.stopSaveSelectionLoop=function(){null!==f.saveSelectionLoopDeferId&&(cancelDefer(f.saveSelectionLoopDeferId),f.saveSelectionLoopDeferId=null,f.previousSelection=null);},f.getInputDOMNode=function(){if(!f.mounted)return null;var e=reactDom.findDOMNode(_assertThisInitialized(_assertThisInitialized(f))),t="undefined"!=typeof window&&e instanceof window.Element;if(e&&!t)return null;if("INPUT"!==e.nodeName&&(e=e.querySelector("input")),!e)throw new Error("react-input-mask: inputComponent doesn't contain input node");return e},f.getInputValue=function(){var e=f.getInputDOMNode();return e?e.value:null},f.setInputValue=function(e){var t=f.getInputDOMNode();t&&(f.value=e,t.value=e);},f.setCursorToEnd=function(){var e=getFilledLength(f.maskOptions,f.value),t=getRightEditablePosition(f.maskOptions,e);null!==t&&f.setCursorPosition(t);},f.setSelection=function(e,t,n){void 0===n&&(n={});var a=f.getInputDOMNode(),i=f.isFocused();a&&i&&(n.deferred||setInputSelection(a,e,t),null!==f.selectionDeferId&&cancelDefer(f.selectionDeferId),f.selectionDeferId=defer(function(){f.selectionDeferId=null,setInputSelection(a,e,t);}),f.previousSelection={start:e,end:t,length:Math.abs(t-e)});},f.getSelection=function(){return getInputSelection(f.getInputDOMNode())},f.getCursorPosition=function(){return f.getSelection().start},f.setCursorPosition=function(e){f.setSelection(e,e);},f.isFocused=function(){return f.focused},f.getBeforeMaskedValueChangeConfig=function(){var e=f.maskOptions,t=e.mask,n=e.maskChar,a=e.permanents,i=e.formatChars;return {mask:t,maskChar:n,permanents:a,alwaysShowMask:!!f.props.alwaysShowMask,formatChars:i}},f.isInputAutofilled=function(e,t,n,a){var i=f.getInputDOMNode();try{if(i.matches(":-webkit-autofill"))return !0}catch(r){}return !f.focused||a.end<n.length&&t.end===e.length},f.onChange=function(e){var t=_assertThisInitialized(_assertThisInitialized(f)).beforePasteState,n=_assertThisInitialized(_assertThisInitialized(f)).previousSelection,a=f.props.beforeMaskedValueChange,i=f.getInputValue(),r=f.value,o=f.getSelection();f.isInputAutofilled(i,o,r,n)&&(r=formatValue(f.maskOptions,""),n={start:0,end:0,length:0}),t&&(n=t.selection,r=t.value,o={start:n.start+i.length,end:n.start+i.length,length:0},i=r.slice(0,n.start)+i+r.slice(n.end),f.beforePasteState=null);var s=processChange(f.maskOptions,i,o,r,n),l=s.enteredString,u=s.selection,c=s.value;if(isFunction(a)){var h=a({value:c,selection:u},{value:r,selection:n},l,f.getBeforeMaskedValueChangeConfig());c=h.value,u=h.selection;}f.setInputValue(c),isFunction(f.props.onChange)&&f.props.onChange(e),f.isWindowsPhoneBrowser?f.setSelection(u.start,u.end,{deferred:!0}):f.setSelection(u.start,u.end);},f.onFocus=function(e){var t=f.props.beforeMaskedValueChange,n=f.maskOptions,a=n.mask,i=n.prefix;if(f.focused=!0,f.mounted=!0,a){if(f.value)getFilledLength(f.maskOptions,f.value)<f.maskOptions.mask.length&&f.setCursorToEnd();else {var r=formatValue(f.maskOptions,i),o=formatValue(f.maskOptions,r),s=getFilledLength(f.maskOptions,o),l=getRightEditablePosition(f.maskOptions,s),u={start:l,end:l};if(isFunction(t)){var c=t({value:o,selection:u},{value:f.value,selection:null},null,f.getBeforeMaskedValueChangeConfig());o=c.value,u=c.selection;}var h=o!==f.getInputValue();h&&f.setInputValue(o),h&&isFunction(f.props.onChange)&&f.props.onChange(e),f.setSelection(u.start,u.end);}f.runSaveSelectionLoop();}isFunction(f.props.onFocus)&&f.props.onFocus(e);},f.onBlur=function(e){var t=f.props.beforeMaskedValueChange,n=f.maskOptions.mask;if(f.stopSaveSelectionLoop(),f.focused=!1,n&&!f.props.alwaysShowMask&&isEmpty(f.maskOptions,f.value)){var a="";if(isFunction(t))a=t({value:a,selection:null},{value:f.value,selection:f.previousSelection},null,f.getBeforeMaskedValueChangeConfig()).value;var i=a!==f.getInputValue();i&&f.setInputValue(a),i&&isFunction(f.props.onChange)&&f.props.onChange(e);}isFunction(f.props.onBlur)&&f.props.onBlur(e);},f.onMouseDown=function(e){if(!f.focused&&document.addEventListener){f.mouseDownX=e.clientX,f.mouseDownY=e.clientY,f.mouseDownTime=(new Date).getTime();var r=function r(e){if(document.removeEventListener("mouseup",r),f.focused){var t=Math.abs(e.clientX-f.mouseDownX),n=Math.abs(e.clientY-f.mouseDownY),a=Math.max(t,n),i=(new Date).getTime()-f.mouseDownTime;(a<=10&&i<=200||a<=5&&i<=300)&&f.setCursorToEnd();}};document.addEventListener("mouseup",r);}isFunction(f.props.onMouseDown)&&f.props.onMouseDown(e);},f.onPaste=function(e){isFunction(f.props.onPaste)&&f.props.onPaste(e),e.defaultPrevented||(f.beforePasteState={value:f.getInputValue(),selection:f.getSelection()},f.setInputValue(""));},f.handleRef=function(e){null==f.props.children&&isFunction(f.props.inputRef)&&f.props.inputRef(e);};var t=e.mask,n=e.maskChar,a=e.formatChars,i=e.alwaysShowMask,r=e.beforeMaskedValueChange,o=e.defaultValue,s=e.value;f.maskOptions=parseMask(t,n,a),null==o&&(o=""),null==s&&(s=o);var l=getStringValue(s);if(f.maskOptions.mask&&(i||l)&&(l=formatValue(f.maskOptions,l),isFunction(r))){var u=e.value;null==e.value&&(u=o),l=r({value:l,selection:null},{value:u=getStringValue(u),selection:null},null,f.getBeforeMaskedValueChangeConfig()).value;}return f.value=l,f}_inheritsLoose(e,c);var t=e.prototype;return t.componentDidMount=function(){this.mounted=!0,this.getInputDOMNode()&&(this.isWindowsPhoneBrowser=isWindowsPhoneBrowser(),this.maskOptions.mask&&this.getInputValue()!==this.value&&this.setInputValue(this.value));},t.componentDidUpdate=function(){var e=this.previousSelection,t=this.props,n=t.beforeMaskedValueChange,a=t.alwaysShowMask,i=t.mask,r=t.maskChar,o=t.formatChars,s=this.maskOptions,l=a||this.isFocused(),u=null!=this.props.value,c=u?getStringValue(this.props.value):this.value,h=e?e.start:null;if(this.maskOptions=parseMask(i,r,o),this.maskOptions.mask){!s.mask&&this.isFocused()&&this.runSaveSelectionLoop();var f=this.maskOptions.mask&&this.maskOptions.mask!==s.mask;if(s.mask||u||(c=this.getInputValue()),(f||this.maskOptions.mask&&(c||l))&&(c=formatValue(this.maskOptions,c)),f){var p=getFilledLength(this.maskOptions,c);(null===h||p<h)&&(h=isFilled(this.maskOptions,c)?p:getRightEditablePosition(this.maskOptions,p));}!this.maskOptions.mask||!isEmpty(this.maskOptions,c)||l||u&&this.props.value||(c="");var d={start:h,end:h};if(isFunction(n)){var m=n({value:c,selection:d},{value:this.value,selection:this.previousSelection},null,this.getBeforeMaskedValueChangeConfig());c=m.value,d=m.selection;}this.value=c;var g=this.getInputValue()!==this.value;g?(this.setInputValue(this.value),this.forceUpdate()):f&&this.forceUpdate();var v=!1;null!=d.start&&null!=d.end&&(v=!e||e.start!==d.start||e.end!==d.end),(v||g)&&this.setSelection(d.start,d.end);}else s.mask&&(this.stopSaveSelectionLoop(),this.forceUpdate());},t.componentWillUnmount=function(){this.mounted=!1,null!==this.selectionDeferId&&cancelDefer(this.selectionDeferId),this.stopSaveSelectionLoop();},t.render=function(){var t,e=this.props,n=(e.mask,e.alwaysShowMask,e.maskChar,e.formatChars,e.inputRef,e.beforeMaskedValueChange,e.children),a=_objectWithoutPropertiesLoose(e,["mask","alwaysShowMask","maskChar","formatChars","inputRef","beforeMaskedValueChange","children"]);if(n){isFunction(n)||invariant_1(!1);var i=["onChange","onPaste","onMouseDown","onFocus","onBlur","value","disabled","readOnly"],r=_extends({},a);i.forEach(function(e){return delete r[e]}),t=n(r),i.filter(function(e){return null!=t.props[e]&&t.props[e]!==a[e]}).length&&invariant_1(!1);}else t=React.createElement("input",_extends({ref:this.handleRef},a));var o={onFocus:this.onFocus,onBlur:this.onBlur};return this.maskOptions.mask&&(a.disabled||a.readOnly||(o.onChange=this.onChange,o.onPaste=this.onPaste,o.onMouseDown=this.onMouseDown),null!=a.value&&(o.value=this.value)),t=React.cloneElement(t,o)},e}(React.Component);var reactInputMask_production_min=InputElement;

var reactInputMask = createCommonjsModule(function (module) {
{
  module.exports = reactInputMask_production_min;
}
});

var _templateObject$W, _templateObject2$F, _templateObject3$D, _templateObject4$C, _templateObject5$w, _templateObject6$v, _templateObject7$s, _templateObject8$s, _templateObject9$l, _templateObject10$k, _templateObject11$g;
var FieldWrapper$1 = function FieldWrapper(styleProps) {
  return css(_templateObject$W || (_templateObject$W = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var Label$2 = function Label(styleProps) {
  return css(_templateObject2$F || (_templateObject2$F = _taggedTemplateLiteralLoose(["\n  &&& {\n    margin-bottom: 0px;\n  }\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var LabelWrapper$1 = function LabelWrapper(styleProps) {
  return css(_templateObject3$D || (_templateObject3$D = _taggedTemplateLiteralLoose(["\n  margin-bottom: ", "rem;\n\n  ", "\n\n  & {\n    ", ";\n  }\n"])), space(3)(styleProps), (styleProps.variant === 'borderless' || styleProps.variant === 'underline') && css$1(_templateObject4$C || (_templateObject4$C = _taggedTemplateLiteralLoose(["\n      margin-bottom: ", "rem;\n    "])), space(1)(styleProps)), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var DescriptionText = function DescriptionText(styleProps) {
  return css(_templateObject5$w || (_templateObject5$w = _taggedTemplateLiteralLoose(["\n  display: block;\n  margin-top: ", "rem;\n\n  && {\n    ", ";\n  }\n\n  & {\n    ", ";\n  }\n"])), space(2)(styleProps), getCapsizeStyles({
    fontSize: '150'
  })(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var HintText = function HintText(styleProps) {
  return css(_templateObject6$v || (_templateObject6$v = _taggedTemplateLiteralLoose(["\n  display: block;\n  font-size: ", "rem;\n\n  & {\n    ", ";\n  }\n"])), fontSize('150')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var OptionalText = function OptionalText(styleProps) {
  return css(_templateObject7$s || (_templateObject7$s = _taggedTemplateLiteralLoose(["\n  font-size: ", "rem;\n  color: ", ";\n  margin-left: ", "rem;\n  line-height: ", ";\n\n  & {\n    ", ";\n  }\n"])), fontSize('150')(styleProps), palette('text100')(styleProps), space(2)(styleProps), lineHeight('none')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var RequiredText = function RequiredText(styleProps) {
  return css(_templateObject8$s || (_templateObject8$s = _taggedTemplateLiteralLoose(["\n  color: ", ";\n  margin-left: ", "rem;\n  font-weight: ", ";\n  font-size: ", "rem;\n\n  & {\n    ", ";\n  }\n"])), palette('danger')(styleProps), space(1)(styleProps), fontWeight('semibold')(styleProps), fontSize('150')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var ValidationText = function ValidationText(styleProps) {
  return css(_templateObject9$l || (_templateObject9$l = _taggedTemplateLiteralLoose(["\n  display: block;\n  font-size: ", "rem;\n\n  & {\n    ", ";\n  }\n"])), fontSize('150')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var TooltipTrigger = function TooltipTrigger(styleProps) {
  return css(_templateObject10$k || (_templateObject10$k = _taggedTemplateLiteralLoose(["\n  && {\n    font-size: ", "rem;\n    padding: ", "rem;\n    min-height: unset;\n  }\n\n  & {\n    ", ";\n  }\n"])), fontSize('100')(styleProps), space(1)(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var TooltipPopover = function TooltipPopover(styleProps) {
  return css(_templateObject11$g || (_templateObject11$g = _taggedTemplateLiteralLoose(["\n  && {\n    position: absolute;\n    padding: ", "rem;\n    margin-top: ", "rem;\n    width: max-content;\n    max-width: 400px;\n    z-index: 999999;\n    ", ";\n  }\n\n  & {\n    ", ";\n  }\n"])), space(1, 'major')(styleProps), space(1, 'major')(styleProps), altitude('300')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var _templateObject$V, _templateObject2$E, _templateObject3$C, _templateObject4$B, _templateObject5$v;
var Card$2 = function Card(styleProps) {
  return css(_templateObject$V || (_templateObject$V = _taggedTemplateLiteralLoose(["\n  background-color: ", ";\n  border-radius: ", ";\n  padding: ", "rem;\n\n  & {\n    ", ";\n  }\n"])), palette('background', {
    dark: 'gray900'
  })(styleProps), borderRadius('default')(styleProps), space(3, 'major')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var CardContent$1 = function CardContent(styleProps) {
  return css(_templateObject2$E || (_templateObject2$E = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var CardHeader$1 = function CardHeader(styleProps) {
  return css(_templateObject3$C || (_templateObject3$C = _taggedTemplateLiteralLoose(["\n  margin-bottom: ", "rem;\n  align-items: center;\n  justify-content: space-between;\n\n  & {\n    ", ";\n  }\n"])), space(2, 'major')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var CardTitle$1 = function CardTitle(styleProps) {
  return css(_templateObject4$B || (_templateObject4$B = _taggedTemplateLiteralLoose(["\n  font-weight: ", ";\n  font-size: ", "em;\n\n  & {\n    ", ";\n  }\n"])), fontWeight('semibold')(styleProps), fontSize('300')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var CardFooter$1 = function CardFooter(styleProps) {
  return css(_templateObject5$v || (_templateObject5$v = _taggedTemplateLiteralLoose(["\n  margin-top: ", "rem;\n\n  & {\n    ", ";\n  }\n"])), space(3, 'major')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var CardContext = react.createContext({});
var useProps$1N = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var footer = props.footer,
      headerAddon = props.headerAddon,
      overrides = props.overrides,
      standalone = props.standalone,
      title = props.title,
      variant = props.variant,
      restProps = _objectWithoutPropertiesLoose$4(props, ["footer", "headerAddon", "overrides", "standalone", "title", "variant"]);

  var boxProps = Box.useProps(_objectSpread2$3({
    altitude: variant === 'shadowed' ? '100' : null,
    border: variant === 'bordered' ? 'default' : null
  }, restProps));
  var className = useClassName({
    style: Card$2,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var titleId = useUniqueId();
  var descriptionId = useUniqueId();
  var context = react.useMemo(function () {
    return _objectSpread2$3({
      descriptionId: descriptionId,
      titleId: titleId
    }, props);
  }, [descriptionId, props, titleId]);
  var children = /*#__PURE__*/react.createElement(CardContext.Provider, {
    value: context
  }, standalone ? props.children : /*#__PURE__*/react.createElement(react.Fragment, null, title && /*#__PURE__*/react.createElement(CardHeader, {
    overrides: overrides
  }, /*#__PURE__*/react.createElement(CardTitle, {
    overrides: overrides
  }, title), headerAddon && /*#__PURE__*/react.createElement(Box, null, headerAddon)), /*#__PURE__*/react.createElement(CardContent, {
    overrides: overrides
  }, props.children), footer && /*#__PURE__*/react.createElement(CardFooter, {
    overrides: overrides
  }, footer)));
  return _objectSpread2$3(_objectSpread2$3({
    'aria-describedby': props.children ? descriptionId : undefined,
    'aria-labelledby': props.title ? titleId : undefined
  }, boxProps), {}, {
    className: className,
    children: children
  });
}, {
  defaultProps: {
    variant: 'shadowed'
  },
  themeKey: 'Card'
});
var Card$1 = createComponent(function (props) {
  var cardProps = useProps$1N(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: cardProps
  });
}, {
  attach: {
    useProps: useProps$1N,
    displayName: 'Card'
  },
  themeKey: 'Card'
}); /////////////////////////////////////

function CardContent(props) {
  var children = props.children,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children"]);

  var context = react.useContext(CardContext);
  var cardContentClassName = useClassName({
    style: CardContent$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, context), props),
    themeKey: context.themeKey || 'Card',
    themeKeySuffix: 'Content'
  });
  return /*#__PURE__*/react.createElement(Box, _extends$1({
    className: cardContentClassName,
    id: context.descriptionId
  }, restProps), children);
} /////////////////////////////////////

function CardTitle(props) {
  var children = props.children,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children"]);

  var context = react.useContext(CardContext);
  var cardTitleClassName = useClassName({
    style: CardTitle$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, context), props),
    themeKey: context.themeKey || 'Card',
    themeKeySuffix: 'Title'
  });
  return /*#__PURE__*/react.createElement(Box, _extends$1({
    className: cardTitleClassName,
    id: context.titleId
  }, restProps), children);
} /////////////////////////////////////

function CardHeader(props) {
  var children = props.children,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children"]);

  var context = react.useContext(CardContext);
  var cardHeaderClassName = useClassName({
    style: CardHeader$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, context), props),
    themeKey: context.themeKey || 'Card',
    themeKeySuffix: 'Header'
  });
  return /*#__PURE__*/react.createElement(Flex, _extends$1({
    className: cardHeaderClassName
  }, restProps), children);
} /////////////////////////////////////

function CardFooter(props) {
  var children = props.children,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children"]);

  var context = react.useContext(CardContext);
  var cardFooterClassName = useClassName({
    style: CardFooter$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, context), props),
    themeKey: context.themeKey || 'Card',
    themeKeySuffix: 'Footer'
  });
  return /*#__PURE__*/react.createElement(Box, _extends$1({
    className: cardFooterClassName
  }, restProps), children);
}

var Card = Object.assign(Card$1, {
  Header: CardHeader,
  Title: CardTitle,
  Content: CardContent,
  Footer: CardFooter
});

var _templateObject$U, _templateObject2$D;
var Disclosure$2 = function Disclosure(styleProps) {
  return css(_templateObject$U || (_templateObject$U = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var DisclosureContent$1 = function DisclosureContent(styleProps) {
  return css(_templateObject2$D || (_templateObject2$D = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var DisclosureContext = react.createContext({
  disclosure: {}
});
function useDisclosureState(initialState) {
  return useDisclosureState$1(initialState);
}
function useDisclosureContext() {
  return react.useContext(DisclosureContext);
}
function DisclosureState(props) {
  props.children;
      var restProps = _objectWithoutPropertiesLoose$4(props, ["children"]);

  var disclosure = useDisclosureState(restProps);
  var contextValue = react.useMemo(function () {
    return {
      disclosure: disclosure
    };
  }, [disclosure]);
  return /*#__PURE__*/react.createElement(DisclosureContext.Provider, {
    value: contextValue
  }, isFunction$2(props.children) ? props.children(disclosure) : props.children);
}

var useProps$1M = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var disclosureContext = react.useContext(DisclosureContext);
  props = _objectSpread2$3(_objectSpread2$3({}, props), disclosureContext.disclosure);

  var _props = props,
      disabled = _props.disabled,
      focusable = _props.focusable,
      visible = _props.visible,
      toggle = _props.toggle,
      baseId = _props.baseId,
      htmlProps = _objectWithoutPropertiesLoose$4(_props, ["disabled", "focusable", "visible", "toggle", "baseId"]);

  var DisclosureProps = useDisclosure({
    disabled: disabled,
    focusable: focusable,
    visible: visible,
    toggle: toggle,
    baseId: baseId
  }, htmlProps);
  htmlProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, htmlProps), DisclosureProps));
  var className = useClassName({
    style: Disclosure$2,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: htmlProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, htmlProps), {}, {
    className: className
  });
}, {
  themeKey: 'Disclosure'
});
var Disclosure$1 = createComponent(function (props) {
  var DisclosureProps = useProps$1M(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: DisclosureProps
  });
}, {
  attach: {
    useProps: useProps$1M,
    displayName: 'Disclosure'
  },
  defaultProps: {
    use: 'button'
  },
  themeKey: 'Disclosure'
});

var useProps$1L = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var disclosureContext = react.useContext(DisclosureContext);
  props = _objectSpread2$3(_objectSpread2$3({}, props), disclosureContext.disclosure);

  var _props = props,
      baseId = _props.baseId,
      visible = _props.visible,
      animating = _props.animating,
      animated = _props.animated,
      stopAnimation = _props.stopAnimation,
      htmlProps = _objectWithoutPropertiesLoose$4(_props, ["baseId", "visible", "animating", "animated", "stopAnimation"]);

  var disclosureContentProps = useDisclosureContent({
    baseId: baseId,
    visible: visible,
    animating: animating,
    animated: animated,
    stopAnimation: stopAnimation
  }, htmlProps);
  htmlProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, props), disclosureContentProps));
  var className = useClassName({
    style: DisclosureContent$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: htmlProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, htmlProps), {}, {
    className: className
  });
}, {
  themeKey: 'Disclosure.Content'
});
var DisclosureContent = createComponent(function (props) {
  var disclosureContentProps = useProps$1L(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: disclosureContentProps
  });
}, {
  attach: {
    useProps: useProps$1L,
    displayName: 'Disclosure.Content'
  },
  themeKey: 'Disclosure.Content'
});

var Disclosure = Object.assign(Disclosure$1, {
  Content: DisclosureContent,
  useContext: useDisclosureContext,
  useState: useDisclosureState,
  State: DisclosureState
});

var _templateObject$T;
var Label$1 = function Label(styleProps) {
  return css(_templateObject$T || (_templateObject$T = _taggedTemplateLiteralLoose(["\n  display: block;\n  font-weight: ", ";\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), fontWeight('semibold')(styleProps), getCapsizeStyles({
    lineHeight: '100',
    includeBottomGap: true
  })(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$1K = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: Label$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Label'
});
var Label = createComponent(function (props) {
  var textProps = useProps$1K(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$1K,
    displayName: 'Label'
  },
  defaultProps: {
    use: 'label'
  },
  themeKey: 'Label'
});

var useProps$1J = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var children = props.children,
      description = props.description,
      hint = props.hint,
      isOptional = props.isOptional,
      label = props.label,
      labelType = props.labelType,
      isRequired = props.isRequired,
      state = props.state,
      tooltip = props.tooltip,
      tooltipTriggerComponent = props.tooltipTriggerComponent,
      validationText = props.validationText,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children", "description", "hint", "isOptional", "label", "labelType", "isRequired", "state", "tooltip", "tooltipTriggerComponent", "validationText"]);

  var boxProps = Box.useProps(restProps);
  var className = useClassName({
    style: FieldWrapper$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var labelClassName = useClassName({
    style: Label$2,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Label'
  });
  var labelWrapperClassName = useClassName({
    style: LabelWrapper$1,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'LabelWrapper'
  });
  var descriptionClassName = useClassName({
    style: DescriptionText,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'DescriptionText'
  });
  var hintClassName = useClassName({
    style: HintText,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'HintText'
  });
  var optionalClassName = useClassName({
    style: OptionalText,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'OptionalText'
  });
  var requiredClassName = useClassName({
    style: RequiredText,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'RequiredText'
  });
  var validationClassName = useClassName({
    style: ValidationText,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'ValidationText'
  });
  var tooltipTriggerClassName = useClassName({
    style: TooltipTrigger,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'TooltipTrigger'
  });
  var tooltipPopoverClassName = useClassName({
    style: TooltipPopover,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'TooltipPopover'
  });
  var disclosure = Disclosure.useState();
  var uid = useUniqueId();
  var elementProps = {
    isRequired: isRequired,
    id: uid,
    state: state
  };
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(react.Fragment, null, label && /*#__PURE__*/react.createElement(Box, {
      className: labelWrapperClassName
    }, /*#__PURE__*/react.createElement(Box, {
      display: "flex",
      alignItems: "center",
      lineHeight: "none"
    }, typeof label === 'string' ? /*#__PURE__*/react.createElement(react.Fragment, null, labelType === 'legend' ? /*#__PURE__*/react.createElement(Label, {
      use: "legend",
      className: labelClassName
    }, label) :
    /*#__PURE__*/
    // @ts-ignore
    react.createElement(Label, {
      className: labelClassName,
      htmlFor: uid
    }, label)) : label, isOptional && /*#__PURE__*/react.createElement(Box, {
      className: optionalClassName
    }, "OPTIONAL"), isRequired && /*#__PURE__*/react.createElement(Box, {
      className: requiredClassName
    }, "*"), tooltip && /*#__PURE__*/react.createElement(Box, {
      position: "relative",
      marginLeft: "minor-2"
    }, /*#__PURE__*/react.createElement(OutsideClickHandler, {
      onOutsideClick: disclosure.hide
    }, tooltipTriggerComponent ? react.cloneElement(tooltipTriggerComponent, {
      onClick: disclosure.toggle
    }) : /*#__PURE__*/react.createElement(Button, {
      className: tooltipTriggerClassName,
      onClick: disclosure.toggle
    }, /*#__PURE__*/react.createElement(VisuallyHidden, null, "Toggle tooltip"), /*#__PURE__*/react.createElement(Icon, {
      "aria-hidden": true,
      icon: "question-circle",
      verticalAlign: "-0.125rem"
    }))), disclosure.visible && /*#__PURE__*/react.createElement(Card, {
      className: tooltipPopoverClassName
    }, typeof tooltip === 'string' ? /*#__PURE__*/react.createElement(Text, {
      fontSize: "150"
    }, tooltip) : tooltip))), description && /*#__PURE__*/react.createElement(Box, {
      marginTop: "minor-1"
    }, typeof description === 'string' ? /*#__PURE__*/react.createElement(Text.Block, {
      className: descriptionClassName
    }, description) : description)), typeof children === 'function' ?
    /*
    // @ts-ignore */
    children({
      elementProps: elementProps
    }) : react.cloneElement(children, elementProps), hint && /*#__PURE__*/react.createElement(Box, {
      marginTop: "minor-1"
    }, typeof hint === 'string' ? /*#__PURE__*/react.createElement(Box, {
      className: hintClassName
    }, hint) : hint), validationText && /*#__PURE__*/react.createElement(Box, {
      className: validationClassName,
      color: state
    }, validationText))
  });
}, {
  themeKey: 'FieldWrapper'
});
var FieldWrapper = createComponent(function (props) {
  var textProps = useProps$1J(props);
  return createElement({
    children: props.children,
    component: Box$2,
    enableRenderPropsComposition: false,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$1J,
    displayName: 'FieldWrapper'
  },
  themeKey: 'FieldWrapper'
});

var _templateObject$S, _templateObject2$C, _templateObject3$B, _templateObject4$A, _templateObject5$u, _templateObject6$u, _templateObject7$r, _templateObject8$r, _templateObject9$k, _templateObject10$j, _templateObject11$f, _templateObject12$e, _templateObject13$a, _templateObject14$9, _templateObject15$9, _templateObject16$9, _templateObject17$9, _templateObject18$7, _templateObject19$6, _templateObject20$6, _templateObject21$5, _templateObject22$3;
var Group$1 = function Group(styleProps) {
  return css(_templateObject$S || (_templateObject$S = _taggedTemplateLiteralLoose(["\n  flex-direction: ", ";\n\n  ", ";\n\n  && > * {\n    border-radius: 0px;\n    ", ";\n  }\n\n  & input,\n  & select {\n    border-radius: 0px;\n\n    &:focus {\n      z-index: 1;\n      position: relative;\n    }\n  }\n\n  & > *:first-child {\n    ", "\n\n    & input,\n    & select {\n      ", ";\n    }\n\n    ", ";\n  }\n\n  & > *:last-child {\n    ", "\n\n    & input,\n    & select {\n      ", ";\n    }\n\n    ", ";\n  }\n\n  & > *:not(:first-child):not(:last-child),\n  & > *:not(:first-child):not(:last-child) > input,\n  & > *:not(:first-child):not(:last-child) > select {\n    border-radius: 0;\n    ", ";\n  }\n\n  & > *:not(:first-child) {\n    ", "\n  }\n\n  & {\n    ", ";\n  }\n"])), styleProps.orientation === 'vertical' ? 'column' : 'row', breakpoint(styleProps.verticalBelow ? "max-" + styleProps.verticalBelow : null, css$1(_templateObject2$C || (_templateObject2$C = _taggedTemplateLiteralLoose(["\n      flex-direction: column;\n    "]))))(styleProps), theme(styleProps.themeKey, "Item.styles.base")(styleProps), styleProps.orientation === 'vertical' ? css$1(_templateObject3$B || (_templateObject3$B = _taggedTemplateLiteralLoose(["\n            border-top-right-radius: ", ";\n            border-top-left-radius: ", ";\n          "])), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps)) : css$1(_templateObject4$A || (_templateObject4$A = _taggedTemplateLiteralLoose(["\n            ", ";\n          "])), breakpoint(styleProps.verticalBelow ? "max-" + styleProps.verticalBelow : null, css$1(_templateObject5$u || (_templateObject5$u = _taggedTemplateLiteralLoose(["\n                border-top-right-radius: ", ";\n                border-top-left-radius: ", ";\n              "])), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps)), {
    else: css$1(_templateObject6$u || (_templateObject6$u = _taggedTemplateLiteralLoose(["\n                  border-bottom-left-radius: ", ";\n                  border-top-left-radius: ", ";\n                "])), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps))
  })(styleProps)), styleProps.orientation === 'vertical' ? css$1(_templateObject7$r || (_templateObject7$r = _taggedTemplateLiteralLoose(["\n              border-top-right-radius: ", ";\n              border-top-left-radius: ", ";\n            "])), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps)) : css$1(_templateObject8$r || (_templateObject8$r = _taggedTemplateLiteralLoose(["\n              ", ";\n            "])), breakpoint(styleProps.verticalBelow ? "max-" + styleProps.verticalBelow : null, css$1(_templateObject9$k || (_templateObject9$k = _taggedTemplateLiteralLoose(["\n                  border-top-right-radius: ", ";\n                  border-top-left-radius: ", ";\n                "])), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps)), {
    else: css$1(_templateObject10$j || (_templateObject10$j = _taggedTemplateLiteralLoose(["\n                    border-bottom-left-radius: ", ";\n                    border-top-left-radius: ", ";\n                  "])), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps))
  })(styleProps)), theme(styleProps.themeKey, "Item.styles.first")(styleProps), styleProps.orientation === 'vertical' ? css$1(_templateObject11$f || (_templateObject11$f = _taggedTemplateLiteralLoose(["\n            border-bottom-right-radius: ", ";\n            border-bottom-left-radius: ", ";\n          "])), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps)) : css$1(_templateObject12$e || (_templateObject12$e = _taggedTemplateLiteralLoose(["\n            ", ";\n          "])), breakpoint(styleProps.verticalBelow ? "max-" + styleProps.verticalBelow : null, css$1(_templateObject13$a || (_templateObject13$a = _taggedTemplateLiteralLoose(["\n                border-bottom-left-radius: ", ";\n                border-bottom-right-radius: ", ";\n              "])), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps)), {
    else: css$1(_templateObject14$9 || (_templateObject14$9 = _taggedTemplateLiteralLoose(["\n                  border-top-right-radius: ", ";\n                  border-bottom-right-radius: ", ";\n                "])), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps))
  })(styleProps)), styleProps.orientation === 'vertical' ? css$1(_templateObject15$9 || (_templateObject15$9 = _taggedTemplateLiteralLoose(["\n              border-bottom-left-radius: ", ";\n              border-bottom-right-radius: ", ";\n            "])), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps)) : css$1(_templateObject16$9 || (_templateObject16$9 = _taggedTemplateLiteralLoose(["\n              ", ";\n            "])), breakpoint(styleProps.verticalBelow ? "max-" + styleProps.verticalBelow : null, css$1(_templateObject17$9 || (_templateObject17$9 = _taggedTemplateLiteralLoose(["\n                  border-bottom-left-radius: ", ";\n                  border-bottom-right-radius: ", ";\n                "])), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps)), {
    else: css$1(_templateObject18$7 || (_templateObject18$7 = _taggedTemplateLiteralLoose(["\n                    border-top-right-radius: ", ";\n                    border-bottom-right-radius: ", ";\n                  "])), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps), borderRadius(styleProps.borderRadius, styleProps.borderRadius)(styleProps))
  })(styleProps)), theme(styleProps.themeKey, "Item.styles.last")(styleProps), theme(styleProps.themeKey, "Item.styles.middle")(styleProps), styleProps.orientation === 'vertical' ? css$1(_templateObject19$6 || (_templateObject19$6 = _taggedTemplateLiteralLoose(["\n            border-top-width: 0;\n          "]))) : css$1(_templateObject20$6 || (_templateObject20$6 = _taggedTemplateLiteralLoose(["\n            ", ";\n          "])), breakpoint(styleProps.verticalBelow ? "max-" + styleProps.verticalBelow : null, css$1(_templateObject21$5 || (_templateObject21$5 = _taggedTemplateLiteralLoose(["\n                border-top-width: 0;\n              "]))), {
    else: css$1(_templateObject22$3 || (_templateObject22$3 = _taggedTemplateLiteralLoose(["\n                  border-left-width: 0;\n                "])))
  })(styleProps)), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$1I = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var htmlProps = props;
  var groupProps = useGroup({}, htmlProps);
  htmlProps = Flex.useProps(_objectSpread2$3(_objectSpread2$3({}, props), groupProps));
  var className = useClassName({
    style: Group$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: htmlProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, htmlProps), {}, {
    className: className
  });
}, {
  defaultProps: {
    borderRadius: 'default'
  },
  themeKey: 'Group'
});
var Group = createComponent(function (props) {
  var groupProps = useProps$1I(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: groupProps
  });
}, {
  attach: {
    useProps: useProps$1I,
    displayName: 'Group'
  },
  themeKey: 'Group'
});

var useProps$1H = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var ref = react.useRef();

  var before = props.before,
      after = props.after,
      inputProps = props.inputProps,
      inputRef = props.inputRef,
      isLoading = props.isLoading,
      isRequired = props.isRequired,
      state = props.state,
      restProps = _objectWithoutPropertiesLoose$4(props, ["before", "after", "inputProps", "inputRef", "isLoading", "isRequired", "state"]);

  var label = (props === null || props === void 0 ? void 0 : props.label) || (inputProps === null || inputProps === void 0 ? void 0 : inputProps.label);

  var _useLabelPlaceholder = useLabelPlaceholder(_objectSpread2$3({
    enabled: Boolean(label)
  }, props)),
      isFocused = _useLabelPlaceholder.isFocused,
      labelPlaceholderInputProps = _useLabelPlaceholder.inputProps;

  var wrapperClassName = useClassName({
    style: InputWrapper,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Wrapper',
    prevClassName: restProps.className
  });
  var labelWrapperClassName = useClassName({
    style: LabelWrapper$2,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      isFocused: isFocused
    }),
    themeKey: themeKey,
    themeKeySuffix: 'LabelWrapper'
  });
  var labelWrapperBackgroundClassName = useClassName({
    style: LabelWrapperBackground$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      isFocused: isFocused
    }),
    themeKey: themeKey,
    themeKeySuffix: 'LabelWrapperBackground'
  });
  var spinnerClassName = useClassName({
    style: InputSpinner,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Spinner'
  });
  var boxProps = Box.useProps(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3({}, omitCSSProps(restProps)), inputProps), labelPlaceholderInputProps), {}, {
    className: undefined,
    elementRef: mergeRefs(ref, inputRef, props.elementRef),
    wrapElement: function wrapElement(children) {
      return /*#__PURE__*/react.createElement(Box, _extends$1({
        className: wrapperClassName
      }, pickCSSProps(props)), label && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Box, {
        className: labelWrapperBackgroundClassName
      }, /*#__PURE__*/react.createElement(Text, {
        opacity: "0"
      }, label)), /*#__PURE__*/react.createElement(Box, {
        className: labelWrapperClassName,
        onClick: function onClick() {
          var _ref$current;

          return ref === null || ref === void 0 ? void 0 : (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.focus();
        }
      }, /*#__PURE__*/react.createElement(Text, null, label))), before && /*#__PURE__*/react.createElement(Box, {
        display: "inline-flex",
        position: "absolute",
        zIndex: "3",
        height: "100%"
      }, before), after && /*#__PURE__*/react.createElement(Box, {
        display: "inline-flex",
        position: "absolute",
        right: "0",
        zIndex: "3",
        height: "100%"
      }, after), children, isLoading && /*#__PURE__*/react.createElement(Spinner, {
        className: spinnerClassName,
        color: "text"
      }));
    }
  }));
  var className = useClassName({
    style: Input$2,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    'aria-invalid': state === 'danger',
    'aria-required': isRequired
  });
}, {
  defaultProps: {
    variant: 'bordered',
    type: 'text'
  },
  themeKey: 'Input'
});
var Input$1 = createComponent(function (props) {
  var inputProps = useProps$1H(props);
  var use = props.use;

  if (props.mask) {
    use = reactInputMask;
  }

  return createElement({
    children: props.children,
    component: Box$2,
    use: use,
    htmlProps: _objectSpread2$3(_objectSpread2$3({}, inputProps), props.mask ? {
      mask: props.mask
    } : {})
  });
}, {
  attach: {
    useProps: useProps$1H,
    displayName: 'Input'
  },
  defaultProps: {
    use: 'input'
  },
  themeKey: 'Input'
}); ////////////////////////////////////////////////////////////////

function InputIcon(props) {
  var className = useClassName({
    style: InputIcon$1,
    styleProps: props,
    themeKey: 'Input.Icon',
    prevClassName: props.className
  });
  return /*#__PURE__*/react.createElement(Icon, _extends$1({
    color: "gray200"
  }, props, {
    className: className
  }));
} ////////////////////////////////////////////////////////////////

var useInputFieldProps = createHook(function (props, _ref2) {
  var themeKey = _ref2.themeKey;

  var addonAfter = props.addonAfter,
      addonBefore = props.addonBefore;
      props.children;
      var after = props.after,
      autoComplete = props.autoComplete,
      autoFocus = props.autoFocus,
      before = props.before,
      defaultValue = props.defaultValue,
      description = props.description,
      disabled = props.disabled,
      hint = props.hint,
      inputRef = props.inputRef,
      inputProps = props.inputProps,
      isLoading = props.isLoading,
      isOptional = props.isOptional,
      isRequired = props.isRequired,
      orientation = props.orientation,
      label = props.label,
      name = props.name,
      size = props.size,
      mask = props.mask,
      max = props.max,
      maxLength = props.maxLength,
      min = props.min,
      minLength = props.minLength,
      multiple = props.multiple,
      pattern = props.pattern,
      palette = props.palette,
      placeholder = props.placeholder,
      readOnly = props.readOnly,
      spellCheck = props.spellCheck,
      step = props.step,
      state = props.state,
      tooltip = props.tooltip,
      tooltipTriggerComponent = props.tooltipTriggerComponent,
      type = props.type,
      value = props.value,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onFocus = props.onFocus,
      overrides = props.overrides,
      validationText = props.validationText,
      variant = props.variant,
      restProps = _objectWithoutPropertiesLoose$4(props, ["addonAfter", "addonBefore", "children", "after", "autoComplete", "autoFocus", "before", "defaultValue", "description", "disabled", "hint", "inputRef", "inputProps", "isLoading", "isOptional", "isRequired", "orientation", "label", "name", "size", "mask", "max", "maxLength", "min", "minLength", "multiple", "pattern", "palette", "placeholder", "readOnly", "spellCheck", "step", "state", "tooltip", "tooltipTriggerComponent", "type", "value", "onBlur", "onChange", "onFocus", "overrides", "validationText", "variant"]);

  var boxProps = Box.useProps(restProps);
  var className = useClassName({
    style: InputField$2,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var groupClassName = useClassName({
    style: InputFieldGroup,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Group'
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(FieldWrapper, {
      description: description,
      hint: hint,
      isOptional: isOptional,
      isRequired: isRequired,
      label: label,
      overrides: overrides,
      state: state,
      tooltip: tooltip,
      tooltipTriggerComponent: tooltipTriggerComponent,
      variant: variant,
      validationText: validationText
    }, function (_ref3) {
      var elementProps = _ref3.elementProps;
      return /*#__PURE__*/react.createElement(ConditionalWrap, {
        condition: Boolean(addonBefore || addonAfter),
        wrap: function wrap(children) {
          return /*#__PURE__*/react.createElement(Group, {
            className: groupClassName,
            orientation: orientation,
            overrides: overrides
          }, children);
        }
      }, /*#__PURE__*/react.createElement(react.Fragment, null, addonBefore, /*#__PURE__*/react.createElement(Input$1, _extends$1({
        after: after,
        autoComplete: autoComplete,
        autoFocus: autoFocus,
        before: before,
        defaultValue: defaultValue,
        disabled: disabled,
        inputProps: inputProps,
        inputRef: inputRef,
        isLoading: isLoading,
        isRequired: isRequired,
        name: name,
        size: size,
        mask: mask,
        max: max,
        maxLength: maxLength,
        min: min,
        minLength: minLength,
        multiple: multiple,
        pattern: pattern,
        palette: palette,
        placeholder: placeholder,
        readOnly: readOnly,
        spellCheck: spellCheck,
        step: step,
        state: state,
        type: type,
        value: value,
        variant: variant,
        onBlur: onBlur,
        onChange: onChange,
        onFocus: onFocus,
        overrides: overrides
      }, elementProps)), addonAfter));
    })
  });
}, {
  defaultProps: {
    orientation: 'horizontal'
  },
  themeKey: 'InputField'
});
var InputField$1 = createComponent(function (props) {
  var inputFieldProps = useInputFieldProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: inputFieldProps
  });
}, {
  attach: {
    useProps: useProps$1H,
    displayName: 'InputField'
  },
  themeKey: 'InputField'
});

var Input = Object.assign(Input$1, {
  Icon: InputIcon,
  Formik: formikField(Input$1),
  ReduxForm: reduxFormField(Input$1)
});
var InputField = Object.assign(InputField$1, {
  Formik: formikField(InputField$1, {
    hasFieldWrapper: true
  }),
  ReduxForm: reduxFormField(InputField$1, {
    hasFieldWrapper: true
  })
});

var _templateObject$R, _templateObject2$B, _templateObject3$A, _templateObject4$z, _templateObject5$t, _templateObject6$t, _templateObject7$q, _templateObject8$q, _templateObject9$j, _templateObject10$i, _templateObject11$e, _templateObject12$d;
var Menu$2 = function Menu(styleProps) {
  return css(_templateObject$R || (_templateObject$R = _taggedTemplateLiteralLoose(["\n  width: 100%;\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var MenuItem$1 = function MenuItem(styleProps) {
  return css(_templateObject2$B || (_templateObject2$B = _taggedTemplateLiteralLoose(["\n  background-color: unset;\n  cursor: pointer;\n  display: block;\n  font-weight: ", ";\n  padding: ", "rem ", "rem;\n  text-align: left;\n  width: 100%;\n  transition: background-color 0.1s;\n\n  a& {\n    color: unset;\n    fill: unset;\n    text-decoration: unset;\n\n    &:hover {\n      color: unset;\n      fill: unset;\n    }\n  }\n\n  &[disabled] {\n    cursor: not-allowed;\n    opacity: 0.5;\n\n    & {\n      ", ";\n    }\n  }\n\n  &:not(:disabled):focus {\n    outline: unset;\n    background-color: ", ";\n\n    & {\n      ", ";\n    }\n  }\n  &:not(:disabled):hover {\n    background-color: ", ";\n\n    & {\n      ", ";\n    }\n  }\n  &:not(:disabled):focus:active,\n  &:not(:disabled):hover:active {\n    background-color: ", ";\n  }\n\n  ", "\n\n  & .bb-Icon {\n    vertical-align: -0.125em;\n  }\n\n  & {\n    ", ";\n  }\n"])), fontWeight('semibold')(styleProps), space(1.5)(styleProps), space(4)(styleProps), theme(styleProps.themeKey, "disabled")(styleProps), palette('white600', {
    dark: 'black200'
  })(styleProps), theme(styleProps.themeKey, "focus")(styleProps), palette('white600', {
    dark: 'black200'
  })(styleProps), theme(styleProps.themeKey, "hover")(styleProps), palette('white700', {
    dark: 'black300'
  })(styleProps), styleProps.isActive && css$1(_templateObject3$A || (_templateObject3$A = _taggedTemplateLiteralLoose(["\n      background-color: ", ";\n\n      &&:hover,\n      &&:focus {\n        background-color: ", ";\n      }\n\n      & {\n        ", ";\n      }\n    "])), palette('white700', {
    dark: 'black300'
  })(styleProps), palette('white800', {
    dark: 'black400'
  })(styleProps), theme(styleProps.themeKey, "active")(styleProps)), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var MenuItemIcon = function MenuItemIcon(styleProps) {
  return css(_templateObject4$z || (_templateObject4$z = _taggedTemplateLiteralLoose(["\n  ", "\n  ", "\n\n  & {\n    ", ";\n  }\n"])), styleProps.isBefore && css$1(_templateObject5$t || (_templateObject5$t = _taggedTemplateLiteralLoose(["\n      margin-right: ", "rem;\n    "])), space(2)(styleProps)), styleProps.isAfter && css$1(_templateObject6$t || (_templateObject6$t = _taggedTemplateLiteralLoose(["\n      margin-left: ", "rem;\n    "])), space(2)(styleProps)), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var MenuDivider$1 = function MenuDivider(styleProps) {
  return css(_templateObject7$q || (_templateObject7$q = _taggedTemplateLiteralLoose(["\n  && {\n    margin: ", "rem 0;\n  }\n\n  & {\n    ", ";\n  }\n"])), space(2)(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var MenuGroup$1 = function MenuGroup(styleProps) {
  return css(_templateObject8$q || (_templateObject8$q = _taggedTemplateLiteralLoose(["\n  & + & {\n    margin-top: ", "rem;\n  }\n\n  & {\n    ", ";\n  }\n"])), space(2, 'major')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var MenuOptionGroup$1 = function MenuOptionGroup(styleProps) {
  return css(_templateObject9$j || (_templateObject9$j = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var MenuOptionItem$1 = function MenuOptionItem(styleProps) {
  return css(_templateObject10$i || (_templateObject10$i = _taggedTemplateLiteralLoose(["\n  display: flex;\n  align-items: center;\n\n  &[aria-checked=\"true\"] {\n    color: ", ";\n  }\n\n  & {\n    ", ";\n  }\n"])), palette('primary')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var MenuOptionItemIconWrapper = function MenuOptionItemIconWrapper(styleProps) {
  return css(_templateObject11$e || (_templateObject11$e = _taggedTemplateLiteralLoose(["\n  margin-right: ", "rem;\n  width: 16px;\n\n  & {\n    ", ";\n  }\n"])), space(1, 'major')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var MenuGroupTitle = function MenuGroupTitle(styleProps) {
  return css(_templateObject12$d || (_templateObject12$d = _taggedTemplateLiteralLoose(["\n  color: ", ";\n  font-size: ", "rem;\n  font-weight: ", ";\n  letter-spacing: ", ";\n  padding: ", "rem ", "rem;\n  padding-top: ", "rem;\n  text-transform: uppercase;\n\n  & {\n    ", ";\n  }\n"])), palette('text100')(styleProps), fontSize('100')(styleProps), fontWeight('semibold')(styleProps), letterSpacing('400')(styleProps), space(2)(styleProps), space(4)(styleProps), space(1)(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var _templateObject$Q, _templateObject2$A, _templateObject3$z, _templateObject4$y, _templateObject6$s, _templateObject7$p, _templateObject8$p, _templateObject9$i, _templateObject10$h, _templateObject11$d, _templateObject12$c;
var DropdownMenu$2 = function DropdownMenu(styleProps) {
  return css(_templateObject$Q || (_templateObject$Q = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var DropdownMenuPopover$1 = function DropdownMenuPopover(styleProps) {
  return css(_templateObject2$A || (_templateObject2$A = _taggedTemplateLiteralLoose(["\n  ", " !important;\n\n  ", "\n\n  padding: ", "rem 0;\n  position: absolute;\n  min-width: 200px;\n  width: unset;\n"])), altitude(styleProps.altitude)(styleProps), Menu$2(styleProps), space(2)(styleProps));
};
var DropdownMenuItem$1 = function DropdownMenuItem(styleProps) {
  return css(_templateObject3$z || (_templateObject3$z = _taggedTemplateLiteralLoose(["\n  ", "\n"])), MenuItem$1(styleProps));
};
var DropdownMenuButton$1 = function DropdownMenuButton(styleProps) {
  return css(_templateObject4$y || (_templateObject4$y = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var DropdownMenuItemIcon = function DropdownMenuItemIcon(styleProps) {
  return css(_templateObject6$s || (_templateObject6$s = _taggedTemplateLiteralLoose(["\n  ", "\n"])), MenuItemIcon(styleProps));
};
var DropdownMenuDivider$1 = function DropdownMenuDivider(styleProps) {
  return css(_templateObject7$p || (_templateObject7$p = _taggedTemplateLiteralLoose(["\n  ", "\n"])), MenuDivider$1(styleProps));
};
var DropdownMenuGroup$1 = function DropdownMenuGroup(styleProps) {
  return css(_templateObject8$p || (_templateObject8$p = _taggedTemplateLiteralLoose(["\n  ", "\n"])), MenuGroup$1(styleProps));
};
var DropdownMenuGroupTitle = function DropdownMenuGroupTitle(styleProps) {
  return css(_templateObject9$i || (_templateObject9$i = _taggedTemplateLiteralLoose(["\n  ", "\n"])), MenuGroupTitle(styleProps));
};
var DropdownMenuOptionGroup$1 = function DropdownMenuOptionGroup(styleProps) {
  return css(_templateObject10$h || (_templateObject10$h = _taggedTemplateLiteralLoose(["\n  ", "\n"])), MenuOptionGroup$1(styleProps));
};
var DropdownMenuOptionItem$1 = function DropdownMenuOptionItem(styleProps) {
  return css(_templateObject11$d || (_templateObject11$d = _taggedTemplateLiteralLoose(["\n  ", "\n"])), MenuOptionItem$1(styleProps));
};
var DropdownMenuOptionItemIconWrapper = function DropdownMenuOptionItemIconWrapper(styleProps) {
  return css(_templateObject12$c || (_templateObject12$c = _taggedTemplateLiteralLoose(["\n  ", "\n"])), MenuOptionItemIconWrapper(styleProps));
};

var useProps$1G = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var baseId = props.baseId,
      currentId = props.currentId,
      disabled = props.disabled,
      first = props.first,
      focusable = props.focusable,
      hide = props.hide,
      last = props.last,
      placement = props.placement,
      show = props.show,
      toggle = props.toggle,
      visible = props.visible,
      unstable_clickOnEnter = props.unstable_clickOnEnter,
      unstable_clickOnSpace = props.unstable_clickOnSpace,
      unstable_disclosureRef = props.unstable_disclosureRef,
      unstable_moves = props.unstable_moves,
      unstable_popoverStyles = props.unstable_popoverStyles,
      unstable_arrowStyles = props.unstable_arrowStyles,
      unstable_referenceRef = props.unstable_referenceRef,
      restProps = _objectWithoutPropertiesLoose$4(props, ["baseId", "currentId", "disabled", "first", "focusable", "hide", "last", "placement", "show", "toggle", "visible", "unstable_clickOnEnter", "unstable_clickOnSpace", "unstable_disclosureRef", "unstable_moves", "unstable_popoverStyles", "unstable_arrowStyles", "unstable_referenceRef"]);

  var dropdownMenuButtonProps = useMenuButton({
    baseId: baseId,
    currentId: currentId,
    disabled: disabled,
    first: first,
    focusable: focusable,
    hide: hide,
    last: last,
    placement: placement,
    show: show,
    toggle: toggle,
    visible: visible,
    unstable_clickOnEnter: unstable_clickOnEnter,
    unstable_clickOnSpace: unstable_clickOnSpace,
    unstable_disclosureRef: unstable_disclosureRef,
    unstable_moves: unstable_moves,
    unstable_popoverStyles: unstable_popoverStyles,
    unstable_arrowStyles: unstable_arrowStyles,
    unstable_referenceRef: unstable_referenceRef
  }, restProps);
  var boxProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, restProps), dropdownMenuButtonProps));
  var className = useClassName({
    style: DropdownMenuButton$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'DropdownMenu.Button'
});
var DropdownMenuButton = createComponent(function (props) {
  var textProps = useProps$1G(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$1G,
    displayName: 'DropdownMenu.Button'
  },
  themeKey: 'DropdownMenu.Button'
});

var _templateObject$P, _templateObject3$y, _templateObject4$x, _templateObject5$s, _templateObject6$r, _templateObject7$o, _templateObject8$o, _templateObject9$h, _templateObject10$g, _templateObject11$c, _templateObject12$b, _templateObject13$9, _templateObject14$8, _templateObject15$8, _templateObject16$8, _templateObject17$8;
var Modal$2 = function Modal(styleProps) {
  return css(_templateObject$P || (_templateObject$P = _taggedTemplateLiteralLoose(["\n  position: fixed;\n  z-index: 19900410;\n  min-width: 320px;\n\n  @media screen and (max-width: 320px) {\n    min-width: unset;\n    width: 100%;\n  }\n\n  ", "\n\n  &:focus {\n    outline: none;\n  }\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), getPlacementAttributes$2(styleProps), getHiddenScrollbarStyles(), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var ModalDisclosure$1 = function ModalDisclosure(styleProps) {
  return css(_templateObject3$y || (_templateObject3$y = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var ModalBackdrop$1 = function ModalBackdrop(styleProps) {
  return css(_templateObject4$x || (_templateObject4$x = _taggedTemplateLiteralLoose(["\n  background-color: rgba(0, 0, 0, 0.5);\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 19900409;\n\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), getAnimatedAttributes({})(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var getPlacementAttributes$2 = function getPlacementAttributes(styleProps) {
  var placementAttributes = {
    // @ts-ignore
    center: css$1(_templateObject5$s || (_templateObject5$s = _taggedTemplateLiteralLoose(["\n      left: 50%;\n      top: 50%;\n      transform: translate3d(-50%, -50%, 0px);\n\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), getAnimatedAttributes({
      transformX: '-50%',
      transformY: '-50%',
      defaultSlide: 'top'
    })(styleProps), theme(styleProps.themeKey, "styles.placements.center")(styleProps)),
    // @ts-ignore
    top: css$1(_templateObject6$r || (_templateObject6$r = _taggedTemplateLiteralLoose(["\n      top: ", "em;\n      left: 50%;\n      transform: translate3d(-50%, 0, 0px);\n\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), space(5)(styleProps), getAnimatedAttributes({
      transformX: '-50%',
      transformY: '0px',
      defaultSlide: 'top'
    })(styleProps), theme(styleProps.themeKey, "styles.placements.top")(styleProps)),
    // @ts-ignore
    bottom: css$1(_templateObject7$o || (_templateObject7$o = _taggedTemplateLiteralLoose(["\n      bottom: ", "em;\n      left: 50%;\n      transform: translate3d(-50%, 0, 0px);\n\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), space(5)(styleProps), getAnimatedAttributes({
      transformX: '-50%',
      transformY: '0px',
      defaultSlide: 'bottom'
    })(styleProps), theme(styleProps.themeKey, "styles.placements.bottom")(styleProps)),
    // @ts-ignore
    left: css$1(_templateObject8$o || (_templateObject8$o = _taggedTemplateLiteralLoose(["\n      top: 50%;\n      left: ", "em;\n      transform: translate3d(0px, -50%, 0px);\n\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), space(5)(styleProps), getAnimatedAttributes({
      transformX: '0px',
      transformY: '-50%',
      defaultSlide: 'left'
    })(styleProps), theme(styleProps.themeKey, "styles.placements.left")(styleProps)),
    // @ts-ignore
    right: css$1(_templateObject9$h || (_templateObject9$h = _taggedTemplateLiteralLoose(["\n      top: 50%;\n      right: ", "em;\n      transform: translate3d(0px, -50%, 0px);\n\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), space(5)(styleProps), getAnimatedAttributes({
      transformX: '0px',
      transformY: '-50%',
      defaultSlide: 'right'
    })(styleProps), theme(styleProps.themeKey, "styles.placements.right")(styleProps)),
    // @ts-ignore
    'top-start': css$1(_templateObject10$g || (_templateObject10$g = _taggedTemplateLiteralLoose(["\n      top: ", "em;\n      left: ", "em;\n      transform: translate3d(0, 0, 0px);\n\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), space(5)(styleProps), space(5)(styleProps), getAnimatedAttributes({
      transformX: '0px',
      transformY: '0px',
      defaultSlide: 'left'
    })(styleProps), theme(styleProps.themeKey, "styles.placements.topStart")(styleProps)),
    // @ts-ignore
    'top-end': css$1(_templateObject11$c || (_templateObject11$c = _taggedTemplateLiteralLoose(["\n      top: ", "em;\n      right: ", "em;\n      transform: translate3d(0, 0, 0px);\n\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), space(5)(styleProps), space(5)(styleProps), getAnimatedAttributes({
      transformX: '0px',
      transformY: '0px',
      defaultSlide: 'right'
    })(styleProps), theme(styleProps.themeKey, "styles.placements.topEnd")(styleProps)),
    // @ts-ignore
    'bottom-end': css$1(_templateObject12$b || (_templateObject12$b = _taggedTemplateLiteralLoose(["\n      bottom: ", "em;\n      right: ", "em;\n      transform: translate3d(0, 0, 0px);\n\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), space(5)(styleProps), space(5)(styleProps), getAnimatedAttributes({
      transformX: '0px',
      transformY: '0px',
      defaultSlide: 'bottom'
    })(styleProps), theme(styleProps.themeKey, "styles.placements.bottomEnd")(styleProps)),
    // @ts-ignore
    'bottom-start': css$1(_templateObject13$9 || (_templateObject13$9 = _taggedTemplateLiteralLoose(["\n      bottom: ", "em;\n      left: ", "em;\n      transform: translate3d(0, 0, 0px);\n\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), space(5)(styleProps), space(5)(styleProps), getAnimatedAttributes({
      transformX: '0px',
      transformY: '0px',
      defaultSlide: 'bottom'
    })(styleProps), theme(styleProps.themeKey, "styles.placements.bottomStart")(styleProps))
  };
  return css$1(_templateObject14$8 || (_templateObject14$8 = _taggedTemplateLiteralLoose(["\n    ", ";\n  "])), placementAttributes[styleProps.placement || 'center']);
};

var getSlideOffset = function getSlideOffset(_ref) {
  var position = _ref.position,
      axis = _ref.axis,
      _ref$defaultSlide = _ref.defaultSlide,
      defaultSlide = _ref$defaultSlide === void 0 ? undefined : _ref$defaultSlide,
      _ref$slideOffset = _ref.slideOffset,
      slideOffset = _ref$slideOffset === void 0 ? '100%' : _ref$slideOffset;
  return function (styleProps) {
    var newSlide = typeof styleProps.slide === 'string' ? styleProps.slide : defaultSlide;
    var offset = '';

    if (axis === 'vertical') {
      if (newSlide === 'top') {
        offset = " - " + slideOffset;
      }

      if (newSlide === 'bottom') {
        offset = " + " + slideOffset;
      }
    }

    if (axis === 'horizontal') {
      if (newSlide === 'left') {
        offset = " - " + slideOffset;
      }

      if (newSlide === 'right') {
        offset = " + " + slideOffset;
      }
    }

    return "calc(" + position + offset + ")";
  };
};

var getAnimatedAttributes = function getAnimatedAttributes(opts) {
  return function (styleProps) {
    if (!styleProps.slide && !styleProps.expand && !styleProps.fade) return;
    var transitionPropertyValue = [(styleProps.slide || styleProps.expand) && 'transform', styleProps.fade && 'opacity'].filter(Boolean).join(', ');
    var hiddenTransformX = getSlideOffset({
      position: opts.transformX,
      axis: 'horizontal',
      defaultSlide: opts.defaultSlide,
      slideOffset: opts.slideOffset
    })(styleProps);
    var hiddenTransformY = getSlideOffset({
      position: opts.transformY,
      axis: 'vertical',
      defaultSlide: opts.defaultSlide,
      slideOffset: opts.slideOffset
    })(styleProps);
    var hiddenSlideTransformValue = "translate3d(" + (styleProps.slide ? hiddenTransformX : opts.transformX) + ", " + (styleProps.slide ? hiddenTransformY : opts.transformY) + ", 0px)";
    var hiddenExpandTransformValue = styleProps.expand ? "scale(0.01)" : undefined;
    var hiddenTransformValue = [hiddenSlideTransformValue, hiddenExpandTransformValue].filter(Boolean).join(' ');
    var showTransformValue = "translate3d(" + opts.transformX + ", " + opts.transformY + ", 0px) scale(1)";
    var expandTransformOrigins = {
      center: '50% 50%',
      left: '0% 50%',
      right: '100% 50%',
      top: '50% 0%',
      bottom: '50% 100%'
    };
    return css$1(_templateObject15$8 || (_templateObject15$8 = _taggedTemplateLiteralLoose(["\n    transform-origin: ", ";\n    align-items: center;\n    transition-property: ", ";\n    transition-duration: ", ";\n    transition-timing-function: ", ";\n    transition-delay: ", ";\n    transform: ", " ", " !important;\n\n    ", ";\n\n    &[data-enter] {\n      transform: ", " ", " !important;\n\n      ", ";\n    }\n  "])), expandTransformOrigins[opts.defaultExpand || styleProps.expand || 'center'], transitionPropertyValue, styleProps.duration || '250ms', styleProps.timingFunction || 'ease-in-out', styleProps.delay || '0s', opts.prevTransformValue, hiddenTransformValue, styleProps.fade && css$1(_templateObject16$8 || (_templateObject16$8 = _taggedTemplateLiteralLoose(["\n      opacity: 0;\n    "]))), opts.prevTransformValue, showTransformValue, styleProps.fade && css$1(_templateObject17$8 || (_templateObject17$8 = _taggedTemplateLiteralLoose(["\n        opacity: 1;\n      "]))));
  };
};

var _templateObject$O, _templateObject2$z, _templateObject3$x, _templateObject4$w, _templateObject5$r, _templateObject6$q, _templateObject7$n, _templateObject8$n, _templateObject9$g, _templateObject10$f, _templateObject11$b, _templateObject12$a, _templateObject13$8, _templateObject14$7, _templateObject15$7, _templateObject16$7, _templateObject17$7, _templateObject18$6, _templateObject19$5, _templateObject20$5;
var Popover$1 = function Popover(styleProps) {
  return css(_templateObject$O || (_templateObject$O = _taggedTemplateLiteralLoose(["\n  background-color: ", ";\n  border-radius: ", ";\n  max-width: 350px;\n  z-index: 19900410;\n\n  ", ";\n\n  ", "\n\n  &[hidden] {\n    display: inherit !important;\n    visibility: hidden !important;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: ", " 0px 0px 0px 3px;\n  }\n\n  & {\n    ", ";\n  }\n"])), palette('background')(styleProps), borderRadius('default')(styleProps), altitude('200')(styleProps), getPlacementAttributes$1(styleProps), palette('primary200', {
    dark: 'primary'
  })(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PopoverContent$1 = function PopoverContent(styleProps) {
  return css(_templateObject2$z || (_templateObject2$z = _taggedTemplateLiteralLoose(["\n  padding: ", "rem ", "rem;\n\n  & {\n    ", ";\n  }\n"])), space(2, 'minor')(styleProps), space(3, 'minor')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PopoverHeader$1 = function PopoverHeader(styleProps) {
  return css(_templateObject3$x || (_templateObject3$x = _taggedTemplateLiteralLoose(["\n  align-items: center;\n  justify-content: space-between;\n  border-bottom: 1px solid ", ";\n  padding: ", "rem ", "rem;\n\n  & {\n    ", ";\n  }\n"])), palette('white800', {
    dark: 'gray700'
  })(styleProps), space(2, 'minor')(styleProps), space(3, 'minor')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PopoverTitle$1 = function PopoverTitle(styleProps) {
  return css(_templateObject4$w || (_templateObject4$w = _taggedTemplateLiteralLoose(["\n  font-weight: ", ";\n\n  & {\n    ", ";\n  }\n"])), fontWeight('semibold')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PopoverFooter$1 = function PopoverFooter(styleProps) {
  return css(_templateObject5$r || (_templateObject5$r = _taggedTemplateLiteralLoose(["\n  align-items: center;\n  justify-content: space-between;\n  border-top: 1px solid ", ";\n  padding: ", "rem ", "rem;\n\n  ", ";\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), palette('white800', {
    dark: 'gray700'
  })(styleProps), space(2, 'minor')(styleProps), space(3, 'minor')(styleProps), styleProps.showActionButtons && styleProps.footer && css$1(_templateObject6$q || (_templateObject6$q = _taggedTemplateLiteralLoose(["\n      justify-content: space-between;\n    "]))), styleProps.showActionButtons && !styleProps.footer && css$1(_templateObject7$n || (_templateObject7$n = _taggedTemplateLiteralLoose(["\n      justify-content: flex-end;\n    "]))), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PopoverClose = function PopoverClose(styleProps) {
  return css(_templateObject8$n || (_templateObject8$n = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PopoverBackdrop$1 = function PopoverBackdrop(styleProps) {
  return css(_templateObject9$g || (_templateObject9$g = _taggedTemplateLiteralLoose(["\n  background-color: rgba(0, 0, 0, 0.5);\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 19900409;\n\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), getAnimatedAttributes({})(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PopoverDisclosure$1 = function PopoverDisclosure(styleProps) {
  return css(_templateObject10$f || (_templateObject10$f = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PopoverArrow$1 = function PopoverArrow(styleProps) {
  return css(_templateObject11$b || (_templateObject11$b = _taggedTemplateLiteralLoose(["\n  display: grid;\n  overflow: hidden;\n\n  & > svg {\n    background-color: transparent;\n\n    & .stroke {\n      fill: ", ";\n    }\n    & .fill {\n      fill: ", ";\n    }\n  }\n\n  & {\n    ", ";\n  }\n"])), palette('white800', {
    dark: 'gray700'
  })(styleProps), palette('background')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var getPlacementAttributes$1 = function getPlacementAttributes(styleProps) {
  var placementAttributes = {
    // @ts-ignore
    top: css$1(_templateObject12$a || (_templateObject12$a = _taggedTemplateLiteralLoose(["\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), getAnimatedAttributes({
      prevTransformValue: styleProps.prevTransformValue,
      transformX: '0px',
      transformY: '0px',
      defaultSlide: 'bottom',
      defaultExpand: 'bottom',
      slideOffset: (styleProps.gutter || '10') + "px"
    })(styleProps), theme(styleProps.themeKey, "styles.placements.top")(styleProps)),
    // @ts-ignore
    bottom: css$1(_templateObject13$8 || (_templateObject13$8 = _taggedTemplateLiteralLoose(["\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), getAnimatedAttributes({
      prevTransformValue: styleProps.prevTransformValue,
      transformX: '0px',
      transformY: '0px',
      defaultSlide: 'top',
      defaultExpand: 'top',
      slideOffset: (styleProps.gutter || '10') + "px"
    })(styleProps), theme(styleProps.themeKey, "styles.placements.bottom")(styleProps)),
    // @ts-ignore
    left: css$1(_templateObject14$7 || (_templateObject14$7 = _taggedTemplateLiteralLoose(["\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), getAnimatedAttributes({
      prevTransformValue: styleProps.prevTransformValue,
      transformX: '0px',
      transformY: '0px',
      defaultSlide: 'right',
      defaultExpand: 'right',
      slideOffset: (styleProps.gutter || '10') + "px"
    })(styleProps), theme(styleProps.themeKey, "styles.placements.left")(styleProps)),
    // @ts-ignore
    right: css$1(_templateObject15$7 || (_templateObject15$7 = _taggedTemplateLiteralLoose(["\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), getAnimatedAttributes({
      prevTransformValue: styleProps.prevTransformValue,
      transformX: '0px',
      transformY: '0px',
      defaultSlide: 'left',
      defaultExpand: 'left',
      slideOffset: (styleProps.gutter || '10') + "px"
    })(styleProps), theme(styleProps.themeKey, "styles.placements.right")(styleProps)),
    // @ts-ignore
    'top-start': css$1(_templateObject16$7 || (_templateObject16$7 = _taggedTemplateLiteralLoose(["\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), getAnimatedAttributes({
      prevTransformValue: styleProps.prevTransformValue,
      transformX: '0px',
      transformY: '0px',
      defaultSlide: 'bottom',
      defaultExpand: 'bottom',
      slideOffset: (styleProps.gutter || '10') + "px"
    })(styleProps), theme(styleProps.themeKey, "styles.placements.topStart")(styleProps)),
    // @ts-ignore
    'top-end': css$1(_templateObject17$7 || (_templateObject17$7 = _taggedTemplateLiteralLoose(["\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), getAnimatedAttributes({
      prevTransformValue: styleProps.prevTransformValue,
      transformX: '0px',
      transformY: '0px',
      defaultSlide: 'bottom',
      defaultExpand: 'bottom',
      slideOffset: (styleProps.gutter || '10') + "px"
    })(styleProps), theme(styleProps.themeKey, "styles.placements.topEnd")(styleProps)),
    // @ts-ignore
    'bottom-end': css$1(_templateObject18$6 || (_templateObject18$6 = _taggedTemplateLiteralLoose(["\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), getAnimatedAttributes({
      prevTransformValue: styleProps.prevTransformValue,
      transformX: '0px',
      transformY: '0px',
      defaultSlide: 'top',
      defaultExpand: 'top',
      slideOffset: (styleProps.gutter || '10') + "px"
    })(styleProps), theme(styleProps.themeKey, "styles.placements.bottomEnd")(styleProps)),
    // @ts-ignore
    'bottom-start': css$1(_templateObject19$5 || (_templateObject19$5 = _taggedTemplateLiteralLoose(["\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), getAnimatedAttributes({
      prevTransformValue: styleProps.prevTransformValue,
      transformX: '0px',
      transformY: '0px',
      defaultSlide: 'top',
      defaultExpand: 'top',
      slideOffset: (styleProps.gutter || '10') + "px"
    })(styleProps), theme(styleProps.themeKey, "styles.placements.bottomStart")(styleProps))
  };
  return css$1(_templateObject20$5 || (_templateObject20$5 = _taggedTemplateLiteralLoose(["\n    ", ";\n  "])), placementAttributes[styleProps.placement || 'center']);
};

var useProps$1F = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var baseId = props.baseId,
      currentId = props.currentId,
      first = props.first,
      hide = props.hide,
      hideOnClickOutside = props.hideOnClickOutside,
      groups = props.groups,
      last = props.last,
      modal = props.modal,
      move = props.move,
      next = props.next,
      orientation = props.orientation,
      placement = props.placement,
      preventBodyScroll = props.preventBodyScroll,
      previous = props.previous,
      items = props.items,
      setCurrentId = props.setCurrentId,
      wrap = props.wrap,
      unstable_disclosureRef = props.unstable_disclosureRef,
      unstable_initialFocusRef = props.unstable_initialFocusRef,
      unstable_finalFocusRef = props.unstable_finalFocusRef,
      unstable_popoverRef = props.unstable_popoverRef,
      unstable_popoverStyles = props.unstable_popoverStyles,
      unstable_moves = props.unstable_moves,
      unstable_orphan = props.unstable_orphan,
      unstable_autoFocusOnShow = props.unstable_autoFocusOnShow,
      unstable_autoFocusOnHide = props.unstable_autoFocusOnHide,
      animating = props.animating,
      animated = props.animated,
      stopAnimation = props.stopAnimation,
      unstable_virtual = props.unstable_virtual,
      visible = props.visible,
      restProps = _objectWithoutPropertiesLoose$4(props, ["baseId", "currentId", "first", "hide", "hideOnClickOutside", "groups", "last", "modal", "move", "next", "orientation", "placement", "preventBodyScroll", "previous", "items", "setCurrentId", "wrap", "unstable_disclosureRef", "unstable_initialFocusRef", "unstable_finalFocusRef", "unstable_popoverRef", "unstable_popoverStyles", "unstable_moves", "unstable_orphan", "unstable_autoFocusOnShow", "unstable_autoFocusOnHide", "animating", "animated", "stopAnimation", "unstable_virtual", "visible"]);

  var dropdownMenuPopoverProps = useMenu({
    baseId: baseId,
    currentId: currentId,
    first: first,
    hide: hide,
    hideOnClickOutside: hideOnClickOutside,
    groups: groups,
    last: last,
    modal: modal,
    move: move,
    next: next,
    orientation: orientation,
    placement: placement,
    preventBodyScroll: preventBodyScroll,
    previous: previous,
    items: items,
    setCurrentId: setCurrentId,
    wrap: wrap,
    unstable_disclosureRef: unstable_disclosureRef,
    unstable_initialFocusRef: unstable_initialFocusRef,
    unstable_finalFocusRef: unstable_finalFocusRef,
    unstable_popoverRef: unstable_popoverRef,
    unstable_popoverStyles: unstable_popoverStyles,
    unstable_moves: unstable_moves,
    unstable_orphan: unstable_orphan,
    unstable_autoFocusOnShow: unstable_autoFocusOnShow,
    unstable_autoFocusOnHide: unstable_autoFocusOnHide,
    animating: animating,
    animated: animated,
    stopAnimation: stopAnimation,
    unstable_virtual: unstable_virtual,
    visible: visible
  }, restProps);
  var boxProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, restProps), dropdownMenuPopoverProps));
  var className = useClassName({
    style: [DropdownMenuPopover$1, Popover$1],
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      prevTransformValue: unstable_popoverStyles.transform
    }),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    tabIndex: props.isTabbable ? boxProps.tabIndex : undefined
  });
}, {
  defaultProps: {
    altitude: '200',
    isTabbable: true
  },
  themeKey: 'DropdownMenu.Popover'
});
var DropdownMenuPopover = createComponent(function (props) {
  var dropdownMenuPopoverProps = useProps$1F(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: dropdownMenuPopoverProps
  });
}, {
  attach: {
    useProps: useProps$1F,
    displayName: 'DropdownMenu.Popover'
  },
  themeKey: 'DropdownMenu.Popover'
});

function useDropdownMenuState(initialState) {
  return useMenuState(_objectSpread2$3({
    gutter: 8
  }, initialState));
}
function DropdownMenuState(props) {
  props.children;
      var restProps = _objectWithoutPropertiesLoose$4(props, ["children"]);

  var state = useDropdownMenuState(restProps);
  return props.children(state);
}

var DropdownMenuContext = react.createContext({
  dropdownMenu: {},
  overrides: {}
});
var useProps$1E = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var baseId = props.baseId,
      children = props.children,
      dropdownMenuState = props.dropdownMenuState,
      menu = props.menu,
      overrides = props.overrides,
      visible = props.visible,
      restProps = _objectWithoutPropertiesLoose$4(props, ["baseId", "children", "dropdownMenuState", "menu", "overrides", "visible"]);

  var boxProps = Box.useProps(restProps);
  var dropdownMenu = useDropdownMenuState(_objectSpread2$3({
    baseId: baseId,
    visible: visible
  }, dropdownMenuState));
  var dropdownMenuButtonProps = DropdownMenuButton.useProps(_objectSpread2$3(_objectSpread2$3({}, dropdownMenu), {}, {
    overrides: overrides
  }));
  var className = useClassName({
    style: DropdownMenu$2,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var contextValue = react.useMemo(function () {
    return {
      dropdownMenu: dropdownMenu,
      overrides: overrides
    };
  }, [dropdownMenu, overrides]);
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(DropdownMenuContext.Provider, {
      value: contextValue
    }, react.cloneElement(children, _objectSpread2$3({}, dropdownMenuButtonProps)), dropdownMenu.visible && /*#__PURE__*/react.createElement(DropdownMenuPopover, _extends$1({}, dropdownMenu, {
      overrides: overrides
    }), menu))
  });
}, {
  themeKey: 'DropdownMenu'
});
var DropdownMenu$1 = createComponent(function (props) {
  var textProps = useProps$1E(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$1E,
    displayName: 'DropdownMenu'
  },
  themeKey: 'DropdownMenu'
});

var useProps$1D = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var iconAfter = props.iconAfter,
      iconAfterProps = props.iconAfterProps,
      iconBefore = props.iconBefore,
      iconBeforeProps = props.iconBeforeProps,
      children = props.children,
      baseId = props.baseId,
      disabled = props.disabled,
      first = props.first,
      focusable = props.focusable,
      last = props.last,
      unregisterItem = props.unregisterItem,
      registerItem = props.registerItem,
      currentId = props.currentId,
      hide = props.hide,
      hideOnClick = props.hideOnClick,
      move = props.move,
      next = props.next,
      onClick = props.onClick,
      orientation = props.orientation,
      overrides = props.overrides,
      placement = props.placement,
      previous = props.previous,
      id = props.id,
      setCurrentId = props.setCurrentId,
      items = props.items,
      visible = props.visible,
      up = props.up,
      down = props.down,
      unstable_arrowStyles = props.unstable_arrowStyles,
      unstable_clickOnEnter = props.unstable_clickOnEnter,
      unstable_clickOnSpace = props.unstable_clickOnSpace,
      unstable_hasActiveWidget = props.unstable_hasActiveWidget,
      unstable_idCountRef = props.unstable_idCountRef,
      unstable_moves = props.unstable_moves,
      unstable_popoverStyles = props.unstable_popoverStyles,
      unstable_virtual = props.unstable_virtual,
      restProps = _objectWithoutPropertiesLoose$4(props, ["iconAfter", "iconAfterProps", "iconBefore", "iconBeforeProps", "children", "baseId", "disabled", "first", "focusable", "last", "unregisterItem", "registerItem", "currentId", "hide", "hideOnClick", "move", "next", "onClick", "orientation", "overrides", "placement", "previous", "id", "setCurrentId", "items", "visible", "up", "down", "unstable_arrowStyles", "unstable_clickOnEnter", "unstable_clickOnSpace", "unstable_hasActiveWidget", "unstable_idCountRef", "unstable_moves", "unstable_popoverStyles", "unstable_virtual"]);

  var _React$useContext = react.useContext(DropdownMenuContext),
      dropdownMenuOverrides = _React$useContext.overrides,
      dropdownMenu = _React$useContext.dropdownMenu;

  var dropdownMenuItemProps = useMenuItem(_objectSpread2$3({
    baseId: baseId,
    disabled: disabled,
    first: first,
    focusable: focusable,
    last: last,
    unregisterItem: unregisterItem,
    registerItem: registerItem,
    currentId: currentId,
    hide: hide,
    move: move,
    next: next,
    orientation: orientation,
    placement: placement,
    previous: previous,
    id: id,
    setCurrentId: setCurrentId,
    items: items,
    visible: visible,
    up: up,
    down: down,
    unstable_arrowStyles: unstable_arrowStyles,
    unstable_clickOnEnter: unstable_clickOnEnter,
    unstable_clickOnSpace: unstable_clickOnSpace,
    unstable_hasActiveWidget: unstable_hasActiveWidget,
    unstable_idCountRef: unstable_idCountRef,
    unstable_moves: unstable_moves,
    unstable_popoverStyles: unstable_popoverStyles,
    unstable_virtual: unstable_virtual
  }, dropdownMenu), restProps);
  var boxProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, restProps), dropdownMenuItemProps));
  var className = useClassName({
    style: DropdownMenuItem$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: _objectSpread2$3(_objectSpread2$3({}, dropdownMenuOverrides), overrides)
    }),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var iconBeforeClassName = useClassName({
    style: DropdownMenuItemIcon,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: _objectSpread2$3(_objectSpread2$3({}, dropdownMenuOverrides), overrides),
      isBefore: true
    }),
    themeKey: themeKey,
    themeKeySuffix: 'Icon'
  });
  var iconAfterClassName = useClassName({
    style: DropdownMenuItemIcon,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: _objectSpread2$3(_objectSpread2$3({}, dropdownMenuOverrides), overrides),
      isAfter: true
    }),
    themeKey: themeKey,
    themeKeySuffix: 'Icon'
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(react.Fragment, null, iconBefore && /*#__PURE__*/react.createElement(Icon, _extends$1({
      className: iconBeforeClassName,
      icon: iconBefore
    }, iconBeforeProps)), children, iconAfter && /*#__PURE__*/react.createElement(Icon, _extends$1({
      className: iconAfterClassName,
      icon: iconAfter
    }, iconAfterProps))),
    onClick: hideOnClick ? bindFns(onClick, hide, dropdownMenu.hide) : onClick,
    tabIndex: props.isTabbable ? boxProps.tabIndex : undefined
  });
}, {
  defaultProps: {
    hideOnClick: true,
    isTabbable: true
  },
  themeKey: 'DropdownMenu.Item'
});
var DropdownMenuItem = createComponent(function (props) {
  var textProps = useProps$1D(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$1D,
    displayName: 'DropdownMenu.Item'
  },
  themeKey: 'DropdownMenu.Item'
});

var _templateObject$N;
var Divider$1 = function Divider(styleProps) {
  return css(_templateObject$N || (_templateObject$N = _taggedTemplateLiteralLoose(["\n    border: 1px solid ", ";\n    border-width: 0 0 1px 0;\n    padding: 0;\n    width: auto;\n    height: 0;\n\n    &[aria-orientation=\"vertical\"] {\n      border-width: 0 1px 0 0;\n      width: 0;\n      height: auto;\n\n      & {\n        ", ";\n      }\n    }\n\n  & {\n    ", ";\n  }\n"])), palette('white800', {
    dark: 'gray700'
  })(styleProps), theme(styleProps.themeKey, "styles.vertical")(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$1C = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var orientation = props.orientation,
      htmlProps = _objectWithoutPropertiesLoose$4(props, ["orientation"]);

  var separatorProps = useSeparator({
    orientation: orientation
  }, htmlProps);
  var boxProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, props), separatorProps));
  var className = useClassName({
    style: Divider$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: undefined
  });
}, {
  themeKey: 'Divider'
});
var Divider = createComponent(function (props) {
  var dividerProps = useProps$1C(props);
  return createElement({
    component: Box$2,
    use: props.use,
    htmlProps: dividerProps
  });
}, {
  attach: {
    useProps: useProps$1C,
    displayName: 'Divider'
  },
  defaultProps: {
    use: 'hr'
  },
  themeKey: 'Divider'
});

var useProps$1B = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var orientation = props.orientation,
      overrides = props.overrides,
      restProps = _objectWithoutPropertiesLoose$4(props, ["orientation", "overrides"]);

  var _React$useContext = react.useContext(DropdownMenuContext),
      dropdownMenuOverrides = _React$useContext.overrides;

  var dropdownMenuDividerProps = useMenuSeparator({
    orientation: orientation
  }, restProps);
  var dividerProps = Divider.useProps(_objectSpread2$3(_objectSpread2$3({}, restProps), dropdownMenuDividerProps));
  var className = useClassName({
    style: DropdownMenuDivider$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: _objectSpread2$3(_objectSpread2$3({}, dropdownMenuOverrides), {}, {
        overrides: overrides
      })
    }),
    themeKey: themeKey,
    prevClassName: dividerProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, dividerProps), {}, {
    className: className
  });
}, {
  themeKey: 'DropdownMenu.Divider'
});
var DropdownMenuDivider = createComponent(function (props) {
  var textProps = useProps$1B(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$1B,
    displayName: 'DropdownMenu.Divider'
  },
  themeKey: 'DropdownMenu.Divider'
});

var useProps$1A = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var children = props.children,
      overrides = props.overrides,
      title = props.title,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children", "overrides", "title"]);

  var boxProps = Box.useProps(restProps);

  var _React$useContext = react.useContext(DropdownMenuContext),
      dropdownMenuOverrides = _React$useContext.overrides;

  var className = useClassName({
    style: DropdownMenuGroup$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: _objectSpread2$3(_objectSpread2$3({}, dropdownMenuOverrides), overrides)
    }),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var titleClassName = useClassName({
    style: DropdownMenuGroupTitle,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: _objectSpread2$3(_objectSpread2$3({}, dropdownMenuOverrides), overrides)
    }),
    themeKey: themeKey,
    themeKeySuffix: 'Title',
    prevClassName: boxProps.className
  });
  var titleId = useUniqueId();
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    'aria-labelledby': titleId,
    role: 'group',
    className: className,
    children: /*#__PURE__*/react.createElement(react.Fragment, null, title && /*#__PURE__*/react.createElement(Box, {
      className: titleClassName,
      id: titleId
    }, title), children)
  });
}, {
  themeKey: 'DropdownMenu.Group'
});
var DropdownMenuGroup = createComponent(function (props) {
  var textProps = useProps$1A(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$1A,
    displayName: 'DropdownMenu.Group'
  },
  themeKey: 'DropdownMenu.Group'
});

var useProps$1z = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var children = props.children,
      defaultValue = props.defaultValue,
      onBlur = props.onBlur,
      onChange = props.onChange,
      type = props.type,
      value = props.value,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children", "defaultValue", "onBlur", "onChange", "type", "value"]);

  var _useOptionsState = useOptionsState({
    defaultValue: defaultValue,
    onBlur: onBlur,
    onChange: onChange,
    type: type,
    value: value
  }),
      getOptionItemProps = _useOptionsState.getOptionItemProps;

  var dropdownMenuGroupProps = DropdownMenuGroup.useProps(_objectSpread2$3(_objectSpread2$3({}, restProps), {}, {
    children: react.Children.map(children, function (child) {
      var _child$props;

      if (!react.isValidElement(child)) return child;
      return react.cloneElement(child, _objectSpread2$3(_objectSpread2$3({}, child.props), getOptionItemProps({
        value: (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.value
      })));
    })
  }));
  var className = useClassName({
    style: DropdownMenuOptionGroup$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: dropdownMenuGroupProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, dropdownMenuGroupProps), {}, {
    className: className
  });
}, {
  themeKey: 'DropdownMenu.OptionGroup'
});
var DropdownMenuOptionGroup = createComponent(function (props) {
  var htmlProps = useProps$1z(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: htmlProps
  });
}, {
  attach: {
    useProps: useProps$1z,
    displayName: 'DropdownMenu.OptionGroup'
  },
  themeKey: 'DropdownMenu.OptionGroup'
});

var useProps$1y = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var children = props.children,
      checked = props.checked,
      onChange = props.onChange,
      value = props.value,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children", "checked", "onChange", "value"]); //////////////////////////////////////////////////////


  var menuItemProps = DropdownMenuItem.useProps(restProps); //////////////////////////////////////////////////////

  var className = useClassName({
    style: DropdownMenuOptionItem$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: menuItemProps.className
  });
  var iconWrapperClassName = useClassName({
    style: DropdownMenuOptionItemIconWrapper,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'IconWrapper'
  }); //////////////////////////////////////////////////////

  return _objectSpread2$3(_objectSpread2$3({}, menuItemProps), {}, {
    'aria-checked': checked,
    className: className,
    onClick: function onClick() {
      return onChange && onChange({
        checked: !checked,
        value: value
      });
    },
    children: /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Box, {
      className: iconWrapperClassName,
      overrides: props.overrides
    }, checked && /*#__PURE__*/react.createElement(Icon, {
      icon: {
        viewBoxWidth: 16,
        viewBoxHeight: 16,
        paths: ['M14 3c-.28 0-.53.11-.71.29L6 10.59l-3.29-3.3a1.003 1.003 0 00-1.42 1.42l4 4c.18.18.43.29.71.29s.53-.11.71-.29l8-8A1.003 1.003 0 0014 3z']
      },
      overrides: props.overrides
    })), children)
  });
}, {
  themeKey: 'DropdownMenu.OptionItem'
});
var DropdownMenuOptionItem = createComponent(function (props) {
  var htmlProps = useProps$1y(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: htmlProps
  });
}, {
  attach: {
    useProps: useProps$1y,
    displayName: 'DropdownMenu.OptionItem'
  },
  themeKey: 'DropdownMenu.OptionItem'
});

var DropdownMenu = Object.assign(DropdownMenu$1, {
  Popover: DropdownMenuPopover,
  Button: DropdownMenuButton,
  Item: DropdownMenuItem,
  Divider: DropdownMenuDivider,
  Group: DropdownMenuGroup,
  OptionGroup: DropdownMenuOptionGroup,
  OptionItem: DropdownMenuOptionItem,
  useState: useDropdownMenuState,
  State: DropdownMenuState
});

var useProps$1x = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var dropdownMenuItemProps = DropdownMenuItem.useProps(props);
  var className = useClassName({
    style: AutosuggestItem$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: dropdownMenuItemProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, dropdownMenuItemProps), {}, {
    className: className
  });
}, {
  defaultProps: {
    isTabbable: false,
    role: 'option'
  },
  themeKey: 'Autosuggest.Item'
});
var AutosuggestItem = createComponent(function (props) {
  var textProps = useProps$1x(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$1x,
    displayName: 'Autosuggest.Item'
  },
  defaultProps: {
    use: 'li'
  },
  themeKey: 'Autosuggest.Item'
});

var useProps$1w = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: AutosuggestStaticItem$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Autosuggest.StaticItem'
});
var AutosuggestStaticItem = createComponent(function (props) {
  var textProps = useProps$1w(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$1w,
    displayName: 'Autosuggest.StaticItem'
  },
  themeKey: 'Autosuggest.StaticItem'
});

var AutosuggestContext = react.createContext({});
var KEY_ENTER = 13;
var KEY_ESC = 27;
var KEY_UP = 38;
var KEY_DOWN = 40;

function reducer$1(state, event) {
  switch (event.type) {
    case 'INPUT_CHANGE':
      {
        return _objectSpread2$3(_objectSpread2$3({}, state), {}, {
          page: 1,
          highlightedIndex: event.automaticSelection ? getNewHighlightedIndex({
            compare: function compare(_ref) {
              var index = _ref.index,
                  optionsLength = _ref.optionsLength;
              return index < optionsLength ? index + 1 : 0;
            },
            highlightedIndex: -1,
            filteredOptions: state.filteredOptions
          }) : -1,
          inputValue: event.inputValue,
          selectedOption: undefined
        });
      }

    case 'INPUT_BLUR':
      {
        return _objectSpread2$3(_objectSpread2$3({}, state), {}, {
          highlightedIndex: -1,
          page: 1,
          inputValue: event.restrictToOptions && state.highlightedIndex === -1 && !state.selectedOption ? '' : state.inputValue
        });
      }

    case 'KEY_UP':
      {
        var newHighlightedIndex = getNewHighlightedIndex({
          compare: function compare(_ref2) {
            var index = _ref2.index,
                optionsLength = _ref2.optionsLength;
            return index > 0 ? index - 1 : optionsLength;
          },
          highlightedIndex: state.highlightedIndex,
          filteredOptions: state.filteredOptions
        });
        return _objectSpread2$3(_objectSpread2$3({}, state), {}, {
          highlightedIndex: newHighlightedIndex
        });
      }

    case 'KEY_DOWN':
      {
        var _newHighlightedIndex = getNewHighlightedIndex({
          compare: function compare(_ref3) {
            var index = _ref3.index,
                optionsLength = _ref3.optionsLength;
            return index < optionsLength ? index + 1 : 0;
          },
          highlightedIndex: state.highlightedIndex,
          filteredOptions: state.filteredOptions
        });

        return _objectSpread2$3(_objectSpread2$3({}, state), {}, {
          highlightedIndex: _newHighlightedIndex
        });
      }

    case 'KEY_ESC':
      {
        return _objectSpread2$3(_objectSpread2$3({}, state), {}, {
          highlightedIndex: -1,
          inputValue: ''
        });
      }

    case 'KEY_ENTER':
      {
        return _objectSpread2$3(_objectSpread2$3({}, state), {}, {
          highlightedIndex: -1,
          inputValue: event.restrictToOptions && state.highlightedIndex === -1 ? '' : state.inputValue
        });
      }

    case 'MOUSE_CLICK_ITEM':
      {
        if (event.option && event.option.disabled) return state;
        return _objectSpread2$3(_objectSpread2$3({}, state), {}, {
          highlightedIndex: -1,
          inputValue: state.filteredOptions[event.index].label
        });
      }

    case 'OPTIONS_SET':
      {
        return _objectSpread2$3(_objectSpread2$3({}, state), {}, {
          options: event.options
        });
      }

    case 'OPTIONS_FILTERED':
      {
        return _objectSpread2$3(_objectSpread2$3({}, state), {}, {
          filteredOptions: event.filteredOptions
        });
      }

    case 'OPTION_SELECTED':
      {
        var _event$option$label, _event$option;

        return _objectSpread2$3(_objectSpread2$3({}, state), {}, {
          filteredOptions: [event.option],
          inputValue: (_event$option$label = event === null || event === void 0 ? void 0 : (_event$option = event.option) === null || _event$option === void 0 ? void 0 : _event$option.label) !== null && _event$option$label !== void 0 ? _event$option$label : '',
          selectedOption: event.option,
          value: event.option
        });
      }

    case 'OPTION_CLEARED':
      {
        return _objectSpread2$3(_objectSpread2$3({}, state), {}, {
          filteredOptions: state.options,
          inputValue: '',
          selectedOption: undefined,
          value: undefined
        });
      }

    case 'MOUSE_ENTER_POPOVER':
      {
        return _objectSpread2$3(_objectSpread2$3({}, state), {}, {
          isMouseInsidePopover: true
        });
      }

    case 'MOUSE_LEAVE_POPOVER':
      {
        return _objectSpread2$3(_objectSpread2$3({}, state), {}, {
          highlightedIndex: state.inputValue && event.automaticSelection ? 0 : -1,
          isMouseInsidePopover: false
        });
      }

    case 'PAGE_INCREMENT':
      {
        return _objectSpread2$3(_objectSpread2$3({}, state), {}, {
          page: state.page + 1
        });
      }

    default:
      {
        return state;
      }
  }
}

var useProps$1v = createHook(function (props, _ref4) {
  var _dropdownMenu$items, _dropdownMenu$items$h;

  var themeKey = _ref4.themeKey;

  var automaticSelection = props.automaticSelection,
      cacheKey = props.cacheKey,
      clearButtonProps = props.clearButtonProps,
      disabled = props.disabled,
      dropdownMenuInitialState = props.dropdownMenuInitialState,
      emptyText = props.emptyText,
      errorText = props.errorText,
      loadingText = props.loadingText,
      loadingMoreText = props.loadingMoreText,
      popoverProps = props.popoverProps,
      itemProps = props.itemProps,
      inputProps = props.inputProps,
      isInputLoading = props.isLoading,
      label = props.label,
      limit = props.limit,
      loadOptions = props.loadOptions,
      loadVariables = props.loadVariables,
      onChange = props.onChange,
      initialOptions = props.options,
      overrides = props.overrides,
      pagination = props.pagination,
      ClearButton = props.renderClearButton,
      Empty = props.renderEmpty,
      Error = props.renderError,
      Loading = props.renderLoading,
      LoadingMore = props.renderLoadingMore,
      Option = props.renderOption,
      placeholder = props.placeholder,
      restrictToOptions = props.restrictToOptions,
      state = props.state,
      value = props.value,
      variant = props.variant,
      restProps = _objectWithoutPropertiesLoose$4(props, ["automaticSelection", "cacheKey", "clearButtonProps", "disabled", "dropdownMenuInitialState", "emptyText", "errorText", "loadingText", "loadingMoreText", "popoverProps", "itemProps", "inputProps", "isLoading", "label", "limit", "loadOptions", "loadVariables", "onChange", "options", "overrides", "pagination", "renderClearButton", "renderEmpty", "renderError", "renderLoading", "renderLoadingMore", "renderOption", "placeholder", "restrictToOptions", "state", "value", "variant"]); //////////////////////////////////////////////////


  var boxProps = Box.useProps(restProps); //////////////////////////////////////////////////

  var inputRef = react.useRef();
  var mousePositionRef = react.useRef();
  var popoverRef = react.useRef();

  var _React$useState = react.useState(props.defer || !loadOptions),
      defer = _React$useState[0],
      setDefer = _React$useState[1];

  var _React$useState2 = react.useState(false),
      blockLoad = _React$useState2[0],
      setBlockLoad = _React$useState2[1]; //////////////////////////////////////////////////


  var dropdownMenu = DropdownMenu.useState(_objectSpread2$3({
    loop: true,
    gutter: 4
  }, dropdownMenuInitialState));
  var dropdownMenuButtonProps = DropdownMenuButton.useProps(_objectSpread2$3(_objectSpread2$3({}, dropdownMenu), {}, {
    ref: inputRef
  })); //////////////////////////////////////////////////

  react.useEffect(function () {
    function handleMouseMove(e) {
      mousePositionRef.current = e;
    }

    if (typeof window !== 'undefined') {
      window.document.addEventListener('mousemove', handleMouseMove);
    }

    return function cleanup() {
      window.document.removeEventListener('mousemove', handleMouseMove);
    };
  }); //////////////////////////////////////////////////

  var className = useClassName({
    style: Autosuggest$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var dropdownMenuPopoverClassName = useClassName({
    style: AutosuggestPopover,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Popover'
  });
  var itemsWrapperClassName = useClassName({
    style: ItemsWrapper,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'ItemsWrapper'
  });
  var inputClassName = useClassName({
    style: AutosuggestInput,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Input'
  }); //////////////////////////////////////////////////

  var _React$useReducer = react.useReducer(reducer$1, {
    highlightedIndex: -1,
    inputValue: value === null || value === void 0 ? void 0 : value.label,
    isMouseInsidePopover: false,
    filteredOptions: initialOptions,
    options: initialOptions,
    page: 1,
    value: ''
  }),
      _React$useReducer$ = _React$useReducer[0],
      highlightedIndex = _React$useReducer$.highlightedIndex,
      inputValue = _React$useReducer$.inputValue,
      filteredOptions = _React$useReducer$.filteredOptions,
      options = _React$useReducer$.options,
      page = _React$useReducer$.page,
      selectedOption = _React$useReducer$.selectedOption,
      dispatch = _React$useReducer[1]; //////////////////////////////////////////////////


  var debouncedInputValue = useDebounce(inputValue, 500);
  var getOptions = react.useCallback( /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref5) {
      var loadVariables, page, _ref5$searchText, searchText;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              loadVariables = _ref5.loadVariables, page = _ref5.page, _ref5$searchText = _ref5.searchText, searchText = _ref5$searchText === void 0 ? '' : _ref5$searchText;

              if (!(typeof loadOptions === 'function')) {
                _context.next = 5;
                break;
              }

              if (!blockLoad) {
                _context.next = 4;
                break;
              }

              return _context.abrupt("return", new Promise(function (res) {
                return res({
                  options: options
                });
              }));

            case 4:
              return _context.abrupt("return", loadOptions({
                page: page,
                searchText: searchText,
                variables: loadVariables
              }).then(function (_ref7) {
                var fetchedOptions = _ref7.options;
                var newOptions = [].concat(options, fetchedOptions);

                if (page === 1) {
                  newOptions = fetchedOptions;
                }

                if (page > 1 && fetchedOptions.length === 0) {
                  setBlockLoad(true);
                }

                return {
                  options: newOptions
                };
              }));

            case 5:
              return _context.abrupt("return", new Promise(function (res) {
                return res(undefined);
              }));

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref6.apply(this, arguments);
    };
  }(), [blockLoad, loadOptions, options]);
  var optionsRecord = useLoads(cacheKey, getOptions, {
    defer: defer,
    variables: [{
      loadVariables: loadVariables,
      page: page,
      searchText: debouncedInputValue
    }]
  }); //////////////////////////////////////////////////

  react.useEffect(function () {
    dispatch({
      type: 'OPTIONS_SET',
      options: initialOptions
    });
  }, [initialOptions]);
  react.useEffect(function () {
    if (loadOptions && optionsRecord.isResolved) {
      var _optionsRecord$respon, _optionsRecord$respon2;

      var _options = (_optionsRecord$respon = (_optionsRecord$respon2 = optionsRecord.response) === null || _optionsRecord$respon2 === void 0 ? void 0 : _optionsRecord$respon2.options) !== null && _optionsRecord$respon !== void 0 ? _optionsRecord$respon : [];

      dispatch({
        type: 'OPTIONS_SET',
        options: _options
      });
      dispatch({
        type: 'OPTIONS_FILTERED',
        filteredOptions: _options
      });
    }
  }, [loadOptions, optionsRecord.isResolved, optionsRecord.response]); //////////////////////////////////////////////////

  var isLoading = loadOptions && (optionsRecord.isPending || optionsRecord.isIdle) && page === 1;
  var isLoadingMore = loadOptions && (optionsRecord.isPending || optionsRecord.isIdle) && page > 1;
  var isError = loadOptions && optionsRecord.isRejected;
  var isSuccess = filteredOptions.length > 0;

  if (loadOptions) {
    isSuccess = optionsRecord.isResolved && filteredOptions.length > 0 || isLoadingMore;
  } //////////////////////////////////////////////////


  var setOption = react.useCallback(function (option) {
    dispatch({
      type: 'OPTION_SELECTED',
      option: option
    });
    onChange && onChange(option);
    return option;
  }, [onChange]);
  var filterOptions = react.useCallback(function (_ref8) {
    var controlsVisibility = _ref8.controlsVisibility,
        _ref8$hideIfNoOptions = _ref8.hideIfNoOptions,
        hideIfNoOptions = _ref8$hideIfNoOptions === void 0 ? true : _ref8$hideIfNoOptions,
        searchText = _ref8.searchText;
    if (loadOptions) return;
    var filteredOptions = options.filter(function (option) {
      return option.label.toLowerCase().includes(searchText.trim().toLowerCase());
    });

    if (controlsVisibility) {
      if (filteredOptions.length === 0 && hideIfNoOptions) {
        dropdownMenu.hide();
      } else {
        dropdownMenu.show();
      }
    }

    dispatch({
      type: 'OPTIONS_FILTERED',
      filteredOptions: filteredOptions,
      controlsVisibility: controlsVisibility
    });
    return filteredOptions;
  }, [dropdownMenu, loadOptions, options]);
  var selectOption = react.useCallback(function (_ref9) {
    var index = _ref9.index;

    if (filteredOptions.length === 0) {
      return undefined;
    }

    var option = filteredOptions[index];
    option = setOption(option);
    return option;
  }, [filteredOptions, setOption]); //////////////////////////////////////////////////

  var handleBlurInput = react.useCallback(function (event) {
    var value = event.target.value;
    dispatch({
      type: 'INPUT_BLUR',
      restrictToOptions: restrictToOptions,
      value: value
    });

    if (inputValue && automaticSelection || highlightedIndex >= 0) {
      selectOption({
        index: highlightedIndex >= 0 ? highlightedIndex : 0
      });
    }

    if (restrictToOptions && !selectedOption && highlightedIndex === -1) {
      onChange && onChange('');
    }

    filterOptions({
      searchText: value
    });

    if (isMouseOutsidePopover({
      inputRef: inputRef,
      mousePositionRef: mousePositionRef,
      popoverRef: popoverRef
    })) {
      dropdownMenu.hide();
    }

    if (!selectedOption) {
      onChange && onChange(value === '' ? '' : {
        label: value
      });
    }
  }, [automaticSelection, dropdownMenu, filterOptions, highlightedIndex, inputValue, onChange, restrictToOptions, selectOption, selectedOption]);
  var handleChangeInput = react.useCallback(function (event) {
    var inputValue = event.target.value || '';
    setBlockLoad(false);
    dispatch({
      type: 'INPUT_CHANGE',
      automaticSelection: automaticSelection,
      inputValue: inputValue
    });
    filterOptions({
      controlsVisibility: true,
      hideIfNoOptions: !restrictToOptions,
      searchText: inputValue
    });
  }, [automaticSelection, filterOptions, restrictToOptions]);
  var handleClickInput = react.useCallback(function (event) {
    var value = event.target.value;

    if (document.activeElement !== event.target) {
      event.target.focus();
    }

    filterOptions({
      controlsVisibility: true,
      searchText: value
    });

    if (loadOptions) {
      if (defer) {
        setDefer(false);
        optionsRecord.load();
      }

      dropdownMenu.show();
    }
  }, [defer, dropdownMenu, filterOptions, loadOptions, optionsRecord]);
  var handleFocusInput = react.useCallback(function (event) {
    var value = event.target.value;
    filterOptions({
      controlsVisibility: true,
      searchText: value
    });
  }, [filterOptions]);
  var handleKeyDownInput = react.useCallback(function (event) {
    if (event.keyCode === KEY_ESC) {
      event.preventDefault();
      dropdownMenu.hide();
      dispatch({
        type: 'KEY_ESC'
      });
    }

    if (event.keyCode === KEY_DOWN) {
      event.preventDefault();
      dropdownMenu.show();
      dispatch({
        type: 'KEY_DOWN'
      });
    }

    if (event.keyCode === KEY_UP) {
      event.preventDefault();
      dropdownMenu.show();
      dispatch({
        type: 'KEY_UP'
      });
    }

    if (event.keyCode === KEY_ENTER) {
      event.preventDefault();
      dispatch({
        type: 'KEY_ENTER',
        restrictToOptions: restrictToOptions
      });
      dropdownMenu.hide();

      if (highlightedIndex >= 0 || automaticSelection && inputValue) {
        selectOption({
          index: highlightedIndex
        });
      }
    }
  }, [automaticSelection, dropdownMenu, highlightedIndex, inputValue, restrictToOptions, selectOption]);
  var handleClickItem = react.useCallback(function (index, option) {
    return function () {
      dispatch({
        type: 'MOUSE_CLICK_ITEM',
        index: index,
        option: option
      });
      dropdownMenu.hide();
      selectOption({
        index: index
      });
    };
  }, [dispatch, dropdownMenu, selectOption]);
  var handleClear = react.useCallback(function () {
    dispatch({
      type: 'OPTION_CLEARED'
    });
    onChange && onChange('');
  }, [onChange]);
  var handleMouseEnterPopover = react.useCallback(function () {
    dispatch({
      type: 'MOUSE_ENTER_POPOVER',
      automaticSelection: automaticSelection
    });
  }, [automaticSelection]);
  var handleMouseLeavePopover = react.useCallback(function () {
    dispatch({
      type: 'MOUSE_LEAVE_POPOVER',
      automaticSelection: automaticSelection
    });
  }, [automaticSelection]);
  var handleScrollPopover = react.useCallback(function (event) {
    var target = event.currentTarget;

    if (pagination && !isLoadingMore && !blockLoad && target.scrollHeight > target.offsetHeight && target.scrollHeight - target.offsetHeight - target.scrollTop <= 200) {
      dispatch({
        type: 'PAGE_INCREMENT'
      });
    }

    return;
  }, [blockLoad, isLoadingMore, pagination]);
  var handleCreate = react.useCallback(function (option) {
    setOption(option);
    dropdownMenu.hide();
  }, [dropdownMenu, setOption]); //////////////////////////////////////////////////

  react.useEffect(function () {
    if (value) {
      dispatch({
        type: 'OPTION_SELECTED',
        option: value
      });
    }
  }, [automaticSelection, value]); //////////////////////////////////////////////////

  var context = react.useMemo(function () {
    return {
      overrides: overrides,
      themeKey: themeKey
    };
  }, [overrides, themeKey]); //////////////////////////////////////////////////

  var showClearButton = inputValue && !disabled; //////////////////////////////////////////////////

  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    'aria-expanded': dropdownMenuButtonProps['aria-expanded'],
    'aria-haspopup': 'listbox',
    'aria-owns': dropdownMenu.baseId,
    role: 'combobox',
    className: className,
    children: /*#__PURE__*/react.createElement(AutosuggestContext.Provider, {
      value: context
    }, /*#__PURE__*/react.createElement(Input, _extends$1({}, omit(dropdownMenuButtonProps, 'type', 'className', 'role'), {
      after: showClearButton && /*#__PURE__*/react.createElement(ClearButton, {
        onClick: handleClear,
        buttonProps: clearButtonProps
      }),
      "aria-autocomplete": "list",
      "aria-activedescendant": dropdownMenu === null || dropdownMenu === void 0 ? void 0 : (_dropdownMenu$items = dropdownMenu.items) === null || _dropdownMenu$items === void 0 ? void 0 : (_dropdownMenu$items$h = _dropdownMenu$items[highlightedIndex]) === null || _dropdownMenu$items$h === void 0 ? void 0 : _dropdownMenu$items$h.id,
      className: inputClassName,
      disabled: disabled,
      inputProps: inputProps,
      isLoading: isInputLoading,
      label: label,
      onBlur: handleBlurInput,
      onClick: handleClickInput,
      onChange: handleChangeInput,
      onKeyDown: handleKeyDownInput,
      onFocus: handleFocusInput,
      overrides: overrides,
      placeholder: placeholder,
      role: "textbox",
      state: state,
      variant: variant,
      value: inputValue
    })), /*#__PURE__*/react.createElement(DropdownMenuPopover, _extends$1({}, dropdownMenu, {
      ref: popoverRef,
      className: dropdownMenuPopoverClassName,
      isTabbable: false,
      onMouseDown: function onMouseDown(e) {
        return e.preventDefault();
      },
      onMouseEnter: handleMouseEnterPopover,
      onMouseLeave: handleMouseLeavePopover,
      overrides: overrides,
      role: "listbox",
      hideOnClickOutside: false,
      unstable_autoFocusOnHide: false
    }, popoverProps), dropdownMenu.visible && /*#__PURE__*/react.createElement(Box, {
      use: "ul",
      className: itemsWrapperClassName,
      onScroll: handleScrollPopover,
      overrides: overrides
    }, isSuccess ? /*#__PURE__*/react.createElement(react.Fragment, null, filteredOptions.slice(0, limit).filter(Boolean).map(function (option, index) {
      return /*#__PURE__*/react.createElement(AutosuggestItem, _extends$1({
        key: option.key || index
      }, dropdownMenu, {
        "aria-selected": highlightedIndex === index,
        "aria-disabled": option.disabled,
        disabled: option.disabled,
        iconAfter: option.iconAfter,
        iconAfterProps: option.iconAfterProps,
        iconBefore: option.iconBefore,
        iconBeforeProps: option.iconBeforeProps,
        onClick: handleClickItem(index, option),
        overrides: overrides
      }, itemProps), /*#__PURE__*/react.createElement(Option, {
        label: option.label,
        inputValue: inputValue,
        option: option,
        overrides: overrides,
        MatchedLabel: function MatchedLabel(props) {
          return /*#__PURE__*/react.createElement(_MatchedLabel$1, _extends$1({
            label: option.label,
            inputValue: inputValue
          }, props));
        }
      }));
    }), isLoadingMore && /*#__PURE__*/react.createElement(LoadingMore, {
      loadingText: loadingMoreText,
      overrides: overrides
    })) : isLoading ? /*#__PURE__*/react.createElement(Loading, {
      loadingText: loadingText,
      overrides: overrides
    }) : isError ? /*#__PURE__*/react.createElement(Error, {
      errorText: errorText,
      overrides: overrides
    }) : /*#__PURE__*/react.createElement(Empty, {
      emptyText: emptyText,
      inputValue: inputValue,
      create: handleCreate,
      itemProps: {
        'aria-selected': highlightedIndex === 0
      },
      overrides: overrides
    }))))
  });
}, {
  defaultProps: {
    cacheKey: 'bb-options',
    disabled: false,
    emptyText: 'No results found',
    errorText: 'An error occurred',
    loadingText: 'Loading...',
    loadingMoreText: 'Loading...',
    popoverHeight: '300px',
    options: [],
    renderClearButton: ClearButton$1,
    renderEmpty: Empty$1,
    renderError: Error$2,
    renderLoading: Loading$1,
    renderLoadingMore: Loading$1,
    renderOption: _MatchedLabel$1
  },
  themeKey: 'Autosuggest'
});
var Autosuggest = createComponent(function (props) {
  var textProps = useProps$1v(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$1v,
    displayName: 'Autosuggest'
  },
  themeKey: 'Autosuggest'
}); //////////////////////////////////////////////////////////////////

function ClearButton$1(props) {
  var buttonProps = props.buttonProps,
      onClick = props.onClick,
      restProps = _objectWithoutPropertiesLoose$4(props, ["buttonProps", "onClick"]);

  var _React$useContext = react.useContext(AutosuggestContext),
      overrides = _React$useContext.overrides,
      themeKey = _React$useContext.themeKey;

  var wrapperClassName = useClassName({
    style: AutosuggestClearButtonWrapper,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: overrides
    }),
    themeKey: themeKey,
    themeKeySuffix: 'ClearButtonWrapper'
  });
  var buttonClassName = useClassName({
    style: AutosuggestClearButton,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: overrides
    }),
    themeKey: themeKey,
    themeKeySuffix: 'ClearButton'
  });
  return /*#__PURE__*/react.createElement(Flex, _extends$1({
    className: wrapperClassName,
    overrides: overrides
  }, restProps), /*#__PURE__*/react.createElement(Button.Close, _extends$1({
    className: buttonClassName,
    onClick: onClick,
    iconProps: {
      fontSize: '200'
    },
    size: "small",
    onMouseDown: function onMouseDown(e) {
      return e.preventDefault();
    },
    overrides: overrides
  }, buttonProps)));
}

function _MatchedLabel$1(props) {
  var label = props.label,
      inputValue = props.inputValue,
      restProps = _objectWithoutPropertiesLoose$4(props, ["label", "inputValue"]);

  var _React$useContext2 = react.useContext(AutosuggestContext),
      overrides = _React$useContext2.overrides,
      themeKey = _React$useContext2.themeKey;

  var className = useClassName({
    style: AutosuggestItemText,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'ItemText'
  });

  var escapeStringRegexp = function escapeStringRegexp(string) {
    return (string || '').replace(/[|\\{}()[\]^$+*?.]/g, '\\$&');
  };

  var match = label.match(new RegExp(escapeStringRegexp(inputValue), 'i')) || [];
  var preText = label.slice(0, match.index);
  var highlightedText = match[0];
  var postText = label.slice(match.index + (match[0] || '').length);
  return highlightedText ? /*#__PURE__*/react.createElement(Text, _extends$1({
    className: className,
    overrides: overrides
  }, restProps), preText && /*#__PURE__*/react.createElement(Text, {
    overrides: overrides
  }, preText), highlightedText && /*#__PURE__*/react.createElement(Text, {
    fontWeight: "semibold",
    overrides: overrides
  }, highlightedText), postText && /*#__PURE__*/react.createElement(Text, {
    overrides: overrides
  }, postText)) : /*#__PURE__*/react.createElement(Text, _extends$1({
    className: className,
    overrides: overrides
  }, restProps), label);
}

function Empty$1(props) {
  var emptyText = props.emptyText,
      overrides = props.overrides,
      restProps = _objectWithoutPropertiesLoose$4(props, ["emptyText", "overrides"]);

  return /*#__PURE__*/react.createElement(AutosuggestStaticItem, _extends$1({
    overrides: overrides
  }, restProps), emptyText);
}

function Error$2(props) {
  var errorText = props.errorText,
      overrides = props.overrides,
      restProps = _objectWithoutPropertiesLoose$4(props, ["errorText", "overrides"]);

  return /*#__PURE__*/react.createElement(AutosuggestStaticItem, _extends$1({
    overrides: overrides
  }, restProps), errorText);
}

function Loading$1(props) {
  var loadingText = props.loadingText,
      overrides = props.overrides,
      restProps = _objectWithoutPropertiesLoose$4(props, ["loadingText", "overrides"]);

  return /*#__PURE__*/react.createElement(AutosuggestStaticItem, _extends$1({
    display: "flex",
    alignItems: "center",
    overrides: overrides
  }, restProps), /*#__PURE__*/react.createElement(Spinner, {
    size: "small",
    overrides: overrides
  }), /*#__PURE__*/react.createElement(Text, {
    marginLeft: "major-1",
    overrides: overrides
  }, loadingText));
} //////////////////////////////////////////////////////////////////


function isMouseOutsidePopover(_ref10) {
  var inputRef = _ref10.inputRef,
      mousePositionRef = _ref10.mousePositionRef,
      popoverRef = _ref10.popoverRef;

  var _inputRef$current$get = inputRef.current.getBoundingClientRect(),
      top = _inputRef$current$get.top;

  var _popoverRef$current$g = popoverRef.current.getBoundingClientRect(),
      left = _popoverRef$current$g.left,
      right = _popoverRef$current$g.right,
      bottom = _popoverRef$current$g.bottom;

  var _mousePositionRef$cur = mousePositionRef.current,
      clientX = _mousePositionRef$cur.clientX,
      clientY = _mousePositionRef$cur.clientY;
  return left > clientX || right < clientX || top > clientY || bottom < clientY;
}

function getNewHighlightedIndex(_ref11) {
  var _filteredOptions$newH;

  var compare = _ref11.compare,
      _ref11$highlightedInd = _ref11.highlightedIndex,
      highlightedIndex = _ref11$highlightedInd === void 0 ? -1 : _ref11$highlightedInd,
      filteredOptions = _ref11.filteredOptions,
      _ref11$count = _ref11.count,
      count = _ref11$count === void 0 ? 0 : _ref11$count;
  var newHighlightedIndex = compare({
    index: highlightedIndex,
    optionsLength: filteredOptions.length - 1
  });

  if ((filteredOptions === null || filteredOptions === void 0 ? void 0 : (_filteredOptions$newH = filteredOptions[newHighlightedIndex]) === null || _filteredOptions$newH === void 0 ? void 0 : _filteredOptions$newH.disabled) && count < filteredOptions.length) {
    return getNewHighlightedIndex({
      compare: compare,
      highlightedIndex: newHighlightedIndex,
      filteredOptions: filteredOptions,
      count: count + 1
    });
  } else {
    if (count === filteredOptions.length) {
      return -1;
    }

    return newHighlightedIndex;
  }
}

var useProps$1u = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var addonAfter = props.addonAfter,
      addonBefore = props.addonBefore,
      automaticSelection = props.automaticSelection,
      autosuggestProps = props.autosuggestProps,
      cacheKey = props.cacheKey;
      props.children;
      props.defaultValue;
      var defer = props.defer,
      description = props.description,
      disabled = props.disabled,
      errorText = props.errorText,
      emptyText = props.emptyText,
      hint = props.hint,
      isLoading = props.isLoading,
      isOptional = props.isOptional,
      isRequired = props.isRequired,
      orientation = props.orientation,
      label = props.label,
      limit = props.limit,
      loadingText = props.loadingText,
      loadingMoreText = props.loadingMoreText,
      loadOptions = props.loadOptions,
      loadVariables = props.loadVariables,
      options = props.options,
      pagination = props.pagination,
      placeholder = props.placeholder,
      restrictToOptions = props.restrictToOptions,
      renderError = props.renderError,
      renderClearButton = props.renderClearButton,
      renderEmpty = props.renderEmpty,
      renderLoading = props.renderLoading,
      renderLoadingMore = props.renderLoadingMore,
      renderOption = props.renderOption,
      clearButtonProps = props.clearButtonProps,
      inputProps = props.inputProps,
      itemProps = props.itemProps,
      popoverProps = props.popoverProps,
      dropdownMenuInitialState = props.dropdownMenuInitialState,
      state = props.state,
      tooltip = props.tooltip,
      tooltipTriggerComponent = props.tooltipTriggerComponent,
      value = props.value,
      onChange = props.onChange,
      overrides = props.overrides,
      validationText = props.validationText,
      variant = props.variant,
      restProps = _objectWithoutPropertiesLoose$4(props, ["addonAfter", "addonBefore", "automaticSelection", "autosuggestProps", "cacheKey", "children", "defaultValue", "defer", "description", "disabled", "errorText", "emptyText", "hint", "isLoading", "isOptional", "isRequired", "orientation", "label", "limit", "loadingText", "loadingMoreText", "loadOptions", "loadVariables", "options", "pagination", "placeholder", "restrictToOptions", "renderError", "renderClearButton", "renderEmpty", "renderLoading", "renderLoadingMore", "renderOption", "clearButtonProps", "inputProps", "itemProps", "popoverProps", "dropdownMenuInitialState", "state", "tooltip", "tooltipTriggerComponent", "value", "onChange", "overrides", "validationText", "variant"]);

  var boxProps = Box.useProps(restProps);
  var className = useClassName({
    style: AutosuggestField$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(FieldWrapper, {
      description: description,
      hint: hint,
      isOptional: isOptional,
      isRequired: isRequired,
      label: label,
      overrides: overrides,
      state: state,
      tooltip: tooltip,
      tooltipTriggerComponent: tooltipTriggerComponent,
      validationText: validationText,
      variant: variant
    }, function (_ref2) {
      var elementProps = _ref2.elementProps;
      return /*#__PURE__*/react.createElement(ConditionalWrap, {
        condition: Boolean(addonBefore || addonAfter),
        wrap: function wrap(children) {
          return /*#__PURE__*/react.createElement(Group, {
            orientation: orientation,
            overrides: overrides
          }, children);
        }
      }, /*#__PURE__*/react.createElement(react.Fragment, null, addonBefore, /*#__PURE__*/react.createElement(Autosuggest, _extends$1({
        flex: addonBefore || addonAfter ? '1' : undefined,
        automaticSelection: automaticSelection,
        cacheKey: cacheKey,
        defer: defer,
        disabled: disabled,
        isLoading: isLoading,
        limit: limit,
        loadOptions: loadOptions,
        loadVariables: loadVariables,
        options: options,
        onChange: onChange,
        pagination: pagination,
        placeholder: placeholder,
        restrictToOptions: restrictToOptions,
        value: value,
        errorText: errorText,
        emptyText: emptyText,
        loadingText: loadingText,
        loadingMoreText: loadingMoreText,
        renderClearButton: renderClearButton,
        renderError: renderError,
        renderEmpty: renderEmpty,
        renderLoading: renderLoading,
        renderLoadingMore: renderLoadingMore,
        renderOption: renderOption,
        clearButtonProps: clearButtonProps,
        inputProps: _objectSpread2$3({
          isRequired: isRequired,
          state: state
        }, inputProps),
        itemProps: itemProps,
        popoverProps: popoverProps,
        dropdownMenuInitialState: dropdownMenuInitialState,
        overrides: overrides,
        variant: variant
      }, elementProps, autosuggestProps)), addonAfter));
    })
  });
}, {
  themeKey: 'AutosuggestField'
});
var AutosuggestField = createComponent(function (props) {
  var AutosuggestFieldProps = useProps$1u(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: AutosuggestFieldProps
  });
}, {
  attach: {
    useProps: useProps$1u,
    displayName: 'Autosuggest.Field'
  },
  themeKey: 'AutosuggestField'
});

Object.assign(Autosuggest, {
  StaticItem: AutosuggestStaticItem,
  Item: AutosuggestItem,
  Formik: formikField(Autosuggest, {
    isAutosuggest: true
  }),
  ReduxForm: reduxFormField(Autosuggest, {
    isAutosuggest: true
  })
});
Object.assign(AutosuggestField, {
  Formik: formikField(AutosuggestField, {
    hasFieldWrapper: true,
    isAutosuggest: true
  }),
  ReduxForm: reduxFormField(AutosuggestField, {
    hasFieldWrapper: true,
    isAutosuggest: true
  })
});

var _templateObject$M, _templateObject2$y, _templateObject3$w, _templateObject4$v, _templateObject5$q, _templateObject6$p, _templateObject7$m, _templateObject8$m;
var Avatar = function Avatar(styleProps) {
  return css(_templateObject$M || (_templateObject$M = _taggedTemplateLiteralLoose(["\n  width: 60px;\n  height: 60px;\n  overflow: hidden;\n  object-fit: cover;\n\n  ", "\n\n  ", "\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), styleProps.variant === 'circle' && css$1(_templateObject2$y || (_templateObject2$y = _taggedTemplateLiteralLoose(["\n      border-radius: 50%;\n\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "circle.base")(styleProps)), styleProps.initials && css$1(_templateObject3$w || (_templateObject3$w = _taggedTemplateLiteralLoose(["\n      background-color: ", ";\n      color: ", ";\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    "])), palette(styleProps.palette)(styleProps), palette(styleProps.palette + "Inverted")(styleProps)), getSizeAttributes$3(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};

function getSizeAttributes$3(styleProps) {
  var sizeAttributes = {
    small: css$1(_templateObject4$v || (_templateObject4$v = _taggedTemplateLiteralLoose(["\n      width: 40px;\n      height: 40px;\n\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "styles.sizes.small")(styleProps)),
    default: css$1(_templateObject5$q || (_templateObject5$q = _taggedTemplateLiteralLoose(["\n      width: 60px;\n      height: 60px;\n      font-size: 24px;\n\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "styles.sizes.default")(styleProps)),
    medium: css$1(_templateObject6$p || (_templateObject6$p = _taggedTemplateLiteralLoose(["\n      width: 80px;\n      height: 80px;\n      font-size: 36px;\n\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "styles.sizes.medium")(styleProps)),
    large: css$1(_templateObject7$m || (_templateObject7$m = _taggedTemplateLiteralLoose(["\n      width: 100px;\n      height: 100px;\n      font-size: 48px;\n\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "styles.sizes.large")(styleProps))
  };
  return sizeAttributes[styleProps.size] || css$1(_templateObject8$m || (_templateObject8$m = _taggedTemplateLiteralLoose(["\n      width: ", ";\n      height: ", ";\n    "])), styleProps.size, styleProps.size);
}

var _templateObject$L, _templateObject2$x, _templateObject3$v, _templateObject4$u, _templateObject5$p, _templateObject6$o;
var Image$1 = function Image(styleProps) {
  return css(_templateObject$L || (_templateObject$L = _taggedTemplateLiteralLoose(["\n  ", "\n\n  ", "\n\n  ", "\n\n  & {\n    ", ";\n  }\n"])), styleProps.isFixed && css$1(_templateObject2$x || (_templateObject2$x = _taggedTemplateLiteralLoose(["\n      max-width: unset;\n\n      ", ";\n    "])), theme(styleProps.themeKey, "styles.fixed")(styleProps)), styleProps.fit === 'contain' && css$1(_templateObject3$v || (_templateObject3$v = _taggedTemplateLiteralLoose(["\n      object-fit: contain;\n\n      ", ";\n\n      ", ";\n    "])), styleProps.fitPosition && css$1(_templateObject4$u || (_templateObject4$u = _taggedTemplateLiteralLoose(["\n        object-position: ", ";\n      "])), styleProps.fitPosition), theme(styleProps.themeKey, "styles.contain")(styleProps)), styleProps.fit === 'cover' && css$1(_templateObject5$p || (_templateObject5$p = _taggedTemplateLiteralLoose(["\n      object-fit: cover;\n\n      ", ";\n\n      ", ";\n    "])), styleProps.fitPosition && css$1(_templateObject6$o || (_templateObject6$o = _taggedTemplateLiteralLoose(["\n        object-position: ", ";\n      "])), styleProps.fitPosition), theme(styleProps.themeKey, "styles.cover")(styleProps)), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$1t = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: Image$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: undefined
  });
}, {
  themeKey: 'Image'
});
var Image = createComponent(function (props) {
  var imageProps = useProps$1t(props);
  return createElement({
    component: Box$2,
    use: props.use,
    htmlProps: imageProps
  });
}, {
  attach: {
    useProps: useProps$1t,
    displayName: 'Image'
  },
  defaultProps: {
    use: 'img'
  },
  themeKey: 'Image'
});

var useProps$1s = createHook(function (props, _ref) {
  if (props === void 0) {
    props = {};
  }

  var themeKey = _ref.themeKey;
  var imageProps = Image.useProps(_objectSpread2$3({}, props), {
    themeKey: 'Avatar'
  });
  var className = useClassName({
    style: Avatar,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: imageProps.className
  });
  var children;

  if (props.initials) {
    children = props.initials.split(' ').length === 2 ? props.initials.match(/\b\w/g) : props.initials.substring(0, 2);
  }

  return _objectSpread2$3(_objectSpread2$3({}, imageProps), {}, {
    className: className,
    children: children
  });
}, {
  defaultProps: {
    size: 'default'
  },
  themeKey: 'Avatar'
});
createComponent(function (props) {
  var imageProps = useProps$1s(props);
  var use = props.use;

  if (props.initials) {
    use = Box;
  }

  return createElement({
    component: Box$2,
    use: use,
    htmlProps: imageProps
  });
}, {
  attach: {
    useProps: useProps$1s,
    displayName: 'Avatar'
  },
  defaultProps: {
    use: 'img'
  },
  themeKey: 'Avatar'
});

var _templateObject$K, _templateObject2$w, _templateObject3$u, _templateObject4$t, _templateObject5$o, _templateObject6$n;
var Badge = function Badge(styleProps) {
  return css(_templateObject$K || (_templateObject$K = _taggedTemplateLiteralLoose(["\n  align-items: center;\n  border-radius: 1rem;\n  display: inline-flex;\n  justify-content: center;\n  background-color: ", ";\n  box-sizing: content-box;\n  padding: 0 0.4em;\n  color: ", ";\n  fill: ", ";\n  font-size: ", "rem;\n  font-weight: ", ";\n  height: 1.2em;\n\n  ", "\n\n  ", "\n\n  ", "\n\n  & {\n    ", ";\n  }\n"])), palette(styleProps.palette)(styleProps), palette(styleProps.palette + "Inverted")(styleProps), palette(styleProps.palette + "Inverted")(styleProps), fontSize('100')(styleProps), fontWeight('semibold')(styleProps), !styleProps.children && css$1(_templateObject2$w || (_templateObject2$w = _taggedTemplateLiteralLoose(["\n      height: 1em;\n      width: 1em;\n      padding: 0px;\n    "]))), styleProps.isAttached && css$1(_templateObject3$u || (_templateObject3$u = _taggedTemplateLiteralLoose(["\n      position: absolute;\n      top: -0.5em;\n      right: -0.5em;\n\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "styles.attached")(styleProps)), getSizeAttributes$2(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};

function getSizeAttributes$2(styleProps) {
  var sizeAttributes = {
    default: css$1(_templateObject4$t || (_templateObject4$t = _taggedTemplateLiteralLoose(["\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "styles.sizes.default")(styleProps)),
    medium: css$1(_templateObject5$o || (_templateObject5$o = _taggedTemplateLiteralLoose(["\n      & {\n        font-size: ", "rem;\n        ", ";\n      }\n    "])), fontSize('200')(styleProps), theme(styleProps.themeKey, "styles.sizes.medium")(styleProps)),
    large: css$1(_templateObject6$n || (_templateObject6$n = _taggedTemplateLiteralLoose(["\n      & {\n        font-size: ", "rem;\n        ", ";\n      }\n    "])), fontSize('300')(styleProps), theme(styleProps.themeKey, "styles.sizes.large")(styleProps))
  };
  return sizeAttributes[styleProps.size || 'default'];
}

var useProps$1r = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var ref = react.useRef();
  var boxProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, props), {}, {
    ref: ref
  }));
  var className = useClassName({
    style: Badge,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  react.useEffect(function () {
    if (ref && ref.current) {
      // @ts-ignore
      var parentElement = ref.current.parentElement;
      parentElement.setAttribute('style', 'position:relative;');
    }
  }, []);
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  defaultProps: {
    palette: 'primary'
  },
  themeKey: 'Badge'
});
createComponent(function (props) {
  var badgeProps = useProps$1r(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: badgeProps
  });
}, {
  attach: {
    useProps: useProps$1r,
    displayName: 'Badge'
  },
  defaultProps: {},
  themeKey: 'Badge'
});

var _templateObject$J;
var Block = function Block(styleProps) {
  return css(_templateObject$J || (_templateObject$J = _taggedTemplateLiteralLoose(["\n  display: block;\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$1q = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: Block,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Block'
});
createComponent(function (props) {
  var blockProps = useProps$1q(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: blockProps
  });
}, {
  attach: {
    useProps: useProps$1q,
    displayName: 'Block'
  },
  themeKey: 'Block'
});

var _templateObject$I;
var Blockquote = function Blockquote(styleProps) {
  return css(_templateObject$I || (_templateObject$I = _taggedTemplateLiteralLoose(["\n  border-left: 4px solid ", ";\n  padding: ", "rem;\n\n  & {\n    ", ";\n  }\n"])), darken(0.2, 'white')(styleProps), space(6)(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$1p = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: Blockquote,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Blockquote'
});
createComponent(function (props) {
  var blockquoteProps = useProps$1p(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: blockquoteProps
  });
}, {
  attach: {
    useProps: useProps$1p,
    displayName: 'Blockquote'
  },
  defaultProps: {
    use: 'blockquote'
  },
  themeKey: 'Blockquote'
});

var _templateObject$H, _templateObject2$v, _templateObject3$t, _templateObject4$s;
var Breadcrumb$1 = function Breadcrumb(styleProps) {
  return css(_templateObject$H || (_templateObject$H = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var BreadcrumbItem$1 = function BreadcrumbItem(styleProps) {
  return css(_templateObject2$v || (_templateObject2$v = _taggedTemplateLiteralLoose(["\n  &&&&&:not(:last-child) {\n    margin-right: ", "rem;\n  }\n\n  & {\n    ", ";\n  }\n"])), space(2)(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var BreadcrumbSeparator$1 = function BreadcrumbSeparator(styleProps) {
  return css(_templateObject3$t || (_templateObject3$t = _taggedTemplateLiteralLoose(["\n  display: inline;\n  margin-left: ", "rem;\n\n  & {\n    ", ";\n  }\n"])), space(2)(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var BreadcrumbLink$1 = function BreadcrumbLink(styleProps) {
  return css(_templateObject4$s || (_templateObject4$s = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var _templateObject$G, _templateObject2$u, _templateObject3$s;
var Link$2 = function Link(styleProps) {
  return css(_templateObject$G || (_templateObject$G = _taggedTemplateLiteralLoose(["\n  color: ", ";\n  fill: ", ";\n  cursor: pointer;\n  font-weight: ", ";\n  text-decoration: none;\n\n  &:hover {\n    text-decoration: underline;\n\n    & {\n      ", ";\n    }\n  }\n\n  &:focus {\n    & {\n      ", ";\n    }\n  }\n\n  & .bb-Icon {\n    vertical-align: -0.125em;\n  }\n\n  & {\n    ", ";\n  }\n"])), palette('primary', {
    dark: 'primary300'
  })(styleProps), palette('primary', {
    dark: 'primary300'
  })(styleProps), fontWeight('semibold')(styleProps), theme(styleProps.themeKey, "styles.hover")(styleProps), theme(styleProps.themeKey, "styles.focus")(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var LinkBlock$1 = function LinkBlock(styleProps) {
  return css(_templateObject2$u || (_templateObject2$u = _taggedTemplateLiteralLoose(["\n  ", ";\n\n  display: block;\n\n  ", ";\n"])), Link$2(styleProps), getCapsizeStyles({
    lineHeight: 'default'
  })(styleProps));
};
var LinkInline$1 = function LinkInline(styleProps) {
  return css(_templateObject3$s || (_templateObject3$s = _taggedTemplateLiteralLoose(["\n  ", ";\n"])), Link$2(styleProps));
};

var useProps$1o = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: Link$2,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Link'
});
var Link$1 = createComponent(function (props) {
  var linkProps = useProps$1o(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: linkProps
  });
}, {
  attach: {
    useProps: useProps$1o,
    displayName: 'Link'
  },
  defaultProps: {
    use: 'a'
  },
  themeKey: 'Link'
});

var useProps$1n = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: LinkBlock$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Link.Block'
});
var LinkBlock = createComponent(function (props) {
  var linkBlockProps = useProps$1n(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: linkBlockProps
  });
}, {
  attach: {
    useProps: useProps$1n,
    displayName: 'Link.Block'
  },
  defaultProps: {
    use: 'a'
  },
  themeKey: 'Link.Block'
});

var useProps$1m = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: LinkInline$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Link.Inline'
});
var LinkInline = createComponent(function (props) {
  var linkInlineProps = useProps$1m(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: linkInlineProps
  });
}, {
  attach: {
    useProps: useProps$1m,
    displayName: 'Link.Inline'
  },
  defaultProps: {
    use: 'a'
  },
  themeKey: 'Link.Inline'
});

var Link = Object.assign(Link$1, {
  Block: LinkBlock,
  Inline: LinkInline
});

var _templateObject$F, _templateObject2$t, _templateObject3$r, _templateObject4$r;
var List$2 = function List(styleProps) {
  return css(_templateObject$F || (_templateObject$F = _taggedTemplateLiteralLoose(["\n  list-style: unset;\n  list-style-type: none;\n\n  & & {\n    margin-left: ", "rem;\n  }\n\n  & li {\n    &:not(:last-child) {\n      margin-bottom: ", "rem;\n    }\n  }\n\n  & {\n    ", ";\n  }\n\n  & {\n    ", ";\n  }\n\n  & {\n    ", ";\n  }\n"])), space(4)(styleProps), space(1)(styleProps), styleProps.isOrdered && getOrderedProperties(styleProps), styleProps.orientation === 'horizontal' && getHorizontalProperties(styleProps), theme(styleProps.themeKey, 'styles.base')(styleProps));
};
var ListItem$1 = function ListItem(styleProps) {
  return css(_templateObject2$t || (_templateObject2$t = _taggedTemplateLiteralLoose(["\n  & .bb-Icon {\n    vertical-align: -0.125em;\n  }\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, 'styles.base')(styleProps));
};
var getOrderedProperties = function getOrderedProperties(styleProps) {
  return css(_templateObject3$r || (_templateObject3$r = _taggedTemplateLiteralLoose(["\n  list-style-type: decimal;\n\n  & & {\n    list-style-type: lower-alpha;\n  }\n\n  & & & {\n    list-style-type: lower-roman;\n  }\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, 'styles.ordered')(styleProps));
};
var getHorizontalProperties = function getHorizontalProperties(styleProps) {
  return css(_templateObject4$r || (_templateObject4$r = _taggedTemplateLiteralLoose(["\n  &&& li {\n    display: inline-block;\n    margin-bottom: unset;\n\n    &:not(:last-child) {\n      margin-right: 1rem;\n    }\n  }\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, 'styles.horizontal')(styleProps));
};

var useProps$1l = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: List$2,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  defaultProps: {
    isOrdered: false,
    orientation: 'vertical'
  },
  themeKey: 'List'
});
var List$1 = createComponent(function (props) {
  var use = props.use;

  if (!use) {
    use = props.isOrdered ? 'ol' : 'ul';
  }

  var listProps = useProps$1l(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: use,
    htmlProps: listProps
  });
}, {
  attach: {
    useProps: useProps$1l,
    displayName: 'List'
  },
  themeKey: 'List'
});

var useProps$1k = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: ListItem$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'List.Item'
});
var ListItem = createComponent(function (props) {
  var listItemProps = useProps$1k(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: listItemProps
  });
}, {
  attach: {
    useProps: useProps$1k,
    displayName: 'List.Item'
  },
  defaultProps: {
    use: 'li'
  },
  themeKey: 'List.Item'
});

var List = Object.assign(List$1, {
  Item: ListItem
});

var _templateObject$E;
var Navigation$1 = function Navigation(styleProps) {
  return css(_templateObject$E || (_templateObject$E = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$1j = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: Navigation$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    role: props.use !== 'nav' ? 'navigation' : undefined
  });
}, {
  themeKey: 'Navigation'
});
var Navigation = createComponent(function (props) {
  var navigationProps = useProps$1j(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: navigationProps
  });
}, {
  attach: {
    useProps: useProps$1j,
    displayName: 'Navigation'
  },
  defaultProps: {
    use: 'nav'
  },
  themeKey: 'Navigation'
});

var BreadcrumbContext = react.createContext({});
var useProps$1i = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var hasSeparator = props.hasSeparator,
      overrides = props.overrides,
      separator = props.separator,
      restProps = _objectWithoutPropertiesLoose$4(props, ["hasSeparator", "overrides", "separator"]);

  var navigationProps = Navigation.useProps(_objectSpread2$3(_objectSpread2$3({}, restProps), {}, {
    overrides: overrides
  }));
  var className = useClassName({
    style: Breadcrumb$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: navigationProps.className
  });
  var context = react.useMemo(function () {
    return {
      overrides: props.overrides
    };
  }, [props.overrides]);
  var children = /*#__PURE__*/react.createElement(BreadcrumbContext.Provider, {
    value: context
  }, /*#__PURE__*/react.createElement(List, {
    isOrdered: true,
    orientation: "horizontal",
    listStyleType: "none",
    overrides: overrides
  }, react.Children.map(props.children, function (child, index) {
    if (!react.isValidElement(child)) return child;
    var isLastChild = react.Children.count(props.children) - 1 === index;
    return react.cloneElement(child, _objectSpread2$3({
      hasSeparator: typeof hasSeparator !== 'undefined' ? hasSeparator : !isLastChild,
      separator: separator
    }, child.props));
  })));
  return _objectSpread2$3(_objectSpread2$3({}, navigationProps), {}, {
    'aria-label': 'Breadcrumb',
    className: className,
    children: children
  });
}, {
  themeKey: 'Breadcrumb'
});
var Breadcrumb = createComponent(function (props) {
  var breadcrumbProps = useProps$1i(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: breadcrumbProps
  });
}, {
  attach: {
    useProps: useProps$1i,
    displayName: 'Breadcrumb'
  },
  defaultProps: {
    use: 'nav'
  },
  themeKey: 'Breadcrumb'
}); //////////////////////////////

var useBreadcrumbItemProps = createHook(function (props, _ref2) {
  var themeKey = _ref2.themeKey;

  var hasSeparator = props.hasSeparator,
      isCurrent = props.isCurrent,
      overrides = props.overrides,
      separator = props.separator,
      restProps = _objectWithoutPropertiesLoose$4(props, ["hasSeparator", "isCurrent", "overrides", "separator"]);

  var boxProps = List.Item.useProps(_objectSpread2$3(_objectSpread2$3({}, restProps), {}, {
    overrides: overrides
  }));
  var contextProps = react.useContext(BreadcrumbContext);
  var className = useClassName({
    style: BreadcrumbItem$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, contextProps), props),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var children = /*#__PURE__*/react.createElement(react.Fragment, null, react.Children.count(props.children) > 0 ? react.Children.map(props.children, function (child) {
    if (!react.isValidElement(child)) return child;

    if (child.type === BreadcrumbLink) {
      return react.cloneElement(child, _objectSpread2$3({
        isCurrent: isCurrent
      }, child.props));
    }

    return child;
  }) : props.children, hasSeparator && /*#__PURE__*/react.createElement(BreadcrumbSeparator, null, separator));
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: children
  });
}, {
  themeKey: 'Breadcrumb.Item'
});
var BreadcrumbItem = createComponent(function (props) {
  var breadcrumbItemProps = useBreadcrumbItemProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: breadcrumbItemProps
  });
}, {
  attach: {
    useProps: useBreadcrumbItemProps
  },
  defaultProps: {
    use: 'li'
  },
  themeKey: 'Breadcrumb.Item'
}); //////////////////////////////

var useBreadcrumbSeparatorProps = createHook(function (props, _ref3) {
  var themeKey = _ref3.themeKey;
  var boxProps = Box.useProps(props);
  var contextProps = react.useContext(BreadcrumbContext);
  var className = useClassName({
    style: BreadcrumbSeparator$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, contextProps), props),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    role: 'presentation',
    children: boxProps.children || '/'
  });
}, {
  themeKey: 'Breadcrumb.Separator'
});
var BreadcrumbSeparator = createComponent(function (props) {
  var breadcrumbItemProps = useBreadcrumbSeparatorProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: breadcrumbItemProps
  });
}, {
  attach: {
    useProps: useBreadcrumbSeparatorProps
  },
  themeKey: 'Breadcrumb.Separator'
}); //////////////////////////////

var useBreadcrumbLinkProps = createHook(function (props, _ref4) {
  var themeKey = _ref4.themeKey;

  var isCurrent = props.isCurrent,
      restProps = _objectWithoutPropertiesLoose$4(props, ["isCurrent"]);

  var linkProps = isCurrent ? Text.useProps(restProps) : Link.useProps(restProps);
  var contextProps = react.useContext(BreadcrumbContext);
  var className = useClassName({
    style: BreadcrumbLink$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, contextProps), props),
    themeKey: themeKey,
    prevClassName: linkProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, linkProps), {}, {
    className: className,
    'aria-current': isCurrent ? 'page' : linkProps['aria-current'],
    href: isCurrent ? undefined : linkProps.href
  });
}, {
  themeKey: 'Breadcrumb.Link'
});
var BreadcrumbLink = createComponent(function (props) {
  var breadcrumbItemProps = useBreadcrumbLinkProps(props);
  var use = props.use;

  if (props.isCurrent) {
    use = Text;
  }

  return createElement({
    children: props.children,
    component: Box$2,
    use: use,
    htmlProps: breadcrumbItemProps
  });
}, {
  attach: {
    useProps: useBreadcrumbLinkProps
  },
  defaultProps: {
    use: 'a'
  },
  themeKey: 'Breadcrumb.Link'
});

Object.assign(Breadcrumb, {
  Item: BreadcrumbItem,
  Separator: BreadcrumbSeparator,
  Link: BreadcrumbLink
});

var _templateObject$D, _templateObject2$s, _templateObject3$q, _templateObject4$q, _templateObject5$n, _templateObject6$m, _templateObject7$l, _templateObject8$l, _templateObject9$f, _templateObject10$e;
var Callout$1 = function Callout(styleProps) {
  return css(_templateObject$D || (_templateObject$D = _taggedTemplateLiteralLoose(["\n  background-color: ", ";\n\n  ", "\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), palette('background', {
    dark: 'gray900'
  })(styleProps), styleProps.showCloseButton && css$1(_templateObject2$s || (_templateObject2$s = _taggedTemplateLiteralLoose(["\n      position: relative;\n    "]))), styleProps.hasTint && getTintAttributes(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var CalloutContent$1 = function CalloutContent(styleProps) {
  return css(_templateObject3$q || (_templateObject3$q = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var CalloutHeader$1 = function CalloutHeader(styleProps) {
  return css(_templateObject4$q || (_templateObject4$q = _taggedTemplateLiteralLoose(["\n  margin-bottom: ", "rem;\n\n  & {\n    ", ";\n  }\n"])), space(3, 'minor')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var CalloutTitle$1 = function CalloutTitle(styleProps) {
  return css(_templateObject5$n || (_templateObject5$n = _taggedTemplateLiteralLoose(["\n  font-size: ", "em;\n  font-weight: ", ";\n\n  & {\n    ", ";\n  }\n"])), fontSize('300')(styleProps), fontWeight('semibold')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var CalloutFooter$1 = function CalloutFooter(styleProps) {
  return css(_templateObject6$m || (_templateObject6$m = _taggedTemplateLiteralLoose(["\n  margin-top: ", "rem;\n\n  & {\n    ", ";\n  }\n"])), space(3, 'major')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var CalloutIconWrapper = function CalloutIconWrapper(styleProps) {
  return css(_templateObject7$l || (_templateObject7$l = _taggedTemplateLiteralLoose(["\n  margin-right: ", "rem;\n\n  & .bb-Icon {\n    vertical-align: -0.125em;\n  }\n  & .bb-CalloutContent .bb-Icon {\n    font-size: 1.25em;\n  }\n\n  & {\n    ", ";\n  }\n"])), space(2, 'major')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var CalloutClose = function CalloutClose(styleProps) {
  return css(_templateObject8$l || (_templateObject8$l = _taggedTemplateLiteralLoose(["\n  position: absolute;\n  top: ", "rem;\n  right: ", "rem;\n\n  & {\n    ", ";\n  }\n"])), space(1, 'major')(styleProps), space(1, 'major')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var CalloutOverlay$1 = function CalloutOverlay(styleProps) {
  return css(_templateObject9$f || (_templateObject9$f = _taggedTemplateLiteralLoose(["\n  max-width: 500px;\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), altitude('200')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var getTintAttributes = function getTintAttributes(styleProps) {
  return css$1(_templateObject10$e || (_templateObject10$e = _taggedTemplateLiteralLoose(["\n    && {\n      border-color: ", " !important;\n    }\n\n    background-color: ", ";\n    color: ", ";\n    fill: ", ";\n\n    & {\n      ", ";\n    }\n  "])), palette(styleProps.type + "100")(styleProps), palette(styleProps.type + "Tint", {
    dark: styleProps.type + "Shade"
  })(styleProps), palette(styleProps.type + "TintInverted", {
    dark: styleProps.type + "ShadeInverted"
  })(styleProps), palette(styleProps.type + "TintInverted", {
    dark: styleProps.type + "ShadeInverted"
  })(styleProps), theme(styleProps.themeKey, "tint")(styleProps));
};

var ModalContext = react.createContext({
  modal: {}
});
function useModalState(initialState) {
  return useDialogState(initialState);
}
function useModalContext() {
  return react.useContext(ModalContext);
}
function ModalState(props) {
  props.children;
      var restProps = _objectWithoutPropertiesLoose$4(props, ["children"]);

  var modal = useModalState(restProps);
  var contextValue = react.useMemo(function () {
    return {
      modal: modal
    };
  }, [modal]);
  return /*#__PURE__*/react.createElement(ModalContext.Provider, {
    value: contextValue
  }, isFunction$2(props.children) ? props.children(modal) : props.children);
}

var useProps$1h = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var modalContext = react.useContext(ModalContext);
  props = _objectSpread2$3(_objectSpread2$3({}, props), modalContext.modal);

  var _props = props,
      visible = _props.visible,
      baseId = _props.baseId,
      modal = _props.modal,
      animating = _props.animating,
      animated = _props.animated,
      stopAnimation = _props.stopAnimation,
      htmlProps = _objectWithoutPropertiesLoose$4(_props, ["visible", "baseId", "modal", "animating", "animated", "stopAnimation"]);

  var modalBackdropProps = useDialogBackdrop({
    visible: visible,
    baseId: baseId,
    modal: modal,
    animating: animating,
    animated: animated,
    stopAnimation: stopAnimation
  }, htmlProps);
  htmlProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, htmlProps), modalBackdropProps));
  var className = useClassName({
    style: ModalBackdrop$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: htmlProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, htmlProps), {}, {
    className: className
  });
}, {
  themeKey: 'Modal.Backdrop'
});
var ModalBackdrop = createComponent(function (props) {
  var modalBackdropProps = useProps$1h(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: modalBackdropProps
  });
}, {
  attach: {
    useProps: useProps$1h,
    displayName: 'Modal.Backdrop'
  },
  themeKey: 'Modal.Backdrop'
});

var useProps$1g = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var modalContext = react.useContext(ModalContext);
  props = _objectSpread2$3(_objectSpread2$3({}, props), modalContext.modal);

  var _props = props,
      children = _props.children,
      hideBackdrop = _props.hideBackdrop,
      hide = _props.hide,
      hideOnEsc = _props.hideOnEsc,
      hideOnClickOutside = _props.hideOnClickOutside,
      modal = _props.modal,
      preventBodyScroll = _props.preventBodyScroll,
      visible = _props.visible,
      animating = _props.animating,
      animated = _props.animated,
      baseId = _props.baseId,
      unstable_initialFocusRef = _props.unstable_initialFocusRef,
      unstable_finalFocusRef = _props.unstable_finalFocusRef,
      unstable_orphan = _props.unstable_orphan,
      unstable_autoFocusOnHide = _props.unstable_autoFocusOnHide,
      unstable_autoFocusOnShow = _props.unstable_autoFocusOnShow,
      stopAnimation = _props.stopAnimation,
      htmlProps = _objectWithoutPropertiesLoose$4(_props, ["children", "hideBackdrop", "hide", "hideOnEsc", "hideOnClickOutside", "modal", "preventBodyScroll", "visible", "animating", "animated", "baseId", "unstable_initialFocusRef", "unstable_finalFocusRef", "unstable_orphan", "unstable_autoFocusOnHide", "unstable_autoFocusOnShow", "stopAnimation"]);

  var modalProps = useDialog({
    hide: hide,
    hideOnEsc: hideOnEsc,
    hideOnClickOutside: hideOnClickOutside,
    modal: modal,
    preventBodyScroll: preventBodyScroll,
    visible: visible,
    animating: animating,
    animated: animated,
    baseId: baseId,
    unstable_initialFocusRef: unstable_initialFocusRef,
    unstable_finalFocusRef: unstable_finalFocusRef,
    unstable_orphan: unstable_orphan,
    unstable_autoFocusOnHide: unstable_autoFocusOnHide,
    unstable_autoFocusOnShow: unstable_autoFocusOnShow,
    stopAnimation: stopAnimation
  }, htmlProps);
  htmlProps = Box.useProps(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3({}, props), modalProps), !modal ? {
    wrapElement: function wrapElement(children) {
      return /*#__PURE__*/react.createElement(Box, null, !hideBackdrop && /*#__PURE__*/react.createElement(ModalBackdrop, null, /*#__PURE__*/react.createElement("div", null)), children);
    }
  } : {}));
  var className = useClassName({
    style: Modal$2,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: htmlProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, htmlProps), {}, {
    className: className,
    children: modal ? /*#__PURE__*/react.createElement(react.Fragment, null, !hideBackdrop && /*#__PURE__*/react.createElement(ModalBackdrop, omitCSSProps(omit(props, 'className')), /*#__PURE__*/react.createElement("div", null)), children) : children
  });
}, {
  defaultProps: {
    placement: 'center'
  },
  themeKey: 'Modal'
});
var Modal$1 = createComponent(function (props) {
  var modalProps = useProps$1g(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: modalProps
  });
}, {
  attach: {
    useProps: useProps$1g,
    displayName: 'Modal'
  },
  themeKey: 'Modal'
});

var useProps$1f = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var modalContext = react.useContext(ModalContext);
  props = _objectSpread2$3(_objectSpread2$3({}, props), modalContext.modal);

  var _props = props,
      disabled = _props.disabled,
      focusable = _props.focusable,
      visible = _props.visible,
      toggle = _props.toggle,
      baseId = _props.baseId,
      unstable_disclosureRef = _props.unstable_disclosureRef,
      htmlProps = _objectWithoutPropertiesLoose$4(_props, ["disabled", "focusable", "visible", "toggle", "baseId", "unstable_disclosureRef"]);

  var modalDisclosureProps = useDialogDisclosure({
    disabled: disabled,
    focusable: focusable,
    visible: visible,
    toggle: toggle,
    baseId: baseId,
    unstable_disclosureRef: unstable_disclosureRef
  }, htmlProps);
  htmlProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, htmlProps), modalDisclosureProps));
  var className = useClassName({
    style: ModalDisclosure$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: htmlProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, htmlProps), {}, {
    className: className
  });
}, {
  themeKey: 'Modal.Disclosure'
});
var ModalDisclosure = createComponent(function (props) {
  var modalDisclosureProps = useProps$1f(props);
  return createElement({
    children: props.children,
    component: Box$2,
    htmlProps: modalDisclosureProps,
    use: props.use
  });
}, {
  attach: {
    useProps: useProps$1f,
    displayName: 'Modal.Disclosure'
  },
  defaultProps: {
    use: 'button'
  },
  themeKey: 'Modal.Disclosure'
});

var Modal = Object.assign(Modal$1, {
  Backdrop: ModalBackdrop,
  Disclosure: ModalDisclosure,
  useContext: useModalContext,
  useState: useModalState,
  State: ModalState
});

var _templateObject$C, _templateObject2$r;
var Overlay$2 = function Overlay(styleProps) {
  return css(_templateObject$C || (_templateObject$C = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var OverlayDisclosure$1 = function OverlayDisclosure(styleProps) {
  return css(_templateObject2$r || (_templateObject2$r = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$1e = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var htmlProps = Modal.useProps(props, {
    themeKey: 'Overlay'
  });
  var className = useClassName({
    style: Overlay$2,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: htmlProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, htmlProps), {}, {
    className: className
  });
}, {
  defaultProps: {
    hideBackdrop: true,
    placement: 'center'
  },
  themeKey: 'Overlay'
});
var Overlay$1 = createComponent(function (props) {
  var overlayProps = useProps$1e(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: overlayProps
  });
}, {
  attach: {
    useProps: useProps$1e,
    displayName: 'Overlay'
  },
  themeKey: 'Overlay'
});

var useProps$1d = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var htmlProps = ModalDisclosure.useProps(props);
  var className = useClassName({
    style: OverlayDisclosure$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: htmlProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, htmlProps), {}, {
    className: className
  });
}, {
  themeKey: 'Overlay.Disclosure'
});
var OverlayDisclosure = createComponent(function (props) {
  var overlayDisclosureProps = useProps$1d(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: overlayDisclosureProps
  });
}, {
  attach: {
    useProps: useProps$1d,
    displayName: 'Overlay.Disclosure'
  },
  defaultProps: {
    use: 'button'
  },
  themeKey: 'Overlay.Disclosure'
});

function useOverlayState(initialState) {
  return useModalState(_objectSpread2$3(_objectSpread2$3({}, initialState), {}, {
    modal: false
  }));
}
function OverlayState(props) {
  var children = props.children,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children"]);

  return /*#__PURE__*/react.createElement(ModalState, _extends$1({}, restProps, {
    modal: false
  }), children);
}

var Overlay = Object.assign(Overlay$1, {
  Disclosure: OverlayDisclosure,
  useState: useOverlayState,
  State: OverlayState
});

var CalloutContext = react.createContext({});
var useProps$1c = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var _props$closeButtonPro = props.closeButtonProps,
      closeButtonProps = _props$closeButtonPro === void 0 ? {} : _props$closeButtonPro,
      iconProps = props.iconProps,
      onClickClose = props.onClickClose,
      overrides = props.overrides,
      footer = props.footer,
      standalone = props.standalone,
      showCloseButton = props.showCloseButton,
      title = props.title,
      restProps = _objectWithoutPropertiesLoose$4(props, ["closeButtonProps", "iconProps", "onClickClose", "overrides", "footer", "standalone", "showCloseButton", "title"]);

  var cardProps = Card.useProps(_objectSpread2$3(_objectSpread2$3({}, restProps), {}, {
    standalone: true
  }));
  var className = useClassName({
    style: Callout$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: cardProps.className
  });
  var calloutCloseClassName = useClassName({
    style: CalloutClose,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Close',
    prevClassName: closeButtonProps.className
  });
  var titleId = useUniqueId();
  var descriptionId = useUniqueId();
  var context = react.useMemo(function () {
    return _objectSpread2$3({
      descriptionId: descriptionId,
      titleId: titleId
    }, props);
  }, [descriptionId, props, titleId]);
  var children = /*#__PURE__*/react.createElement(CalloutContext.Provider, {
    value: context
  }, /*#__PURE__*/react.createElement(Box, {
    display: "flex"
  }, standalone ? props.children : /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(CalloutIcon, {
    iconProps: iconProps,
    overrides: overrides
  }), /*#__PURE__*/react.createElement(Box, null, title && /*#__PURE__*/react.createElement(CalloutHeader, {
    overrides: overrides
  }, typeof title === 'string' ? /*#__PURE__*/react.createElement(CalloutTitle, {
    overrides: overrides
  }, title) : title), /*#__PURE__*/react.createElement(CalloutContent, {
    overrides: overrides
  }, props.children), footer && /*#__PURE__*/react.createElement(CalloutFooter, {
    overrides: overrides
  }, footer)))), showCloseButton && /*#__PURE__*/react.createElement(Button.Close, _extends$1({
    className: calloutCloseClassName,
    onClick: onClickClose,
    size: title ? undefined : 'small'
  }, closeButtonProps)));
  return _objectSpread2$3(_objectSpread2$3({}, cardProps), {}, {
    'aria-describedby': props.children ? descriptionId : undefined,
    'aria-labelledby': props.title ? titleId : undefined,
    className: className,
    children: children
  });
}, {
  defaultProps: {
    type: 'info'
  },
  themeKey: 'Callout'
});
var Callout = createComponent(function (props) {
  var textProps = useProps$1c(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$1c,
    displayName: 'Callout'
  },
  themeKey: 'Callout'
}); //////////////////////////////

var useCalloutContentProps = createHook(function (props, _ref2) {
  var themeKey = _ref2.themeKey;
  var boxProps = Box.useProps(props);
  var contextProps = react.useContext(CalloutContext);
  var className = useClassName({
    style: CalloutContent$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, contextProps), props),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({
    id: props.id || contextProps.descriptionId
  }, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Callout.Content'
});
var CalloutContent = createComponent(function (props) {
  var calloutContentProps = useCalloutContentProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: calloutContentProps
  });
}, {
  attach: {
    useProps: useCalloutContentProps,
    displayName: 'Callout.Content'
  },
  themeKey: 'Callout.Content'
}); //////////////////////////////

var useCalloutHeaderProps = createHook(function (props, _ref3) {
  var themeKey = _ref3.themeKey;
  var boxProps = Box.useProps(props);
  var contextProps = react.useContext(CalloutContext);
  var className = useClassName({
    style: CalloutHeader$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, contextProps), props),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Callout.Header'
});
var CalloutHeader = createComponent(function (props) {
  var calloutHeaderProps = useCalloutHeaderProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: calloutHeaderProps
  });
}, {
  attach: {
    useProps: useCalloutHeaderProps,
    displayName: 'Callout.Header'
  },
  themeKey: 'Callout.Header'
}); //////////////////////////////

var useCalloutTitleProps = createHook(function (props, _ref4) {
  var themeKey = _ref4.themeKey;
  var textProps = Text.useProps(props);
  var contextProps = react.useContext(CalloutContext);
  var className = useClassName({
    style: CalloutTitle$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, contextProps), props),
    themeKey: themeKey,
    prevClassName: textProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({
    id: contextProps.titleId
  }, textProps), {}, {
    className: className
  });
}, {
  themeKey: 'Callout.Title'
});
var CalloutTitle = createComponent(function (props) {
  var calloutTitleProps = useCalloutTitleProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: calloutTitleProps
  });
}, {
  attach: {
    useProps: useCalloutTitleProps,
    displayName: 'Callout.Title'
  },
  defaultProps: {
    use: 'span'
  },
  themeKey: 'Callout.Title'
}); //////////////////////////////

var useCalloutFooterProps = createHook(function (props, _ref5) {
  var themeKey = _ref5.themeKey;
  var boxProps = Box.useProps(props);
  var contextProps = react.useContext(CalloutContext);
  var className = useClassName({
    style: CalloutFooter$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, contextProps), props),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Callout.Footer'
});
var CalloutFooter = createComponent(function (props) {
  var calloutFooterProps = useCalloutFooterProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: calloutFooterProps
  });
}, {
  attach: {
    useProps: useCalloutFooterProps,
    displayName: 'Callout.Footer'
  },
  themeKey: 'Callout.Footer'
}); //////////////////////////////

var useCalloutIconProps = createHook(function (props, _ref6) {
  var themeKey = _ref6.themeKey;

  var iconProps = props.iconProps,
      restProps = _objectWithoutPropertiesLoose$4(props, ["iconProps"]);

  var boxProps = Box.useProps(restProps);
  var contextProps = react.useContext(CalloutContext);
  var className = useClassName({
    style: CalloutIconWrapper,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, contextProps), props),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var icon = /*#__PURE__*/react.createElement(Icon, _extends$1({
    "aria-hidden": true,
    color: contextProps.type,
    fontSize: !contextProps.title ? '300' : undefined,
    icon: contextProps.type
  }, iconProps));
  var children = /*#__PURE__*/react.createElement(CalloutContent, {
    id: undefined
  }, icon);

  if (contextProps.title) {
    children = /*#__PURE__*/react.createElement(CalloutHeader, null, /*#__PURE__*/react.createElement(CalloutTitle, {
      id: undefined
    }, icon));
  }

  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: children
  });
}, {
  themeKey: 'Callout.IconWrapper'
});
var CalloutIcon = createComponent(function (props) {
  var calloutIconProps = useCalloutIconProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: calloutIconProps
  });
}, {
  attach: {
    useProps: useCalloutIconProps,
    displayName: 'Callout.IconWrapper'
  },
  themeKey: 'Callout.IconWrapper'
}); //////////////////////////////

var useCalloutOverlayProps = createHook(function (props, _ref7) {
  var themeKey = _ref7.themeKey;

  props.variant;
      var restProps = _objectWithoutPropertiesLoose$4(props, ["variant"]);

  var _React$useContext = react.useContext(ModalContext),
      modal = _React$useContext.modal;

  var calloutProps = Callout.useProps(_objectSpread2$3(_objectSpread2$3({
    onClickClose: restProps.hide || modal.hide
  }, restProps), {}, {
    wrapElement: function wrapElement(children) {
      return (
        /*#__PURE__*/
        // @ts-ignore
        react.createElement(Overlay, _extends$1({
          placement: "bottom-end"
        }, restProps), children)
      );
    }
  }));
  var contextProps = react.useContext(CalloutContext);
  var className = useClassName({
    style: CalloutOverlay$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, contextProps), props),
    themeKey: themeKey,
    prevClassName: calloutProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, calloutProps), {}, {
    className: className
  });
}, {
  defaultProps: {
    showCloseButton: true
  },
  themeKey: 'Callout.Overlay'
});
var CalloutOverlay = createComponent(function (props) {
  var calloutOverlayProps = useCalloutOverlayProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: calloutOverlayProps
  });
}, {
  attach: {
    useProps: useCalloutOverlayProps,
    displayName: 'Callout.Overlay'
  },
  themeKey: 'Callout.Overlay'
});

Object.assign(Callout, {
  Header: CalloutHeader,
  Title: CalloutTitle,
  Content: CalloutContent,
  Footer: CalloutFooter,
  Icon: CalloutIcon,
  Overlay: CalloutOverlay
});

var _templateObject$B;
var Clickable = function Clickable(styleProps) {
  return css(_templateObject$B || (_templateObject$B = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$1b = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var disabled = props.disabled,
      focusable = props.focusable,
      unstable_clickOnEnter = props.unstable_clickOnEnter,
      unstable_clickOnSpace = props.unstable_clickOnSpace,
      restProps = _objectWithoutPropertiesLoose$4(props, ["disabled", "focusable", "unstable_clickOnEnter", "unstable_clickOnSpace"]);

  var clickableProps = useClickable({
    disabled: disabled,
    focusable: focusable,
    unstable_clickOnEnter: unstable_clickOnEnter,
    unstable_clickOnSpace: unstable_clickOnSpace
  }, restProps);
  var boxProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, restProps), clickableProps));
  var className = useClassName({
    style: Clickable,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Clickable'
});
createComponent(function (props) {
  var textProps = useProps$1b(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$1b,
    displayName: 'Clickable'
  },
  themeKey: 'Clickable'
});

var _templateObject$A, _templateObject2$q;
var Code$1 = function Code(styleProps) {
  return css(_templateObject$A || (_templateObject$A = _taggedTemplateLiteralLoose(["\n  background-color: ", ";\n  border-radius: ", ";\n  color: ", ";\n  font-family: ", ";\n  padding: 0.1rem 0.2rem;\n  overflow: auto;\n\n  & {\n    ", "\n  };\n\n  & {\n    ", ";\n  };\n"])), styleProps.palette === 'default' ? palette('white700', {
    dark: 'black300'
  })(styleProps) : palette(styleProps.palette + "Tint", {
    dark: styleProps.palette + "Shade"
  })(styleProps), borderRadius('1')(styleProps), styleProps.palette === 'default' ? palette('text')(styleProps) : palette(styleProps.palette + "700", {
    dark: styleProps.palette + "200"
  })(styleProps), font('mono')(styleProps), styleProps.isBlock && css$1(_templateObject2$q || (_templateObject2$q = _taggedTemplateLiteralLoose(["\n        padding: 1rem;\n        ", ";\n      "])), theme(styleProps.themeKey, "styles.block")(styleProps)), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$1a = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: Code$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  defaultProps: {
    palette: 'default'
  },
  themeKey: 'Code'
});
var Code = createComponent(function (props) {
  var use = props.use;

  if (!use) {
    use = props.isBlock ? 'pre' : 'code';
  }

  var codeProps = useProps$1a(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: use,
    htmlProps: codeProps
  });
}, {
  attach: {
    useProps: useProps$1a,
    displayName: 'Code'
  },
  themeKey: 'Code'
});

var _templateObject$z, _templateObject2$p, _templateObject3$p, _templateObject4$p, _templateObject5$m, _templateObject6$l, _templateObject7$k, _templateObject8$k, _templateObject9$e, _templateObject10$d, _templateObject11$a, _templateObject12$9, _templateObject13$7, _templateObject14$6, _templateObject15$6, _templateObject16$6, _templateObject17$6, _templateObject18$5, _templateObject19$4, _templateObject20$4, _templateObject21$4;
var Columns$1 = function Columns(styleProps) {
  return css(_templateObject$z || (_templateObject$z = _taggedTemplateLiteralLoose(["\n  ", ";\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), !styleProps.isGapless && css$1(_templateObject2$p || (_templateObject2$p = _taggedTemplateLiteralLoose(["\n      margin-left: -", "rem;\n      margin-right: -", "rem;\n      margin-top: -", "rem;\n\n      &:last-child {\n        margin-bottom: -", "rem;\n      }\n    "])), space(styleProps.spacing)(styleProps) / 2, space(styleProps.spacing)(styleProps) / 2, space(styleProps.spacing)(styleProps) / 2, space(styleProps.spacing)(styleProps) / 2), getWrapProperties(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var Column$1 = function Column(styleProps) {
  return css(_templateObject3$p || (_templateObject3$p = _taggedTemplateLiteralLoose(["\n  flex: 1;\n  max-width: 100%;\n\n  ", ";\n\n  & {\n    ", ";\n  }\n\n  & {\n    ", ";\n  }\n\n  & {\n    ", ";\n  }\n"])), !styleProps.isGapless && css$1(_templateObject4$p || (_templateObject4$p = _taggedTemplateLiteralLoose(["\n      padding: ", "rem;\n    "])), space(styleProps.spacing)(styleProps) / 2), getSpreadProperties(styleProps), getSpreadOffsetProperties(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var marginAutoOffsets = {
  left: css$1(_templateObject5$m || (_templateObject5$m = _taggedTemplateLiteralLoose(["\n    margin-left: auto;\n  "]))),
  both: css$1(_templateObject6$l || (_templateObject6$l = _taggedTemplateLiteralLoose(["\n    margin-left: auto;\n    margin-right: auto;\n  "]))),
  right: css$1(_templateObject7$k || (_templateObject7$k = _taggedTemplateLiteralLoose(["\n    margin-right: auto;\n  "])))
};
var getWidth$1 = function getWidth(spread) {
  return spread / 12 * 100 + "%";
};
function getWrapProperties(styleProps) {
  var isOneLine = styleProps.isOneLine,
      minBreakpoint = styleProps.minBreakpoint;

  if (isOneLine) {
    if (minBreakpoint !== 'tablet' && minBreakpoint !== 'mobile') {
      return breakpoint('max-tablet', css$1(_templateObject8$k || (_templateObject8$k = _taggedTemplateLiteralLoose(["\n          flex-wrap: wrap;\n        "]))))(styleProps);
    }

    if (minBreakpoint !== 'mobile') {
      return breakpoint('max-mobile', css$1(_templateObject9$e || (_templateObject9$e = _taggedTemplateLiteralLoose(["\n          flex-wrap: wrap;\n        "]))))(styleProps);
    }

    return null;
  } else {
    return css$1(_templateObject10$d || (_templateObject10$d = _taggedTemplateLiteralLoose(["\n      flex-wrap: wrap;\n    "])));
  }
}
function getSpreadProperties(styleProps) {
  var minBreakpoint = styleProps.minBreakpoint,
      spread = styleProps.spread,
      spreadMobile = styleProps.spreadMobile,
      spreadTablet = styleProps.spreadTablet,
      spreadDesktop = styleProps.spreadDesktop,
      spreadWidescreen = styleProps.spreadWidescreen,
      spreadFullHD = styleProps.spreadFullHD;

  if (!minBreakpoint && !spread && !spreadMobile && !spreadTablet && !spreadDesktop && !spreadWidescreen && !spreadFullHD) {
    return css$1(_templateObject11$a || (_templateObject11$a = _taggedTemplateLiteralLoose(["\n      @media (max-width: ", "px) {\n        flex: none;\n        width: 100%;\n      }\n    "])), theme('breakpoints', 'tablet')(styleProps));
  }

  var getProperties = function getProperties(_ref) {
    var _breakpoint = _ref.breakpoint,
        spread = _ref.spread;
    var properties = css$1(_templateObject12$9 || (_templateObject12$9 = _taggedTemplateLiteralLoose(["\n      flex: none;\n      width: ", ";\n    "])), getWidth$1(spread));
    if (!spread) return null;

    if (_breakpoint) {
      return breakpoint("max-" + _breakpoint, css$1(_templateObject13$7 || (_templateObject13$7 = _taggedTemplateLiteralLoose(["\n          ", ";\n        "])), properties))(styleProps);
    }

    return properties;
  };

  return css$1(_templateObject14$6 || (_templateObject14$6 = _taggedTemplateLiteralLoose(["\n    ", ";\n    ", ";\n    ", ";\n    ", ";\n    ", ";\n    ", ";\n    ", ";\n    ", ";\n  "])), getProperties({
    spread: spread
  }), getProperties({
    spread: spreadFullHD,
    breakpoint: 'fullHD'
  }), getProperties({
    spread: spreadWidescreen,
    breakpoint: 'widescreen'
  }), getProperties({
    spread: spreadDesktop,
    breakpoint: 'desktop'
  }), minBreakpoint !== 'tablet' && minBreakpoint !== 'mobile' && !spreadTablet && !spreadMobile && breakpoint("max-tablet", css$1(_templateObject15$6 || (_templateObject15$6 = _taggedTemplateLiteralLoose(["\n        width: 100%;\n      "]))))(styleProps), getProperties({
    spread: spreadTablet,
    breakpoint: 'tablet'
  }), minBreakpoint !== 'mobile' && !spreadMobile && breakpoint("max-mobile", css$1(_templateObject16$6 || (_templateObject16$6 = _taggedTemplateLiteralLoose(["\n        width: 100%;\n      "]))))(styleProps), getProperties({
    spread: spreadMobile,
    breakpoint: 'mobile'
  }));
}
function getSpreadOffsetProperties(styleProps) {
  var spreadOffset = styleProps.spreadOffset,
      spreadMobileOffset = styleProps.spreadMobileOffset,
      spreadTabletOffset = styleProps.spreadTabletOffset,
      spreadDesktopOffset = styleProps.spreadDesktopOffset,
      spreadWidescreenOffset = styleProps.spreadWidescreenOffset,
      spreadFullHDOffset = styleProps.spreadFullHDOffset;

  if (!spreadOffset && !spreadMobileOffset && !spreadTabletOffset && !spreadDesktopOffset && !spreadWidescreenOffset && !spreadFullHDOffset) {
    return null;
  }

  var getProperties = function getProperties(_ref2) {
    var _breakpoint = _ref2.breakpoint,
        spreadOffset = _ref2.spreadOffset;
    var properties = css$1(_templateObject17$6 || (_templateObject17$6 = _taggedTemplateLiteralLoose(["\n      margin-left: ", ";\n    "])), getWidth$1(spreadOffset));
    if (!spreadOffset) return null;

    if (_breakpoint) {
      return breakpoint("max-" + _breakpoint, css$1(_templateObject18$5 || (_templateObject18$5 = _taggedTemplateLiteralLoose(["\n          ", ";\n        "])), properties))(styleProps);
    }

    return properties;
  };

  if (typeof spreadOffset === 'number') {
    return css$1(_templateObject19$4 || (_templateObject19$4 = _taggedTemplateLiteralLoose(["\n      ", ";\n      ", ";\n      ", ";\n      ", ";\n      ", ";\n      ", ";\n      ", ";\n      ", ";\n    "])), getProperties({
      spreadOffset: spreadOffset
    }), getProperties({
      spreadOffset: spreadFullHDOffset,
      breakpoint: 'fullHD'
    }), getProperties({
      spreadOffset: spreadWidescreenOffset,
      breakpoint: 'widescreen'
    }), getProperties({
      spreadOffset: spreadDesktopOffset,
      breakpoint: 'desktop'
    }), !spreadTabletOffset && !spreadMobileOffset && breakpoint("max-tablet", css$1(_templateObject20$4 || (_templateObject20$4 = _taggedTemplateLiteralLoose(["\n          margin-left: 0;\n        "]))))(styleProps), getProperties({
      spreadOffset: spreadTabletOffset,
      breakpoint: 'tablet'
    }), !spreadMobileOffset && breakpoint("max-mobile", css$1(_templateObject21$4 || (_templateObject21$4 = _taggedTemplateLiteralLoose(["\n          margin-left: 0;\n        "]))))(styleProps), getProperties({
      spreadOffset: spreadMobileOffset,
      breakpoint: 'mobile'
    }));
  }

  return marginAutoOffsets[spreadOffset];
}

var ColumnsContext = react.createContext({
  isGapless: false,
  minBreakpoint: undefined
});

var useProps$19 = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var flexProps = Flex.useProps(props);
  var className = useClassName({
    style: Columns$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: flexProps.className
  });
  var contextValue = react.useMemo(function () {
    return {
      isGapless: props.isGapless,
      minBreakpoint: props.minBreakpoint,
      spacing: props.spacing
    };
  }, [props.isGapless, props.minBreakpoint, props.spacing]);
  return _objectSpread2$3(_objectSpread2$3({}, flexProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(ColumnsContext.Provider, {
      value: contextValue
    }, props.children)
  });
}, {
  defaultProps: {
    isGapless: false,
    isOneLine: false,
    minBreakpoint: undefined,
    spacing: 'major-2'
  },
  themeKey: 'Columns'
});
var Columns = createComponent(function (props) {
  var columnsProps = useProps$19(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: columnsProps
  });
}, {
  attach: {
    useProps: useProps$19,
    displayName: 'Columns'
  },
  themeKey: 'Columns'
});

var useProps$18 = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var columnsContext = react.useContext(ColumnsContext);
  var className = useClassName({
    style: Column$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), columnsContext),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  defaultProps: {
    spread: undefined,
    spreadMobile: undefined,
    spreadTablet: undefined,
    spreadDesktop: undefined,
    spreadWidescreen: undefined,
    spreadFullHD: undefined,
    spreadOffset: undefined,
    spreadMobileOffset: undefined,
    spreadTabletOffset: undefined,
    spreadDesktopOffset: undefined,
    spreadWidescreenOffset: undefined,
    spreadFullHDOffset: undefined
  },
  themeKey: 'Columns.Column'
});
var Column = createComponent(function (props) {
  var columnProps = useProps$18(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: columnProps
  });
}, {
  attach: {
    useProps: useProps$18,
    displayName: 'Columns.Column'
  },
  themeKey: 'Columns.Column'
});

Object.assign(Columns, {
  Column: Column
});

var _templateObject$y, _templateObject2$o, _templateObject3$o, _templateObject4$o, _templateObject5$l, _templateObject6$k, _templateObject7$j, _templateObject8$j, _templateObject9$d, _templateObject10$c;
var Container$1 = function Container(styleProps) {
  return css(_templateObject$y || (_templateObject$y = _taggedTemplateLiteralLoose(["\n  width: 100%;\n\n  ", ";\n\n  ", ";\n\n  ", ";\n\n  ", ";\n\n  ", ";\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), !styleProps.isFluid && css$1(_templateObject2$o || (_templateObject2$o = _taggedTemplateLiteralLoose(["\n      max-width: ", "px;\n    "])), theme('breakpoints', 'fullHD')(styleProps)), styleProps.isFluid && css$1(_templateObject3$o || (_templateObject3$o = _taggedTemplateLiteralLoose(["\n      padding-left: ", "rem;\n      padding-right: ", "rem;\n\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, 'fluidMargin')(styleProps), theme(styleProps.themeKey, 'fluidMargin')(styleProps), theme(styleProps.themeKey, 'styles.fluid')(styleProps)), (styleProps.isLayout || styleProps.isFluid) && css$1(_templateObject4$o || (_templateObject4$o = _taggedTemplateLiteralLoose(["\n      @media (max-width: ", "px) {\n        padding-left: ", "rem;\n        padding-right: ", "rem;\n      }\n    "])), theme('breakpoints.tablet')(styleProps), theme(styleProps.themeKey, 'tabletMargin')(styleProps), theme(styleProps.themeKey, 'tabletMargin')(styleProps)), styleProps.isLayout && css$1(_templateObject5$l || (_templateObject5$l = _taggedTemplateLiteralLoose(["\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, 'styles.layout')(styleProps)), getResponsiveProperties(styleProps), styleProps.align && !styleProps.isFluid ? alignProperties[styleProps.align] : null, theme(styleProps.themeKey, 'styles.base')(styleProps));
};
var alignProperties = {
  left: css$1(_templateObject6$k || (_templateObject6$k = _taggedTemplateLiteralLoose(["\n    margin-right: auto;\n  "]))),
  center: css$1(_templateObject7$j || (_templateObject7$j = _taggedTemplateLiteralLoose(["\n    margin-left: auto;\n    margin-right: auto;\n  "]))),
  right: css$1(_templateObject8$j || (_templateObject8$j = _taggedTemplateLiteralLoose(["\n    margin-left: auto;\n  "])))
};
function getResponsiveProperties(styleProps) {
  var breakpoint = styleProps.breakpoint,
      isFluid = styleProps.isFluid;
  if (isFluid) return;

  if (breakpoint) {
    return css$1(_templateObject9$d || (_templateObject9$d = _taggedTemplateLiteralLoose(["\n      & {\n        max-width: ", "px;\n      }\n    "])), theme('breakpoints', breakpoint)(styleProps));
  }

  return css$1(_templateObject10$c || (_templateObject10$c = _taggedTemplateLiteralLoose(["\n    @media (max-width: ", "px) {\n      max-width: ", "px;\n    }\n\n    @media (max-width: ", "px) {\n      max-width: ", "px;\n    }\n\n    @media (max-width: ", "px) {\n      max-width: ", "px;\n    }\n  "])), theme('breakpoints', 'fullHD')(styleProps) + 128, theme('breakpoints', 'widescreen')(styleProps), theme('breakpoints', 'widescreen')(styleProps) + 128, theme('breakpoints', 'desktop')(styleProps), theme('breakpoints', 'desktop')(styleProps) + 128, theme('breakpoints', 'tablet')(styleProps));
}

var useProps$17 = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: Container$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  defaultProps: {
    align: 'center',
    breakpoint: undefined,
    isFluid: false,
    isLayout: false
  },
  themeKey: 'Container'
});
var Container = createComponent(function (props) {
  var containerProps = useProps$17(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: containerProps
  });
}, {
  attach: {
    useProps: useProps$17,
    displayName: 'Container'
  },
  themeKey: 'Container'
});

var _templateObject$x, _templateObject2$n, _templateObject3$n, _templateObject4$n, _templateObject5$k, _templateObject6$j, _templateObject7$i, _templateObject8$i, _templateObject9$c, _templateObject10$b;
var Checkbox$1 = function Checkbox(styleProps) {
  return css(_templateObject$x || (_templateObject$x = _taggedTemplateLiteralLoose(["\n  && {\n    display: flex;\n    align-items: center;\n  }\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var CheckboxIcon = function CheckboxIcon(styleProps) {
  return css(_templateObject2$n || (_templateObject2$n = _taggedTemplateLiteralLoose(["\n  -webkit-appearance: none;\n  background-color: ", ";\n  border: 1px solid ", ";\n  border-radius: 0.2em;\n  height: 1em;\n  position: relative;\n  min-width: 1em;\n  width: 1em;\n  transition: box-shadow 0.1s ease-in-out 0s, border-color 0.1s, background-color 0.1s;\n\n  & {\n    ", ";\n  }\n"])), palette('default')(styleProps), palette('white900', {
    dark: 'gray700'
  })(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var CheckboxLabel = function CheckboxLabel(styleProps) {
  return css(_templateObject3$n || (_templateObject3$n = _taggedTemplateLiteralLoose(["\n  && {\n    font-weight: ", ";\n  }\n\n  & {\n    ", ";\n  }\n"])), fontWeight('normal')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var HiddenCheckbox = function HiddenCheckbox(styleProps) {
  return getHiddenInputStyles({
    iconClassName: 'bb-CheckboxIcon',
    checkedIconCss: css$1(_templateObject4$n || (_templateObject4$n = _taggedTemplateLiteralLoose(["\n      background-clip: padding-box;\n      content: '';\n      left: calc(50% - 0.1875em);\n      top: calc(50% - 0.375em);\n      position: absolute;\n\n      & {\n        ", ";\n      }\n    "])), styleProps.indeterminate ? css$1(_templateObject5$k || (_templateObject5$k = _taggedTemplateLiteralLoose(["\n              background-color: ", ";\n              height: 0.125em;\n              width: 0.625em;\n              top: calc(50% - 0.0625em);\n              left: calc(50% - 0.3125em);\n            "])), palette('primary', {
      dark: 'primary300'
    })(styleProps)) : css$1(_templateObject6$j || (_templateObject6$j = _taggedTemplateLiteralLoose(["\n              border: 0.1rem solid ", ";\n              border-left-width: 0;\n              border-top-width: 0;\n              height: 0.625em;\n              transform: rotate(45deg);\n              width: 0.375em;\n            "])), palette('primary', {
      dark: 'primary300'
    })(styleProps))),
    disabledCheckedIconCss: css$1(_templateObject7$i || (_templateObject7$i = _taggedTemplateLiteralLoose(["\n      border-color: ", ";\n    "])), palette('gray300', {
      dark: 'gray'
    })(styleProps)),
    styleProps: styleProps,
    themeKey: 'Checkbox.Icon'
  });
};
var CheckboxGroup$1 = function CheckboxGroup(styleProps) {
  return css(_templateObject8$i || (_templateObject8$i = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var CheckboxField$1 = function CheckboxField(styleProps) {
  return css(_templateObject9$c || (_templateObject9$c = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var CheckboxGroupField$1 = function CheckboxGroupField(styleProps) {
  return css(_templateObject10$b || (_templateObject10$b = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$16 = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var autoFocus = props.autoFocus,
      checked = props.checked,
      checkboxRef = props.checkboxRef,
      inputProps = props.inputProps,
      defaultChecked = props.defaultChecked,
      disabled = props.disabled,
      indeterminate = props.indeterminate,
      isRequired = props.isRequired,
      label = props.label,
      name = props.name,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onFocus = props.onFocus,
      state = props.state,
      value = props.value,
      restProps = _objectWithoutPropertiesLoose$4(props, ["autoFocus", "checked", "checkboxRef", "inputProps", "defaultChecked", "disabled", "indeterminate", "isRequired", "label", "name", "onBlur", "onChange", "onFocus", "state", "value"]);

  var boxProps = Box.useProps(restProps);
  var className = useClassName({
    style: Checkbox$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var checkboxIconClassName = useClassName({
    style: CheckboxIcon,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Icon'
  });
  var hiddenCheckboxClassName = useClassName({
    style: HiddenCheckbox,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'HiddenInput'
  });
  var checkboxLabelClassName = useClassName({
    style: CheckboxLabel,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Label'
  });
  var labelId = useUniqueId();
  var checkboxId = useUniqueId();
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    'aria-describedby': labelId,
    'aria-invalid': state === 'danger',
    'aria-required': isRequired,
    className: className,
    children: /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Box, _extends$1({
      ref: checkboxRef,
      use: "input",
      className: hiddenCheckboxClassName // @ts-ignore
      ,
      autoFocus: autoFocus,
      checked: checked,
      defaultChecked: defaultChecked,
      disabled: disabled,
      id: checkboxId // @ts-ignore
      ,
      indeterminate: indeterminate,
      onBlur: onBlur,
      onChange: onChange,
      onFocus: onFocus,
      name: name,
      type: "checkbox" // @ts-ignore
      ,
      value: value
    }, inputProps)), /*#__PURE__*/react.createElement(Box, {
      className: checkboxIconClassName
    }), label && /*#__PURE__*/react.createElement(Label, {
      use: "span",
      id: labelId,
      className: checkboxLabelClassName,
      htmlFor: checkboxId,
      marginLeft: "minor-2"
    }, label))
  });
}, {
  themeKey: 'Checkbox'
});
var Checkbox = createComponent(function (props) {
  var textProps = useProps$16(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$16,
    displayName: 'Checkbox'
  },
  defaultProps: {
    use: 'label'
  },
  themeKey: 'Checkbox'
}); ////////////////////////////////////////////////////////////////

var useCheckboxFieldProps = createHook(function (props, _ref2) {
  var themeKey = _ref2.themeKey;

  var autoFocus = props.autoFocus,
      checked = props.checked,
      checkboxLabel = props.checkboxLabel,
      checkboxProps = props.checkboxProps,
      checkboxRef = props.checkboxRef,
      description = props.description,
      defaultChecked = props.defaultChecked,
      disabled = props.disabled,
      hint = props.hint,
      indeterminate = props.indeterminate,
      isOptional = props.isOptional,
      isRequired = props.isRequired,
      label = props.label,
      name = props.name,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onFocus = props.onFocus,
      overrides = props.overrides,
      state = props.state,
      tooltip = props.tooltip,
      tooltipTriggerComponent = props.tooltipTriggerComponent,
      validationText = props.validationText,
      value = props.value,
      restProps = _objectWithoutPropertiesLoose$4(props, ["autoFocus", "checked", "checkboxLabel", "checkboxProps", "checkboxRef", "description", "defaultChecked", "disabled", "hint", "indeterminate", "isOptional", "isRequired", "label", "name", "onBlur", "onChange", "onFocus", "overrides", "state", "tooltip", "tooltipTriggerComponent", "validationText", "value"]);

  var boxProps = Box.useProps(restProps);
  var className = useClassName({
    style: CheckboxField$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(FieldWrapper, {
      description: description,
      hint: hint,
      isOptional: isOptional,
      isRequired: isRequired,
      label: label,
      labelType: "legend",
      overrides: overrides,
      state: state,
      tooltip: tooltip,
      tooltipTriggerComponent: tooltipTriggerComponent,
      validationText: validationText
    }, function (_ref3) {
      var elementProps = _ref3.elementProps;
      return /*#__PURE__*/react.createElement(Checkbox, _extends$1({
        autoFocus: autoFocus,
        checked: checked,
        defaultChecked: defaultChecked,
        disabled: disabled,
        checkboxRef: checkboxRef,
        indeterminate: indeterminate,
        isRequired: isRequired,
        label: checkboxLabel,
        name: name,
        onBlur: onBlur,
        onChange: onChange,
        onFocus: onFocus,
        overrides: overrides,
        state: state,
        value: value
      }, omit(elementProps, 'id'), checkboxProps, {
        inputProps: _objectSpread2$3({
          id: elementProps.id
        }, checkboxProps.inputProps)
      }));
    })
  });
}, {
  defaultProps: {
    checkboxProps: {}
  },
  themeKey: 'CheckboxField'
});
var CheckboxField = createComponent(function (props) {
  var checkboxFieldProps = useCheckboxFieldProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: checkboxFieldProps
  });
}, {
  attach: {
    useProps: useProps$16,
    displayName: 'CheckboxField'
  },
  themeKey: 'CheckboxField'
});

var useProps$15 = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var defaultValue = props.defaultValue,
      disabled = props.disabled,
      onBlur = props.onBlur,
      onChange = props.onChange,
      options = props.options,
      orientation = props.orientation,
      overrides = props.overrides,
      name = props.name,
      spacing = props.spacing,
      state = props.state,
      value = props.value,
      restProps = _objectWithoutPropertiesLoose$4(props, ["defaultValue", "disabled", "onBlur", "onChange", "options", "orientation", "overrides", "name", "spacing", "state", "value"]); ////////////////////////////////////////////


  var boxProps = Box.useProps(restProps); ////////////////////////////////////////////

  var className = useClassName({
    style: CheckboxGroup$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  }); ////////////////////////////////////////////

  var _useOptionsState = useOptionsState({
    defaultValue: defaultValue,
    onBlur: onBlur,
    onChange: onChange,
    type: 'checkbox',
    value: value,
    isNativeInput: true
  }),
      getOptionItemProps = _useOptionsState.getOptionItemProps; ////////////////////////////////////////////


  return _objectSpread2$3(_objectSpread2$3({
    role: 'group'
  }, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(Set$1, {
      orientation: orientation,
      spacing: spacing
    }, options.map(function (option, i) {
      return /*#__PURE__*/react.createElement(Checkbox, _extends$1({
        key: i
      }, option, getOptionItemProps({
        value: option.value
      }), {
        name: name,
        overrides: overrides,
        state: state || option.state,
        disabled: disabled || option.disabled
      }));
    }))
  });
}, {
  defaultProps: {
    orientation: 'vertical',
    spacing: 'minor-2'
  },
  themeKey: 'CheckboxGroup'
});
var CheckboxGroup = createComponent(function (props) {
  var textProps = useProps$15(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$15,
    displayName: 'CheckboxGroup'
  },
  themeKey: 'CheckboxGroup'
}); ////////////////////////////////////////////////////////////////

var useCheckboxGroupFieldProps = createHook(function (props, _ref2) {
  var themeKey = _ref2.themeKey;

  var defaultChecked = props.defaultChecked,
      description = props.description,
      disabled = props.disabled,
      hint = props.hint,
      isOptional = props.isOptional,
      isRequired = props.isRequired,
      label = props.label,
      name = props.name,
      options = props.options,
      orientation = props.orientation,
      onBlur = props.onBlur,
      onChange = props.onChange,
      overrides = props.overrides,
      checkboxGroupProps = props.checkboxGroupProps,
      state = props.state,
      tooltip = props.tooltip,
      tooltipTriggerComponent = props.tooltipTriggerComponent,
      value = props.value,
      validationText = props.validationText,
      restProps = _objectWithoutPropertiesLoose$4(props, ["defaultChecked", "description", "disabled", "hint", "isOptional", "isRequired", "label", "name", "options", "orientation", "onBlur", "onChange", "overrides", "checkboxGroupProps", "state", "tooltip", "tooltipTriggerComponent", "value", "validationText"]);

  var boxProps = Box.useProps(restProps);
  var className = useClassName({
    style: CheckboxGroupField$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(FieldWrapper, {
      description: description,
      hint: hint,
      isOptional: isOptional,
      isRequired: isRequired,
      label: label,
      labelType: "legend",
      overrides: overrides,
      state: state,
      tooltip: tooltip,
      tooltipTriggerComponent: tooltipTriggerComponent,
      validationText: validationText
    }, function (_ref3) {
      var elementProps = _ref3.elementProps;
      return /*#__PURE__*/react.createElement(CheckboxGroup, _extends$1({
        defaultChecked: defaultChecked,
        disabled: disabled,
        orientation: orientation,
        name: name,
        options: options,
        onBlur: onBlur,
        onChange: onChange,
        overrides: overrides,
        state: state,
        value: value
      }, elementProps, checkboxGroupProps));
    })
  });
}, {
  themeKey: 'CheckboxGroupField'
});
var CheckboxGroupField = createComponent(function (props) {
  var checkboxGroupFieldProps = useCheckboxGroupFieldProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: checkboxGroupFieldProps
  });
}, {
  attach: {
    useProps: useProps$15,
    displayName: 'CheckboxGroupField'
  },
  defaultProps: {
    use: 'fieldset'
  },
  themeKey: 'CheckboxGroupField'
});

Object.assign(Checkbox, {
  Formik: formikField(Checkbox, {
    isCheckbox: true
  }),
  ReduxForm: reduxFormField(Checkbox, {
    isCheckbox: true
  })
});
Object.assign(CheckboxField, {
  Formik: formikField(CheckboxField, {
    isCheckbox: true,
    hasFieldWrapper: true
  }),
  ReduxForm: reduxFormField(CheckboxField, {
    isCheckbox: true,
    hasFieldWrapper: true
  })
});
Object.assign(CheckboxGroup, {
  Formik: formikField(CheckboxGroup, {
    isCheckboxGroup: true
  }),
  ReduxForm: reduxFormField(CheckboxGroup, {
    isCheckboxGroup: true
  })
});
Object.assign(CheckboxGroupField, {
  Formik: formikField(CheckboxGroupField, {
    isCheckboxGroup: true,
    hasFieldWrapper: true
  }),
  ReduxForm: reduxFormField(CheckboxGroupField, {
    isCheckboxGroup: true,
    hasFieldWrapper: true
  })
});

var _templateObject$w, _templateObject2$m, _templateObject3$m, _templateObject4$m, _templateObject5$j, _templateObject6$i, _templateObject7$h, _templateObject8$h, _templateObject9$b, _templateObject10$a;
var Dialog$1 = function Dialog(styleProps) {
  return css(_templateObject$w || (_templateObject$w = _taggedTemplateLiteralLoose(["\n  border-radius: ", ";\n  background-color: ", ";\n  overflow: hidden;\n  position: relative;\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), borderRadius('default')(styleProps), palette('background')(styleProps), altitude('100')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var DialogContent$1 = function DialogContent(styleProps) {
  return css(_templateObject2$m || (_templateObject2$m = _taggedTemplateLiteralLoose(["\n  padding: ", "rem;\n\n  & {\n    ", ";\n  }\n"])), space(3, 'major')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var DialogHeader$1 = function DialogHeader(styleProps) {
  return css(_templateObject3$m || (_templateObject3$m = _taggedTemplateLiteralLoose(["\n  margin-bottom: ", "rem;\n\n  & {\n    ", ";\n  }\n"])), space(2, 'major')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var DialogTitle$1 = function DialogTitle(styleProps) {
  return css(_templateObject4$m || (_templateObject4$m = _taggedTemplateLiteralLoose(["\n  font-size: ", "em;\n  font-weight: ", ";\n\n  & {\n    ", ";\n  }\n"])), fontSize('300')(styleProps), fontWeight('semibold')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var DialogFooter$1 = function DialogFooter(styleProps) {
  return css(_templateObject5$j || (_templateObject5$j = _taggedTemplateLiteralLoose(["\n  align-items: center;\n  background-color: ", ";\n  padding: ", "rem ", "rem;\n\n  ", ";\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), palette('white600', {
    dark: 'black200'
  })(styleProps), space(5, 'minor')(styleProps), space(6, 'minor')(styleProps), styleProps.showActionButtons && styleProps.footer && css$1(_templateObject6$i || (_templateObject6$i = _taggedTemplateLiteralLoose(["\n      justify-content: space-between;\n    "]))), styleProps.showActionButtons && !styleProps.footer && css$1(_templateObject7$h || (_templateObject7$h = _taggedTemplateLiteralLoose(["\n      justify-content: flex-end;\n    "]))), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var DialogClose = function DialogClose(styleProps) {
  return css(_templateObject8$h || (_templateObject8$h = _taggedTemplateLiteralLoose(["\n  position: absolute;\n  top: ", "rem;\n  right: ", "rem;\n\n  & {\n    ", ";\n  }\n"])), space(2, 'major')(styleProps), space(2, 'major')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var DialogIconWrapper = function DialogIconWrapper(styleProps) {
  return css(_templateObject9$b || (_templateObject9$b = _taggedTemplateLiteralLoose(["\n  margin-right: ", "rem;\n\n  & .bb-Icon {\n    vertical-align: -0.125em;\n  }\n  & .bb-CalloutContent .bb-Icon {\n    font-size: 1.25em;\n  }\n\n  & {\n    ", ";\n  }\n"])), space(2, 'major')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var DialogModal$1 = function DialogModal(styleProps) {
  return css(_templateObject10$a || (_templateObject10$a = _taggedTemplateLiteralLoose(["\n  max-width: 600px;\n  width: 100%;\n\n  ", ";\n\n  & .bb-DialogContent {\n    max-height: 70vh;\n    overflow-y: ", ";\n\n    ", ";\n  }\n\n  & {\n    ", ";\n  }\n"])), altitude('400')(styleProps), styleProps.hasScroll ? 'scroll' : 'visible', getHiddenScrollbarStyles(), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var DialogContext = react.createContext({});
var useProps$14 = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var _props$actionButtonsP = props.actionButtonsProps,
      actionButtonsProps = _props$actionButtonsP === void 0 ? {} : _props$actionButtonsP,
      _props$closeButtonPro = props.closeButtonProps,
      closeButtonProps = _props$closeButtonPro === void 0 ? {} : _props$closeButtonPro,
      footer = props.footer,
      _props$iconProps = props.iconProps,
      iconProps = _props$iconProps === void 0 ? {} : _props$iconProps,
      onClickClose = props.onClickClose,
      overrides = props.overrides,
      palette = props.palette,
      showActionButtons = props.showActionButtons,
      showCloseButton = props.showCloseButton,
      standalone = props.standalone,
      title = props.title,
      type = props.type,
      restProps = _objectWithoutPropertiesLoose$4(props, ["actionButtonsProps", "closeButtonProps", "footer", "iconProps", "onClickClose", "overrides", "palette", "showActionButtons", "showCloseButton", "standalone", "title", "type"]);

  var boxProps = Box.useProps(restProps);
  var className = useClassName({
    style: Dialog$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var dialogCloseClassName = useClassName({
    style: DialogClose,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Close',
    prevClassName: closeButtonProps.className
  });
  var titleId = useUniqueId();
  var descriptionId = useUniqueId();
  var context = react.useMemo(function () {
    return _objectSpread2$3({
      descriptionId: descriptionId,
      titleId: titleId
    }, props);
  }, [descriptionId, props, titleId]);
  var children = /*#__PURE__*/react.createElement(DialogContext.Provider, {
    value: context
  }, standalone ? props.children : /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(DialogContent, {
    overrides: overrides
  }, type && /*#__PURE__*/react.createElement(DialogIcon, {
    iconProps: iconProps,
    overrides: overrides
  }), /*#__PURE__*/react.createElement(Box, {
    width: "100%"
  }, title && /*#__PURE__*/react.createElement(DialogHeader, {
    overrides: overrides
  }, typeof title === 'string' ? /*#__PURE__*/react.createElement(DialogTitle, {
    overrides: overrides
  }, title) : title, showCloseButton && /*#__PURE__*/react.createElement(Button.Close, _extends$1({
    className: dialogCloseClassName,
    onClick: onClickClose,
    size: title ? undefined : 'small'
  }, closeButtonProps))), props.children)), (footer || showActionButtons) && /*#__PURE__*/react.createElement(DialogFooter, {
    overrides: overrides
  }, footer, showActionButtons && /*#__PURE__*/react.createElement(ActionButtons, _extends$1({
    palette: palette
  }, actionButtonsProps)))));
  return _objectSpread2$3(_objectSpread2$3({
    'aria-describedby': props.children ? descriptionId : undefined,
    'aria-labelledby': props.title ? titleId : undefined
  }, boxProps), {}, {
    className: className,
    children: children
  });
}, {
  themeKey: 'Dialog'
});
var Dialog = createComponent(function (props) {
  var dialogProps = useProps$14(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: dialogProps
  });
}, {
  attach: {
    useProps: useProps$14,
    displayName: 'Dialog'
  },
  themeKey: 'Dialog'
}); //////////////////////////////

var useDialogContentProps = createHook(function (props, _ref2) {
  var themeKey = _ref2.themeKey;
  var flexProps = Flex.useProps(props);
  var contextProps = react.useContext(DialogContext);
  var className = useClassName({
    style: DialogContent$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, contextProps), props),
    themeKey: themeKey,
    prevClassName: flexProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({
    id: props.id || contextProps.descriptionId
  }, flexProps), {}, {
    className: className
  });
}, {
  themeKey: 'Dialog.Content'
});
var DialogContent = createComponent(function (props) {
  var calloutContentProps = useDialogContentProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: calloutContentProps
  });
}, {
  attach: {
    useProps: useDialogContentProps,
    displayName: 'Dialog.Content'
  },
  themeKey: 'Dialog.Content'
}); //////////////////////////////

var useDialogHeaderProps = createHook(function (props, _ref3) {
  var themeKey = _ref3.themeKey;
  var boxProps = Box.useProps(props);
  var contextProps = react.useContext(DialogContext);
  var className = useClassName({
    style: DialogHeader$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, contextProps), props),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Dialog.Header'
});
var DialogHeader = createComponent(function (props) {
  var calloutHeaderProps = useDialogHeaderProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: calloutHeaderProps
  });
}, {
  attach: {
    useProps: useDialogHeaderProps,
    displayName: 'Dialog.Header'
  },
  themeKey: 'Dialog.Header'
}); //////////////////////////////

var useDialogTitleProps = createHook(function (props, _ref4) {
  var themeKey = _ref4.themeKey;
  var textProps = Text.useProps(props);
  var contextProps = react.useContext(DialogContext);
  var className = useClassName({
    style: DialogTitle$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, contextProps), props),
    themeKey: themeKey,
    prevClassName: textProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({
    id: contextProps.titleId
  }, textProps), {}, {
    className: className
  });
}, {
  themeKey: 'Dialog.Title'
});
var DialogTitle = createComponent(function (props) {
  var calloutTitleProps = useDialogTitleProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: calloutTitleProps
  });
}, {
  attach: {
    useProps: useDialogTitleProps,
    displayName: 'Dialog.Title'
  },
  defaultProps: {
    use: 'span'
  },
  themeKey: 'Dialog.Title'
}); //////////////////////////////

var useDialogFooterProps = createHook(function (props, _ref5) {
  var themeKey = _ref5.themeKey;
  var flexProps = Flex.useProps(props);
  var contextProps = react.useContext(DialogContext);
  var className = useClassName({
    style: DialogFooter$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, contextProps), props),
    themeKey: themeKey,
    prevClassName: flexProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, flexProps), {}, {
    className: className
  });
}, {
  themeKey: 'Dialog.Footer'
});
var DialogFooter = createComponent(function (props) {
  var calloutFooterProps = useDialogFooterProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: calloutFooterProps
  });
}, {
  attach: {
    useProps: useDialogFooterProps,
    displayName: 'Dialog.Footer'
  },
  themeKey: 'Dialog.Footer'
}); //////////////////////////////

var useDialogIconProps = createHook(function (props, _ref6) {
  var themeKey = _ref6.themeKey;

  var iconProps = props.iconProps,
      restProps = _objectWithoutPropertiesLoose$4(props, ["iconProps"]);

  var textProps = Text.useProps(restProps);
  var contextProps = react.useContext(DialogContext);
  var className = useClassName({
    style: DialogIconWrapper,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, contextProps), props),
    themeKey: themeKey,
    prevClassName: textProps.className
  });
  var icon = /*#__PURE__*/react.createElement(Icon, _extends$1({
    "aria-hidden": true,
    color: contextProps.type,
    fontSize: !contextProps.title ? '300' : undefined,
    icon: contextProps.type
  }, iconProps));
  var children = icon;

  if (contextProps.title) {
    children = /*#__PURE__*/react.createElement(DialogHeader, null, /*#__PURE__*/react.createElement(DialogTitle, {
      id: undefined
    }, icon));
  }

  return _objectSpread2$3(_objectSpread2$3({}, textProps), {}, {
    className: className,
    children: children
  });
}, {
  themeKey: 'Dialog.IconWrapper'
});
var DialogIcon = createComponent(function (props) {
  var DialogIconProps = useDialogIconProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: DialogIconProps
  });
}, {
  attach: {
    useProps: useDialogIconProps,
    displayName: 'Dialog.IconWrapper'
  },
  defaultProps: {
    use: 'span'
  },
  themeKey: 'Dialog.IconWrapper'
}); //////////////////////////////

var useDialogModalProps = createHook(function (props, _ref7) {
  var _restProps$actionButt;

  var themeKey = _ref7.themeKey;

  var _React$useContext = react.useContext(ModalContext),
      modal = _React$useContext.modal;

  var _modal$props = _objectSpread2$3(_objectSpread2$3({}, modal), props),
      wrap = _modal$props.wrap,
      variant = _modal$props.variant,
      restProps = _objectWithoutPropertiesLoose$4(_modal$props, ["wrap", "variant"]);

  var dialogProps = Dialog.useProps(_objectSpread2$3(_objectSpread2$3({}, restProps), {}, {
    onClickClose: bindFns(restProps.hide, props.onClickClose),
    actionButtonsProps: _objectSpread2$3(_objectSpread2$3({}, restProps.actionButtonsProps), {}, {
      onClickCancel: bindFns(restProps.hide, (_restProps$actionButt = restProps.actionButtonsProps) === null || _restProps$actionButt === void 0 ? void 0 : _restProps$actionButt.onClickCancel)
    }),
    wrapElement: function wrapElement(children) {
      return (
        /*#__PURE__*/
        // @ts-ignore
        react.createElement(Modal, _extends$1({
          hideOnEsc: variant !== 'alert',
          hideOnClickOutside: variant !== 'alert',
          role: variant === 'alert' ? 'alertdialog' : 'dialog'
        }, omitCSSProps(restProps)), children)
      );
    }
  }));
  var contextProps = react.useContext(DialogContext);
  var className = useClassName({
    style: DialogModal$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, contextProps), props),
    themeKey: themeKey,
    prevClassName: dialogProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, dialogProps), {}, {
    className: className,
    children: typeof wrap === 'function' ? wrap(dialogProps.children) : dialogProps.children
  });
}, {
  defaultProps: {
    hasScroll: true
  },
  themeKey: 'Dialog.Modal'
});
var DialogModal = createComponent(function (props) {
  var DialogModalProps = useDialogModalProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: DialogModalProps
  });
}, {
  attach: {
    useProps: useDialogModalProps,
    displayName: 'Dialog.Modal'
  },
  themeKey: 'Dialog.Modal'
});

Object.assign(Dialog, {
  Header: DialogHeader,
  Title: DialogTitle,
  Content: DialogContent,
  Footer: DialogFooter,
  Icon: DialogIcon,
  Modal: DialogModal
});

var _templateObject$v, _templateObject2$l, _templateObject3$l, _templateObject4$l, _templateObject5$i, _templateObject6$h, _templateObject7$g, _templateObject8$g;
var Drawer$2 = function Drawer(styleProps) {
  return css(_templateObject$v || (_templateObject$v = _taggedTemplateLiteralLoose(["\n  && {\n    position: fixed;\n    background-color: ", ";\n\n    ", "\n\n    ", "\n\n    ", "\n\n    ", "\n\n    ", "\n\n    ", "\n  }\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), palette('background')(styleProps), styleProps.placement === 'left' && css$1(_templateObject2$l || (_templateObject2$l = _taggedTemplateLiteralLoose(["\n        left: 0;\n      "]))), styleProps.placement === 'right' && css$1(_templateObject3$l || (_templateObject3$l = _taggedTemplateLiteralLoose(["\n        right: 0;\n      "]))), styleProps.placement === 'top' && css$1(_templateObject4$l || (_templateObject4$l = _taggedTemplateLiteralLoose(["\n        top: 0;\n      "]))), styleProps.placement === 'bottom' && css$1(_templateObject5$i || (_templateObject5$i = _taggedTemplateLiteralLoose(["\n        bottom: 0;\n      "]))), (styleProps.placement === 'left' || styleProps.placement === 'right' || styleProps.isFullScreen) && css$1(_templateObject6$h || (_templateObject6$h = _taggedTemplateLiteralLoose(["\n        height: ", ";\n      "])), styleProps.viewportHeight), (styleProps.placement === 'top' || styleProps.placement === 'bottom' || styleProps.isFullScreen) && css$1(_templateObject7$g || (_templateObject7$g = _taggedTemplateLiteralLoose(["\n        width: 100%;\n      "]))), altitude('300')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var DrawerDisclosure$1 = function DrawerDisclosure(styleProps) {
  return css(_templateObject8$g || (_templateObject8$g = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$13 = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var modalContext = react.useContext(ModalContext);
  var viewportHeight = useViewportHeight({
    enabled: modalContext.modal.visible || props.visible
  });
  var modalProps = Modal.useProps(_objectSpread2$3({}, props), {
    themeKey: 'Drawer'
  });
  var className = useClassName({
    style: Drawer$2,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      viewportHeight: viewportHeight
    }),
    themeKey: themeKey,
    prevClassName: modalProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, modalProps), {}, {
    className: className
  });
}, {
  defaultProps: {
    duration: '0.2s',
    placement: 'left'
  },
  themeKey: 'Drawer'
});
var Drawer$1 = createComponent(function (props) {
  var textProps = useProps$13(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$13,
    displayName: 'Drawer'
  },
  themeKey: 'Drawer'
});

var useProps$12 = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var htmlProps = ModalDisclosure.useProps(props);
  var className = useClassName({
    style: DrawerDisclosure$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: htmlProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, htmlProps), {}, {
    className: className
  });
}, {
  themeKey: 'Drawer.Disclosure'
});
var DrawerDisclosure = createComponent(function (props) {
  var DrawerDisclosureProps = useProps$12(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: DrawerDisclosureProps
  });
}, {
  attach: {
    useProps: useProps$12,
    displayName: 'Drawer.Disclosure'
  },
  defaultProps: {
    use: 'button'
  },
  themeKey: 'Drawer.Disclosure'
});

function useDrawerState(initialState) {
  return useModalState(initialState);
}
function DrawerState(props) {
  var children = props.children,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children"]);

  return /*#__PURE__*/react.createElement(ModalState, restProps, children);
}

var Drawer = Object.assign(Drawer$1, {
  Disclosure: DrawerDisclosure,
  useState: useDrawerState,
  State: DrawerState
});

var _templateObject$u;
var FieldStack$1 = function FieldStack(styleProps) {
  return css(_templateObject$u || (_templateObject$u = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var _templateObject$t, _templateObject2$k, _templateObject3$k, _templateObject4$k;
var Stack$1 = function Stack(styleProps) {
  return css(_templateObject$t || (_templateObject$t = _taggedTemplateLiteralLoose(["\n  ", "\n  ", "\n\n  & {\n    ", ";\n  }\n"])), styleProps.orientation === 'vertical' && getVerticalAttributes(styleProps), styleProps.orientation === 'horizontal' && getHorizontalAttributes(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var getVerticalAttributes = function getVerticalAttributes(styleProps) {
  return css$1(_templateObject2$k || (_templateObject2$k = _taggedTemplateLiteralLoose(["\n  &&& > *:not(:last-child) {\n    margin-bottom: ", "rem;\n\n    & {\n      ", ";\n    }\n  }\n\n  & {\n    ", ";\n  }\n"])), space(styleProps.spacing)(styleProps), theme(styleProps.themeKey, "styles.child.vertical")(styleProps), theme(styleProps.themeKey, "styles.vertical")(styleProps));
};

var getHorizontalAttributes = function getHorizontalAttributes(styleProps) {
  var breakpoint = theme('breakpoints', styleProps.verticalBelow)(styleProps);
  breakpoint = breakpoint ? breakpoint + "px" : styleProps.verticalBelow;
  return css$1(_templateObject3$k || (_templateObject3$k = _taggedTemplateLiteralLoose(["\n    @media screen and (min-width: ", ") {\n      display: flex;\n\n      ", "\n\n      ", "\n\n      & > *:not(:last-child) {\n        margin-right: ", "rem;\n\n        & {\n          ", ";\n        }\n      }\n\n      & {\n        ", ";\n      }\n    }\n\n    @media screen and (max-width: ", ") {\n      ", ";\n    }\n  "])), breakpoint, !styleProps.alignX && !styleProps.alignY && css$1(_templateObject4$k || (_templateObject4$k = _taggedTemplateLiteralLoose(["\n        & > * {\n          flex: 1;\n        }\n      "]))), getFlexAlignmentAttributes(styleProps), space(styleProps.spacing)(styleProps), theme(styleProps.themeKey, "styles.child.horizontal")(styleProps), theme(styleProps.themeKey, "styles.horizontal")(styleProps), breakpoint, getVerticalAttributes(styleProps));
};

var useProps$11 = createHook(function (props, _ref) {
  if (props === void 0) {
    props = {};
  }

  var themeKey = _ref.themeKey;

  var _props = props;
      _props.orientation;
      _props.spacing;
      var restProps = _objectWithoutPropertiesLoose$4(_props, ["orientation", "spacing"]);

  var boxProps = Box.useProps(restProps);
  var className = useClassName({
    style: Stack$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  defaultProps: {
    orientation: 'vertical',
    spacing: 'major-4',
    verticalBelow: 'desktop'
  },
  themeKey: 'Stack'
});
var Stack = createComponent(function (props) {
  var StackProps = useProps$11(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: StackProps
  });
}, {
  attach: {
    useProps: useProps$11,
    displayName: 'Stack'
  },
  themeKey: 'Stack'
});

var useProps$10 = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var stackProps = Stack.useProps(props);
  var className = useClassName({
    style: FieldStack$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: stackProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, stackProps), {}, {
    className: className
  });
}, {
  defaultProps: {
    orientation: 'vertical',
    spacing: 'major-2'
  },
  themeKey: 'FieldStack'
});
var FieldStack = createComponent(function (props) {
  var textProps = useProps$10(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$10,
    displayName: 'FieldStack'
  },
  themeKey: 'FieldStack'
});

var _templateObject$s, _templateObject2$j, _templateObject3$j, _templateObject4$j, _templateObject5$h, _templateObject6$g, _templateObject7$f, _templateObject8$f, _templateObject9$a, _templateObject10$9, _templateObject11$9, _templateObject12$8, _templateObject13$6, _templateObject14$5, _templateObject15$5, _templateObject16$5, _templateObject17$5;
var Grid$1 = function Grid(styleProps) {
  return css(_templateObject$s || (_templateObject$s = _taggedTemplateLiteralLoose(["\n  display: grid;\n\n  ", "\n  ", "\n  ", "\n  ", "\n  ", "\n  ", "\n  ", "\n  ", "\n\n  & {\n    ", ";\n  }\n"])), styleProps.autoFlow && css$1(_templateObject2$j || (_templateObject2$j = _taggedTemplateLiteralLoose(["\n      grid-auto-flow: ", ";\n    "])), styleProps.autoFlow), styleProps.gap && css$1(_templateObject3$j || (_templateObject3$j = _taggedTemplateLiteralLoose(["\n      grid-gap: ", ";\n    "])), styleProps.gap), styleProps.template && css$1(_templateObject4$j || (_templateObject4$j = _taggedTemplateLiteralLoose(["\n      grid-template: ", ";\n    "])), styleProps.template), styleProps.templateAreas && css$1(_templateObject5$h || (_templateObject5$h = _taggedTemplateLiteralLoose(["\n      grid-template-areas: ", ";\n    "])), styleProps.templateAreas), styleProps.templateColumns && css$1(_templateObject6$g || (_templateObject6$g = _taggedTemplateLiteralLoose(["\n      grid-template-columns: ", ";\n    "])), styleProps.templateColumns), styleProps.templateRows && css$1(_templateObject7$f || (_templateObject7$f = _taggedTemplateLiteralLoose(["\n      grid-template-rows: ", ";\n    "])), styleProps.templateRows), styleProps.autoColumns && css$1(_templateObject8$f || (_templateObject8$f = _taggedTemplateLiteralLoose(["\n      grid-auto-columns: ", ";\n    "])), styleProps.autoColumns), styleProps.autoRows && css$1(_templateObject9$a || (_templateObject9$a = _taggedTemplateLiteralLoose(["\n      grid-auto-rows: ", ";\n    "])), styleProps.autoRows), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var GridItem$1 = function GridItem(styleProps) {
  return css(_templateObject10$9 || (_templateObject10$9 = _taggedTemplateLiteralLoose(["\n  display: grid-item;\n\n  ", "\n  ", "\n  ", "\n  ", "\n  ", "\n  ", "\n  ", "\n\n  & {\n    ", ";\n  }\n"])), styleProps.area && css$1(_templateObject11$9 || (_templateObject11$9 = _taggedTemplateLiteralLoose(["\n      grid-area: ", ";\n    "])), styleProps.area), styleProps.column && css$1(_templateObject12$8 || (_templateObject12$8 = _taggedTemplateLiteralLoose(["\n      grid-column: ", ";\n    "])), styleProps.column), styleProps.row && css$1(_templateObject13$6 || (_templateObject13$6 = _taggedTemplateLiteralLoose(["\n      grid-row: ", ";\n    "])), styleProps.row), styleProps.columnStart && css$1(_templateObject14$5 || (_templateObject14$5 = _taggedTemplateLiteralLoose(["\n      grid-column-start: ", ";\n    "])), styleProps.columnStart), styleProps.columnEnd && css$1(_templateObject15$5 || (_templateObject15$5 = _taggedTemplateLiteralLoose(["\n      grid-column-end: ", ";\n    "])), styleProps.columnEnd), styleProps.rowStart && css$1(_templateObject16$5 || (_templateObject16$5 = _taggedTemplateLiteralLoose(["\n      grid-row-start: ", ";\n    "])), styleProps.rowStart), styleProps.rowEnd && css$1(_templateObject17$5 || (_templateObject17$5 = _taggedTemplateLiteralLoose(["\n      grid-row-end: ", ";\n    "])), styleProps.rowEnd), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$$ = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: Grid$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Grid'
});
var Grid = createComponent(function (props) {
  var gridProps = useProps$$(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: gridProps
  });
}, {
  attach: {
    useProps: useProps$$,
    displayName: 'Grid'
  },
  themeKey: 'Grid'
});

var useProps$_ = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: GridItem$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Grid.Item'
});
var GridItem = createComponent(function (props) {
  var gridItemProps = useProps$_(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: gridItemProps
  });
}, {
  attach: {
    useProps: useProps$_,
    displayName: 'Grid.Item'
  },
  themeKey: 'Grid.Item'
});

Object.assign(Grid, {
  Item: GridItem
});

var _templateObject$r, _templateObject2$i, _templateObject3$i, _templateObject4$i, _templateObject5$g, _templateObject6$f, _templateObject7$e, _templateObject8$e;
var Heading = function Heading(styleProps) {
  return css(_templateObject$r || (_templateObject$r = _taggedTemplateLiteralLoose(["\n  font-family: ", ";\n  font-weight: ", ";\n\n  ", ";\n\n  h1& {\n    ", ";\n\n    & {\n      ", ";\n    }\n\n    ", ";\n  }\n  h2& {\n    ", ";\n\n    & {\n      ", ";\n    }\n\n    ", ";\n  }\n  h3& {\n    ", ";\n\n    & {\n      ", ";\n    }\n\n    ", ";\n  }\n  h4& {\n    ", ";\n\n    & {\n      ", ";\n    }\n\n    ", ";\n  }\n  h5& {\n    ", ";\n\n    & {\n      ", ";\n    }\n\n    ", ";\n  }\n  h6& {\n    ", ";\n\n    & {\n      ", ";\n    }\n\n    ", ";\n  }\n\n  & {\n    ", ";\n  }\n\n  & .bb-Icon {\n    vertical-align: -0.125em;\n  }\n\n  & {\n    ", ";\n  }\n"])), font('heading')(styleProps) || font('default')(styleProps), fontWeight('bold')(styleProps), getCapsizeStyles({
    lineHeight: '100',
    fontFamily: 'heading',
    includeBottomGap: true
  })(styleProps), getCapsizeStyles({
    themeKey: 'Heading.h1',
    lineHeight: '100',
    fontFamily: 'heading',
    includeBottomGap: true
  })(styleProps), theme(styleProps.themeKey, "h1.styles.base")(styleProps), styleProps.shrinkBelow && breakpoint("max-" + styleProps.shrinkBelow, css$1(_templateObject2$i || (_templateObject2$i = _taggedTemplateLiteralLoose(["\n          ", ";\n\n          & {\n            ", ";\n          }\n        "])), getCapsizeStyles({
    themeKey: 'Heading.h1',
    lineHeight: '100',
    fontFamily: 'heading',
    includeBottomGap: true,
    shrink: true
  })(styleProps), theme(styleProps.themeKey, "h1.styles.shrinked")(styleProps)))(styleProps), getCapsizeStyles({
    themeKey: 'Heading.h2',
    lineHeight: '100',
    fontFamily: 'heading',
    includeBottomGap: true
  })(styleProps), theme(styleProps.themeKey, "h2.styles.base")(styleProps), styleProps.shrinkBelow && breakpoint("max-" + styleProps.shrinkBelow, css$1(_templateObject3$i || (_templateObject3$i = _taggedTemplateLiteralLoose(["\n          ", ";\n\n          & {\n            ", ";\n          }\n        "])), getCapsizeStyles({
    themeKey: 'Heading.h2',
    lineHeight: '100',
    fontFamily: 'heading',
    includeBottomGap: true,
    shrink: true
  })(styleProps), theme(styleProps.themeKey, "h2.styles.shrinked")(styleProps)))(styleProps), getCapsizeStyles({
    themeKey: 'Heading.h3',
    lineHeight: '100',
    fontFamily: 'heading',
    includeBottomGap: true
  })(styleProps), theme(styleProps.themeKey, "h3.styles.base")(styleProps), styleProps.shrinkBelow && breakpoint("max-" + styleProps.shrinkBelow, css$1(_templateObject4$i || (_templateObject4$i = _taggedTemplateLiteralLoose(["\n          ", ";\n\n          & {\n            ", ";\n          }\n        "])), getCapsizeStyles({
    themeKey: 'Heading.h3',
    lineHeight: '100',
    fontFamily: 'heading',
    includeBottomGap: true,
    shrink: true
  })(styleProps), theme(styleProps.themeKey, "h3.styles.shrinked")(styleProps)))(styleProps), getCapsizeStyles({
    themeKey: 'Heading.h4',
    lineHeight: '100',
    fontFamily: 'heading',
    includeBottomGap: true
  })(styleProps), theme(styleProps.themeKey, "h4.styles.base")(styleProps), styleProps.shrinkBelow && breakpoint("max-" + styleProps.shrinkBelow, css$1(_templateObject5$g || (_templateObject5$g = _taggedTemplateLiteralLoose(["\n          ", ";\n\n          & {\n            ", ";\n          }\n        "])), getCapsizeStyles({
    themeKey: 'Heading.h4',
    lineHeight: '100',
    fontFamily: 'heading',
    includeBottomGap: true,
    shrink: true
  })(styleProps), theme(styleProps.themeKey, "h4.styles.shrinked")(styleProps)))(styleProps), getCapsizeStyles({
    themeKey: 'Heading.h5',
    lineHeight: '100',
    fontFamily: 'heading',
    includeBottomGap: true
  })(styleProps), theme(styleProps.themeKey, "h5.styles.base")(styleProps), styleProps.shrinkBelow && breakpoint("max-" + styleProps.shrinkBelow, css$1(_templateObject6$f || (_templateObject6$f = _taggedTemplateLiteralLoose(["\n          ", ";\n\n          & {\n            ", ";\n          }\n        "])), getCapsizeStyles({
    themeKey: 'Heading.h5',
    lineHeight: '100',
    fontFamily: 'heading',
    includeBottomGap: true,
    shrink: true
  })(styleProps), theme(styleProps.themeKey, "h5.styles.shrinked")(styleProps)))(styleProps), getCapsizeStyles({
    themeKey: 'Heading.h6',
    lineHeight: '100',
    fontFamily: 'heading',
    includeBottomGap: true
  })(styleProps), theme(styleProps.themeKey, "h6.styles.base")(styleProps), styleProps.shrinkBelow && breakpoint("max-" + styleProps.shrinkBelow, css$1(_templateObject7$e || (_templateObject7$e = _taggedTemplateLiteralLoose(["\n          & {\n            ", ";\n          }\n        "])), theme(styleProps.themeKey, "h6.styles.shrinked")(styleProps)))(styleProps), styleProps.isSubHeading && getSubHeadingProperties(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var getSubHeadingProperties = function getSubHeadingProperties(styleProps) {
  return css(_templateObject8$e || (_templateObject8$e = _taggedTemplateLiteralLoose(["\n  font-weight: ", ";\n\n  & {\n    ", ";\n  }\n"])), fontWeight('semibold')(styleProps), theme(styleProps.themeKey, "subHeading.styles.base")(styleProps));
};

var useProps$Z = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props, {
    disableCSSProps: ['fontSize']
  });
  var className = useClassName({
    style: Heading,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: classnames$1(className, props.isSubHeading ? 'sub-heading' : 'heading')
  });
}, {
  defaultProps: {
    isSubHeading: false
  },
  themeKey: 'Heading'
});
createComponent(function (props) {
  var HeadingProps = useProps$Z(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: HeadingProps
  });
}, {
  attach: {
    useProps: useProps$Z,
    displayName: 'Heading'
  },
  defaultProps: {
    use: 'h1'
  },
  themeKey: 'Heading'
});

var _templateObject$q;
var Inline = function Inline(styleProps) {
  return css(_templateObject$q || (_templateObject$q = _taggedTemplateLiteralLoose(["\n  display: inline;\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$Y = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: Inline,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Inline'
});
createComponent(function (props) {
  var inlineProps = useProps$Y(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: inlineProps
  });
}, {
  attach: {
    useProps: useProps$Y,
    displayName: 'Inline'
  },
  themeKey: 'Inline'
});

var _templateObject$p;
var InlineBlock = function InlineBlock(styleProps) {
  return css(_templateObject$p || (_templateObject$p = _taggedTemplateLiteralLoose(["\n  display: inline-block;\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$X = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: InlineBlock,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'InlineBlock'
});
createComponent(function (props) {
  var inlineBlockProps = useProps$X(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: inlineBlockProps
  });
}, {
  attach: {
    useProps: useProps$X,
    displayName: 'InlineBlock'
  },
  themeKey: 'InlineBlock'
});

var _templateObject$o;
var InlineFlex = function InlineFlex(styleProps) {
  return css(_templateObject$o || (_templateObject$o = _taggedTemplateLiteralLoose(["\n  display: inline-flex;\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$W = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: InlineFlex,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'InlineFlex'
});
createComponent(function (props) {
  var inlineFlexProps = useProps$W(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: inlineFlexProps
  });
}, {
  attach: {
    useProps: useProps$W,
    displayName: 'InlineFlex'
  },
  themeKey: 'InlineFlex'
});

var _templateObject$n;
var Key = function Key(styleProps) {
  return css(_templateObject$n || (_templateObject$n = _taggedTemplateLiteralLoose(["\n  box-sizing: border-box;\n  display: inline;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  background-color: ", ";\n  font-size: 0.875em;\n  border-radius: ", ";\n  padding: 0.25em 0.5em;\n  border-style: solid;\n  border-color: ", ";\n  border-width: 1px 1px 2px;\n\n  & {\n    ", ";\n  }\n"])), palette('default')(styleProps), borderRadius('2')(styleProps), palette('white900')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$V = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: Key,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Key'
});
createComponent(function (props) {
  var textProps = useProps$V(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$V
  },
  defaultProps: {
    use: 'kbd'
  },
  themeKey: 'Key'
});

var _templateObject$m, _templateObject2$h, _templateObject3$h, _templateObject4$h;
var Level = function Level(styleProps) {
  return css(_templateObject$m || (_templateObject$m = _taggedTemplateLiteralLoose(["\n  &&& {\n    ", ";\n  }\n\n\n  & {\n    ", ";\n  }\n"])), breakpoint(styleProps.orientation === 'horizontal' && styleProps.verticalBelow ? "max-" + styleProps.verticalBelow : null, css$1(_templateObject2$h || (_templateObject2$h = _taggedTemplateLiteralLoose(["\n        flex-direction: column;\n\n        & > *:not(:last-child) {\n          margin-bottom: ", "rem;\n        }\n\n        ", "\n      "])), space(styleProps.spacing)(styleProps), getAlignmentAttributes(styleProps)), {
    else: css$1(_templateObject3$h || (_templateObject3$h = _taggedTemplateLiteralLoose(["\n          justify-content: space-between;\n\n          ", "\n        "])), styleProps.orientation === 'vertical' && css$1(_templateObject4$h || (_templateObject4$h = _taggedTemplateLiteralLoose(["\n            flex-direction: column;\n          "]))))
  })(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$U = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var flexProps = Flex.useProps(props);
  var className = useClassName({
    style: Level,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: flexProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, flexProps), {}, {
    className: className
  });
}, {
  defaultProps: {
    alignX: 'center',
    orientation: 'horizontal',
    spacing: 'major-2',
    verticalBelow: 'tablet'
  },
  themeKey: 'Level'
});
createComponent(function (props) {
  var textProps = useProps$U(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$U
  },
  themeKey: 'Level'
});

var _templateObject$l;
var Rover$2 = function Rover(styleProps) {
  return css(_templateObject$l || (_templateObject$l = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var RoverContext = react.createContext({
  rover: {}
});
function useRoverState(initialState) {
  return useRoverState$1(initialState);
}
function useRoverContext() {
  return react.useContext(RoverContext);
}
function RoverState(props) {
  props.children;
      var restProps = _objectWithoutPropertiesLoose$4(props, ["children"]);

  var rover = useRoverState(restProps);
  var contextValue = react.useMemo(function () {
    return {
      rover: rover
    };
  }, [rover]);
  return /*#__PURE__*/react.createElement(RoverContext.Provider, {
    value: contextValue
  }, isFunction$2(props.children) ? props.children(rover) : props.children);
}

var useProps$T = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var roverContext = react.useContext(RoverContext);
  props = _objectSpread2$3(_objectSpread2$3({}, props), roverContext.rover);

  var _props = props,
      baseId = _props.baseId,
      disabled = _props.disabled,
      focusable = _props.focusable,
      orientation = _props.orientation,
      stops = _props.stops,
      id = _props.id,
      currentId = _props.currentId,
      register = _props.register,
      unregister = _props.unregister,
      move = _props.move,
      next = _props.next,
      previous = _props.previous,
      first = _props.first,
      last = _props.last,
      stopId = _props.stopId,
      unstable_clickOnEnter = _props.unstable_clickOnEnter,
      unstable_clickOnSpace = _props.unstable_clickOnSpace,
      unstable_idCountRef = _props.unstable_idCountRef,
      unstable_moves = _props.unstable_moves,
      htmlProps = _objectWithoutPropertiesLoose$4(_props, ["baseId", "disabled", "focusable", "orientation", "stops", "id", "currentId", "register", "unregister", "move", "next", "previous", "first", "last", "stopId", "unstable_clickOnEnter", "unstable_clickOnSpace", "unstable_idCountRef", "unstable_moves"]);

  var roverProps = useRover({
    baseId: baseId,
    disabled: disabled,
    focusable: focusable,
    orientation: orientation,
    stops: stops,
    id: id,
    currentId: currentId,
    register: register,
    unregister: unregister,
    move: move,
    next: next,
    previous: previous,
    first: first,
    last: last,
    stopId: stopId,
    unstable_clickOnEnter: unstable_clickOnEnter,
    unstable_clickOnSpace: unstable_clickOnSpace,
    unstable_idCountRef: unstable_idCountRef,
    unstable_moves: unstable_moves
  }, htmlProps);
  htmlProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, props), roverProps));
  var className = useClassName({
    style: Rover$2,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: htmlProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, htmlProps), {}, {
    className: className
  });
}, {
  themeKey: 'Rover'
});
var Rover$1 = createComponent(function (props) {
  var roverProps = useProps$T(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: roverProps
  });
}, {
  attach: {
    useProps: useProps$T,
    displayName: 'Rover'
  },
  themeKey: 'Rover'
});

var Rover = Object.assign(Rover$1, {
  useContext: useRoverContext,
  useState: useRoverState,
  State: RoverState
});

var MenuContext = react.createContext({
  rover: {},
  overrides: {}
});
var useProps$S = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var baseId = props.baseId,
      children = props.children,
      overrides = props.overrides,
      restProps = _objectWithoutPropertiesLoose$4(props, ["baseId", "children", "overrides"]);

  var boxProps = Box.useProps(restProps);
  var rover = Rover.useState({
    baseId: baseId
  });
  var className = useClassName({
    style: Menu$2,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var contextValue = react.useMemo(function () {
    return {
      rover: rover,
      overrides: overrides
    };
  }, [rover, overrides]);
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    role: 'menu',
    children: /*#__PURE__*/react.createElement(MenuContext.Provider, {
      value: contextValue
    }, children)
  });
}, {
  themeKey: 'Menu'
});
var Menu$1 = createComponent(function (props) {
  var textProps = useProps$S(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$S,
    displayName: 'Menu'
  },
  themeKey: 'Menu'
});

var useProps$R = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var children = props.children,
      overrides = props.overrides,
      title = props.title,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children", "overrides", "title"]);

  var boxProps = Box.useProps(restProps);

  var _React$useContext = react.useContext(MenuContext),
      menuOverrides = _React$useContext.overrides;

  var className = useClassName({
    style: MenuGroup$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: _objectSpread2$3(_objectSpread2$3({}, menuOverrides), overrides)
    }),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var titleClassName = useClassName({
    style: MenuGroupTitle,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: _objectSpread2$3(_objectSpread2$3({}, menuOverrides), overrides)
    }),
    themeKey: themeKey,
    themeKeySuffix: 'Title',
    prevClassName: boxProps.className
  });
  var titleId = useUniqueId();
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    'aria-labelledby': titleId,
    role: 'group',
    className: className,
    children: /*#__PURE__*/react.createElement(react.Fragment, null, title && /*#__PURE__*/react.createElement(Box, {
      className: titleClassName,
      id: titleId
    }, title), children)
  });
}, {
  themeKey: 'Menu.Group'
});
var MenuGroup = createComponent(function (props) {
  var textProps = useProps$R(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$R,
    displayName: 'Menu.Group'
  },
  themeKey: 'Menu.Group'
});

var useProps$Q = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var children = props.children,
      defaultValue = props.defaultValue,
      onBlur = props.onBlur,
      onChange = props.onChange,
      type = props.type,
      value = props.value,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children", "defaultValue", "onBlur", "onChange", "type", "value"]);

  var _useOptionsState = useOptionsState({
    defaultValue: defaultValue,
    onBlur: onBlur,
    onChange: onChange,
    type: type,
    value: value
  }),
      getOptionItemProps = _useOptionsState.getOptionItemProps;

  var menuGroupProps = MenuGroup.useProps(_objectSpread2$3(_objectSpread2$3({}, restProps), {}, {
    children: react.Children.map(children, function (child) {
      var _child$props;

      if (!react.isValidElement(child)) return child;
      return react.cloneElement(child, _objectSpread2$3(_objectSpread2$3({}, child.props), getOptionItemProps({
        value: (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.value
      })));
    })
  }));
  var className = useClassName({
    style: MenuOptionGroup$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: menuGroupProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, menuGroupProps), {}, {
    className: className
  });
}, {
  themeKey: 'Menu.OptionGroup'
});
var MenuOptionGroup = createComponent(function (props) {
  var htmlProps = useProps$Q(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: htmlProps
  });
}, {
  attach: {
    useProps: useProps$Q,
    displayName: 'Menu.OptionGroup'
  },
  themeKey: 'Menu.OptionGroup'
});

var useProps$P = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var children = props.children,
      iconAfter = props.iconAfter,
      iconAfterProps = props.iconAfterProps,
      iconBefore = props.iconBefore,
      iconBeforeProps = props.iconBeforeProps,
      overrides = props.overrides,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children", "iconAfter", "iconAfterProps", "iconBefore", "iconBeforeProps", "overrides"]);

  var _React$useContext = react.useContext(MenuContext),
      rover = _React$useContext.rover,
      menuOverrides = _React$useContext.overrides;

  var boxProps = Box.useProps(restProps);
  var roverProps = Rover.useProps(_objectSpread2$3(_objectSpread2$3({}, rover), boxProps));
  var className = useClassName({
    style: MenuItem$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: _objectSpread2$3(_objectSpread2$3({}, menuOverrides), overrides)
    }),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var iconBeforeClassName = useClassName({
    style: MenuItemIcon,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: _objectSpread2$3(_objectSpread2$3({}, menuOverrides), overrides),
      isBefore: true
    }),
    themeKey: themeKey,
    themeKeySuffix: 'Icon'
  });
  var iconAfterClassName = useClassName({
    style: MenuItemIcon,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: _objectSpread2$3(_objectSpread2$3({}, menuOverrides), overrides),
      isAfter: true
    }),
    themeKey: themeKey,
    themeKeySuffix: 'Icon'
  });
  return _objectSpread2$3(_objectSpread2$3({}, roverProps), {}, {
    className: className,
    role: 'menuitem',
    children: /*#__PURE__*/react.createElement(react.Fragment, null, iconBefore && /*#__PURE__*/react.createElement(Icon, _extends$1({
      className: iconBeforeClassName,
      icon: iconBefore
    }, iconBeforeProps)), children, iconAfter && /*#__PURE__*/react.createElement(Icon, _extends$1({
      className: iconAfterClassName,
      icon: iconAfter
    }, iconAfterProps)))
  });
}, {
  themeKey: 'Menu.Item'
});
var MenuItem = createComponent(function (props) {
  var textProps = useProps$P(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$P,
    displayName: 'Menu.Item'
  },
  themeKey: 'Menu.Item'
});

var useProps$O = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var children = props.children,
      checked = props.checked,
      onChange = props.onChange,
      value = props.value,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children", "checked", "onChange", "value"]); //////////////////////////////////////////////////////


  var menuItemProps = MenuItem.useProps(restProps); //////////////////////////////////////////////////////

  var className = useClassName({
    style: MenuOptionItem$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: menuItemProps.className
  });
  var iconWrapperClassName = useClassName({
    style: MenuOptionItemIconWrapper,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'IconWrapper'
  }); //////////////////////////////////////////////////////

  return _objectSpread2$3(_objectSpread2$3({}, menuItemProps), {}, {
    'aria-checked': checked,
    className: className,
    onClick: function onClick() {
      return onChange && onChange({
        checked: !checked,
        value: value
      });
    },
    children: /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Box, {
      className: iconWrapperClassName,
      overrides: props.overrides
    }, checked && /*#__PURE__*/react.createElement(Icon, {
      icon: {
        viewBoxWidth: 16,
        viewBoxHeight: 16,
        paths: ['M14 3c-.28 0-.53.11-.71.29L6 10.59l-3.29-3.3a1.003 1.003 0 00-1.42 1.42l4 4c.18.18.43.29.71.29s.53-.11.71-.29l8-8A1.003 1.003 0 0014 3z']
      },
      overrides: props.overrides
    })), children)
  });
}, {
  themeKey: 'Menu.OptionItem'
});
var MenuOptionItem = createComponent(function (props) {
  var htmlProps = useProps$O(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: htmlProps
  });
}, {
  attach: {
    useProps: useProps$O,
    displayName: 'Menu.OptionItem'
  },
  themeKey: 'Menu.OptionItem'
});

var useProps$N = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var orientation = props.orientation,
      overrides = props.overrides,
      restProps = _objectWithoutPropertiesLoose$4(props, ["orientation", "overrides"]);

  var _React$useContext = react.useContext(MenuContext),
      menuOverrides = _React$useContext.overrides;

  var MenuDividerProps = useMenuSeparator({
    orientation: orientation
  }, restProps);
  var dividerProps = Divider.useProps(_objectSpread2$3(_objectSpread2$3({}, restProps), MenuDividerProps));
  var className = useClassName({
    style: MenuDivider$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: _objectSpread2$3(_objectSpread2$3({}, menuOverrides), {}, {
        overrides: overrides
      })
    }),
    themeKey: themeKey,
    prevClassName: dividerProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, dividerProps), {}, {
    role: 'separator',
    className: className
  });
}, {
  themeKey: 'Menu.Divider'
});
var MenuDivider = createComponent(function (props) {
  var textProps = useProps$N(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$N,
    displayName: 'Menu.Divider'
  },
  themeKey: 'Menu.Divider'
});

var Menu = Object.assign(Menu$1, {
  OptionGroup: MenuOptionGroup,
  OptionItem: MenuOptionItem,
  Divider: MenuDivider,
  Item: MenuItem,
  Group: MenuGroup
});

var _templateObject$k, _templateObject2$g, _templateObject3$g, _templateObject4$g, _templateObject5$f, _templateObject6$e, _templateObject7$d, _templateObject8$d;
var OptionButtons$1 = function OptionButtons(styleProps) {
  return css(_templateObject$k || (_templateObject$k = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var OptionButton$1 = function OptionButton(styleProps) {
  return css(_templateObject2$g || (_templateObject2$g = _taggedTemplateLiteralLoose(["\n  ", ";\n\n  ", "\n\n  & {\n    ", ";\n  }\n"])), styleProps.isFullWidth && css$1(_templateObject3$g || (_templateObject3$g = _taggedTemplateLiteralLoose(["\n      flex: 1;\n    "]))), styleProps.checked && css$1(_templateObject4$g || (_templateObject4$g = _taggedTemplateLiteralLoose(["\n      border: 1px solid transparent;\n    "]))), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var OptionButtonsWrapper = function OptionButtonsWrapper(styleProps) {
  return css(_templateObject5$f || (_templateObject5$f = _taggedTemplateLiteralLoose(["\n  ", ";\n\n  ", "\n\n  & {\n    ", ";\n  }\n"])), !styleProps.isFullWidth && css$1(_templateObject6$e || (_templateObject6$e = _taggedTemplateLiteralLoose(["\n      width: fit-content;\n    "]))), styleProps.state && css$1(_templateObject7$d || (_templateObject7$d = _taggedTemplateLiteralLoose(["\n      box-shadow: ", " 0px 0px 0px\n        3px;\n\n      & > *[aria-checked='false'] {\n        border-color: ", ";\n      }\n    "])), palette(styleProps.state + "Tint", {
    dark: styleProps.state + "Shade"
  })(styleProps), palette("" + styleProps.state)(styleProps)), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var OptionButtonsField = function OptionButtonsField(styleProps) {
  return css(_templateObject8$d || (_templateObject8$d = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$M = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var checked = props.checked,
      onChange = props.onChange,
      readOnly = props.readOnly,
      value = props.value,
      restProps = _objectWithoutPropertiesLoose$4(props, ["checked", "onChange", "readOnly", "value"]);

  var buttonProps = Button.useProps(_objectSpread2$3(_objectSpread2$3({}, restProps), {}, {
    isStatic: readOnly,
    variant: !checked ? 'outlined' : undefined
  }));
  var className = useClassName({
    style: OptionButton$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: buttonProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, buttonProps), {}, {
    'aria-checked': checked,
    className: className,
    onClick: function onClick() {
      return !readOnly && onChange && onChange({
        checked: !checked,
        value: value
      });
    }
  });
}, {
  defaultProps: {
    palette: 'primary'
  },
  themeKey: 'OptionButtons.Button'
});
var OptionButton = createComponent(function (props) {
  var htmlProps = useProps$M(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: htmlProps
  });
}, {
  attach: {
    useProps: useProps$M,
    displayName: 'OptionButtons.Button'
  },
  themeKey: 'OptionButtons.Button'
});

var useProps$L = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var borderRadius = props.borderRadius;
      props.children;
      var defaultValue = props.defaultValue,
      disabled = props.disabled,
      isFullWidth = props.isFullWidth,
      readOnly = props.readOnly,
      onBlur = props.onBlur,
      onChange = props.onChange,
      options = props.options,
      orientation = props.orientation,
      overrides = props.overrides,
      palette = props.palette,
      size = props.size,
      type = props.type,
      value = props.value,
      verticalBelow = props.verticalBelow,
      restProps = _objectWithoutPropertiesLoose$4(props, ["borderRadius", "children", "defaultValue", "disabled", "isFullWidth", "readOnly", "onBlur", "onChange", "options", "orientation", "overrides", "palette", "size", "type", "value", "verticalBelow"]);

  var boxProps = Box.useProps(restProps);
  var className = useClassName({
    style: OptionButtons$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var wrapperClassName = useClassName({
    style: OptionButtonsWrapper,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Wrapper'
  });

  var _useOptionsState = useOptionsState({
    defaultValue: defaultValue,
    onBlur: onBlur,
    onChange: onChange,
    type: type,
    value: value
  }),
      getOptionItemProps = _useOptionsState.getOptionItemProps;

  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    'aria-disabled': disabled,
    className: className,
    children: /*#__PURE__*/react.createElement(Rover.State, null, /*#__PURE__*/react.createElement(Group, {
      className: wrapperClassName,
      borderRadius: borderRadius,
      orientation: orientation,
      verticalBelow: verticalBelow
    }, options.map(function (_ref2, index) {
      var label = _ref2.label,
          option = _objectWithoutPropertiesLoose$4(_ref2, ["label"]);

      return /*#__PURE__*/react.createElement(Rover, {
        key: index
      }, function (roverProps) {
        return /*#__PURE__*/react.createElement(OptionButton, _extends$1({}, roverProps, getOptionItemProps({
          readOnly: readOnly,
          value: option.value
        }), {
          disabled: disabled // @ts-ignore
          ,
          isFullWidth: isFullWidth,
          overrides: overrides,
          palette: palette,
          readOnly: readOnly,
          size: size
        }, option), label);
      });
    })))
  });
}, {
  themeKey: 'OptionButtons'
});
var OptionButtons = createComponent(function (props) {
  var htmlProps = useProps$L(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: htmlProps
  });
}, {
  attach: {
    useProps: useProps$L,
    displayName: 'OptionButtons'
  },
  themeKey: 'OptionButtons'
}); //////////////////////////////////////////////////////////////////

var useOptionButtonsFieldProps = createHook(function (props, _ref3) {
  var themeKey = _ref3.themeKey;

  var borderRadius = props.borderRadius,
      defaultValue = props.defaultValue,
      description = props.description,
      disabled = props.disabled,
      hint = props.hint,
      isFullWidth = props.isFullWidth,
      isOptional = props.isOptional,
      isRequired = props.isRequired,
      label = props.label,
      options = props.options,
      orientation = props.orientation,
      onBlur = props.onBlur,
      onChange = props.onChange,
      overrides = props.overrides,
      palette = props.palette,
      optionButtonsProps = props.optionButtonsProps,
      readOnly = props.readOnly,
      size = props.size,
      state = props.state,
      tooltip = props.tooltip,
      tooltipTriggerComponent = props.tooltipTriggerComponent,
      type = props.type,
      value = props.value,
      validationText = props.validationText,
      verticalBelow = props.verticalBelow,
      restProps = _objectWithoutPropertiesLoose$4(props, ["borderRadius", "defaultValue", "description", "disabled", "hint", "isFullWidth", "isOptional", "isRequired", "label", "options", "orientation", "onBlur", "onChange", "overrides", "palette", "optionButtonsProps", "readOnly", "size", "state", "tooltip", "tooltipTriggerComponent", "type", "value", "validationText", "verticalBelow"]);

  var boxProps = Box.useProps(restProps);
  var className = useClassName({
    style: OptionButtonsField,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(FieldWrapper, {
      description: description,
      hint: hint,
      isOptional: isOptional,
      isRequired: isRequired,
      label: label,
      labelType: "legend",
      overrides: overrides,
      state: state,
      tooltip: tooltip,
      tooltipTriggerComponent: tooltipTriggerComponent,
      validationText: validationText
    }, function (_ref4) {
      var elementProps = _ref4.elementProps;
      return /*#__PURE__*/react.createElement(OptionButtons, _extends$1({
        borderRadius: borderRadius,
        defaultValue: defaultValue,
        disabled: disabled,
        isFullWidth: isFullWidth,
        onBlur: onBlur,
        onChange: onChange,
        options: options,
        orientation: orientation,
        palette: palette,
        readOnly: readOnly,
        size: size,
        state: state,
        type: type,
        value: value,
        verticalBelow: verticalBelow,
        overrides: overrides
      }, elementProps, optionButtonsProps));
    })
  });
}, {
  themeKey: 'OptionButtonsField'
});
createComponent(function (props) {
  var htmlProps = useOptionButtonsFieldProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: htmlProps
  });
}, {
  attach: {
    useProps: useProps$L,
    displayName: 'OptionButtonsField'
  },
  defaultProps: {
    use: 'fieldset'
  },
  themeKey: 'OptionButtonsField'
});

var _templateObject$j, _templateObject2$f, _templateObject3$f, _templateObject4$f, _templateObject5$e, _templateObject6$d, _templateObject7$c, _templateObject8$c, _templateObject9$9, _templateObject10$8, _templateObject11$8, _templateObject12$7, _templateObject13$5, _templateObject14$4, _templateObject15$4, _templateObject16$4, _templateObject17$4, _templateObject18$4, _templateObject19$3, _templateObject20$3, _templateObject21$3, _templateObject22$2, _templateObject23$2, _templateObject24$2, _templateObject25$2, _templateObject26$2, _templateObject27$2, _templateObject28$1, _templateObject29$1, _templateObject30$1;
var PageContent = function PageContent(styleProps) {
  return css(_templateObject$j || (_templateObject$j = _taggedTemplateLiteralLoose(["\n  padding: ", "rem ", "rem;\n\n  ", "\n\n  ", "\n\n  & {\n    ", ";\n  }\n"])), space(4, 'major')(styleProps), space(2, 'major')(styleProps), styleProps.isFluid && css$1(_templateObject2$f || (_templateObject2$f = _taggedTemplateLiteralLoose(["\n      padding: ", "rem ", "rem;\n\n      & {\n        ", ";\n      }\n    "])), space(4, 'major')(styleProps), theme('Container.fluidMargin')(styleProps), theme(styleProps.themeKey, "styles.fluid")(styleProps)), breakpoint('max-tablet', css$1(_templateObject3$f || (_templateObject3$f = _taggedTemplateLiteralLoose(["\n      padding-top: ", "rem;\n      padding-bottom: ", "rem;\n\n      & {\n        ", ";\n      }\n    "])), space(2, 'major')(styleProps), space(2, 'major')(styleProps), theme(styleProps.themeKey, "styles.mobile")(styleProps)))(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PageContentWrapper$1 = function PageContentWrapper(styleProps) {
  return css(_templateObject4$f || (_templateObject4$f = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PageWithSidebar$1 = function PageWithSidebar(styleProps) {
  return css(_templateObject5$e || (_templateObject5$e = _taggedTemplateLiteralLoose(["\n  min-height: 100vh;\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PageWithSidebarContent = function PageWithSidebarContent(styleProps) {
  return css(_templateObject6$d || (_templateObject6$d = _taggedTemplateLiteralLoose(["\n  width: 100%;\n\n  ", "\n  ", "\n\n  & {\n    ", ";\n  }\n"])), styleProps.sidebarPlacement === 'left' && css$1(_templateObject7$c || (_templateObject7$c = _taggedTemplateLiteralLoose(["\n      padding-left: ", ";\n\n      ", "\n\n      ", "\n    "])), getWidth(styleProps), breakpoint("max-" + styleProps.collapseBelow, css$1(_templateObject8$c || (_templateObject8$c = _taggedTemplateLiteralLoose(["\n          padding-left: 0px;\n        "]))))(styleProps), !styleProps.isSidebarOpen && css$1(_templateObject9$9 || (_templateObject9$9 = _taggedTemplateLiteralLoose(["\n        padding-left: 0px;\n      "])))), styleProps.sidebarPlacement === 'right' && css$1(_templateObject10$8 || (_templateObject10$8 = _taggedTemplateLiteralLoose(["\n      padding-right: ", ";\n\n      ", "\n\n      ", "\n    "])), getWidth(styleProps), breakpoint("max-" + styleProps.collapseBelow, css$1(_templateObject11$8 || (_templateObject11$8 = _taggedTemplateLiteralLoose(["\n          padding-right: 0px;\n        "]))))(styleProps), !styleProps.isSidebarOpen && css$1(_templateObject12$7 || (_templateObject12$7 = _taggedTemplateLiteralLoose(["\n        padding-right: 0px;\n      "])))), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PageWithSidebarSidebar = function PageWithSidebarSidebar(styleProps) {
  return css(_templateObject13$5 || (_templateObject13$5 = _taggedTemplateLiteralLoose(["\n  background-color: ", ";\n  height: 100vh;\n  min-width: ", ";\n  width: ", ";\n  transform: translateX(0px);\n\n  ", "\n\n  ", "\n\n  ", "\n\n  & {\n    ", ";\n  }\n"])), palette('background')(styleProps), getWidth(styleProps), getWidth(styleProps), styleProps.sidebarPlacement === 'left' && css$1(_templateObject14$4 || (_templateObject14$4 = _taggedTemplateLiteralLoose(["\n      border-right: 1px solid ", ";\n    "])), palette('white800', {
    dark: 'gray700'
  })(styleProps)), styleProps.sidebarPlacement === 'right' && css$1(_templateObject15$4 || (_templateObject15$4 = _taggedTemplateLiteralLoose(["\n      border-left: 1px solid ", ";\n    "])), palette('white800', {
    dark: 'gray700'
  })(styleProps)), styleProps.isSidebarMinimized && css$1(_templateObject16$4 || (_templateObject16$4 = _taggedTemplateLiteralLoose(["\n      overflow: visible;\n    "]))), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PageWithSidebarSidebarExpandedWrapper = function PageWithSidebarSidebarExpandedWrapper(styleProps) {
  return css(_templateObject17$4 || (_templateObject17$4 = _taggedTemplateLiteralLoose(["\n  position: fixed;\n  z-index: 999999;\n  overflow-y: scroll;\n\n  ", ";\n\n  ", "\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), getHiddenScrollbarStyles(), styleProps.sidebarPlacement === 'right' && css$1(_templateObject18$4 || (_templateObject18$4 = _taggedTemplateLiteralLoose(["\n      right: 0;\n    "]))), breakpoint("max-" + styleProps.collapseBelow, css$1(_templateObject19$3 || (_templateObject19$3 = _taggedTemplateLiteralLoose(["\n      display: none;\n    "]))))(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PageWithSidebarSidebarCollapsedWrapper = function PageWithSidebarSidebarCollapsedWrapper(styleProps) {
  return css(_templateObject20$3 || (_templateObject20$3 = _taggedTemplateLiteralLoose(["\n  &&& {\n    min-width: ", ";\n    overflow-y: scroll;\n\n    ", ";\n  }\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), styleProps.collapsedSidebarWidth, getHiddenScrollbarStyles(), breakpoint("max-" + styleProps.collapseBelow, css$1(_templateObject21$3 || (_templateObject21$3 = _taggedTemplateLiteralLoose([""]))), {
    else: css$1(_templateObject22$2 || (_templateObject22$2 = _taggedTemplateLiteralLoose(["\n      display: none;\n    "])))
  })(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PageWithSidebarDisclosure$1 = function PageWithSidebarDisclosure(styleProps) {
  return css(_templateObject23$2 || (_templateObject23$2 = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PageWithSidebarMinimize$1 = function PageWithSidebarMinimize(styleProps) {
  return css(_templateObject24$2 || (_templateObject24$2 = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PageWithHeader$1 = function PageWithHeader(styleProps) {
  return css(_templateObject25$2 || (_templateObject25$2 = _taggedTemplateLiteralLoose(["\n  min-height: 100vh;\n  position: relative;\n\n  & .bb-PageWithSidebarSidebarExpandedWrapper {\n    top: ", ";\n  }\n\n  & .bb-PageWithSidebarSidebar {\n    height: calc(100vh - ", ");\n  }\n\n  & {\n    ", ";\n  }\n"])), styleProps.headerHeight, styleProps.headerHeight, theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PageWithHeaderHeader = function PageWithHeaderHeader(styleProps) {
  return css(_templateObject26$2 || (_templateObject26$2 = _taggedTemplateLiteralLoose(["\n  background-color: ", ";\n  min-height: ", ";\n  height: ", ";\n  border-bottom: 1px solid ", ";\n  z-index: 999;\n\n  & > * {\n    height: 100%;\n  }\n\n  ", "\n\n  & {\n    ", ";\n  }\n"])), palette('background')(styleProps), styleProps.headerHeight, styleProps.headerHeight, palette('white800', {
    dark: 'gray700'
  })(styleProps), styleProps.sticky && css$1(_templateObject27$2 || (_templateObject27$2 = _taggedTemplateLiteralLoose(["\n      position: fixed;\n      width: 100%;\n    "]))), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PageWithHeaderContent = function PageWithHeaderContent(styleProps) {
  return css(_templateObject28$1 || (_templateObject28$1 = _taggedTemplateLiteralLoose(["\n  ", "\n\n  & {\n    ", ";\n  }\n"])), styleProps.sticky && css$1(_templateObject29$1 || (_templateObject29$1 = _taggedTemplateLiteralLoose(["\n      padding-top: ", ";\n    "])), styleProps.isHeaderOpen ? styleProps.headerHeight : 'unset'), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PageWithHeaderDisclosure$1 = function PageWithHeaderDisclosure(styleProps) {
  return css(_templateObject30$1 || (_templateObject30$1 = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};

function getWidth(styleProps) {
  if (styleProps.isSidebarMinimized) {
    return styleProps.minimizedSidebarWidth;
  }

  if (styleProps.isCollapsed) {
    return styleProps.collapsedSidebarWidth;
  }

  return styleProps.sidebarWidth;
}

var PageContext = react.createContext({
  collapseBelow: 'desktop',
  isCollapsed: false,
  sidebar: {
    isOpen: true,
    open: function open() {
      return undefined;
    },
    close: function close() {
      return undefined;
    },
    toggle: function toggle() {
      return undefined;
    },
    isMinimized: false,
    minimize: function minimize() {
      return undefined;
    },
    maximize: function maximize() {
      return undefined;
    },
    toggleMinimize: function toggleMinimize() {
      return undefined;
    },
    drawer: {},
    disclosure: {}
  },
  header: {
    isOpen: true,
    open: function open() {
      return undefined;
    },
    close: function close() {
      return undefined;
    },
    toggle: function toggle() {
      return undefined;
    },
    disclosure: {}
  }
});
function PageProvider(props) {
  var children = props.children,
      _props$collapseBelow = props.collapseBelow,
      collapseBelow = _props$collapseBelow === void 0 ? 'desktop' : _props$collapseBelow;
  var isCollapsed = useBreakpoint("max-" + collapseBelow);

  var _React$useState = react.useState(false),
      isSidebarMinimized = _React$useState[0],
      setIsSidebarMinimized = _React$useState[1];

  var sidebarDrawer = Drawer.useState({
    animated: true
  });
  var sidebarDisclosure = Disclosure.useState({
    visible: true
  });
  var sidebarState = isCollapsed ? sidebarDrawer : sidebarDisclosure;
  var headerDisclosure = Disclosure.useState({
    visible: true
  });
  var value = react.useMemo(function () {
    return {
      collapseBelow: collapseBelow,
      isCollapsed: isCollapsed,
      sidebar: {
        isOpen: sidebarState.visible,
        open: sidebarState.show,
        close: sidebarState.hide,
        toggle: sidebarState.toggle,
        isMinimized: isSidebarMinimized,
        minimize: function minimize() {
          return setIsSidebarMinimized(true);
        },
        maximize: function maximize() {
          return setIsSidebarMinimized(false);
        },
        toggleMinimize: function toggleMinimize() {
          return setIsSidebarMinimized(function (isMinimized) {
            return !isMinimized;
          });
        },
        drawer: sidebarDrawer,
        disclosure: sidebarDisclosure
      },
      header: {
        isOpen: headerDisclosure.visible,
        open: headerDisclosure.show,
        close: headerDisclosure.hide,
        toggle: headerDisclosure.toggle,
        disclosure: headerDisclosure
      }
    };
  }, [collapseBelow, headerDisclosure, isCollapsed, isSidebarMinimized, sidebarDisclosure, sidebarDrawer, sidebarState.hide, sidebarState.show, sidebarState.toggle, sidebarState.visible]);
  react.useEffect(function () {
    if (isCollapsed) {
      setIsSidebarMinimized(false);
    }
  }, [isCollapsed]);
  return /*#__PURE__*/react.createElement(PageContext.Provider, {
    value: value
  }, children);
}

var useProps$K = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var children = props.children,
      collapsedSidebarProps = props.collapsedSidebarProps,
      defaultIsVisible = props.defaultIsVisible,
      expandedSidebarProps = props.expandedSidebarProps,
      overrides = props.overrides,
      sidebar = props.sidebar,
      sidebarPlacement = props.sidebarPlacement,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children", "collapsedSidebarProps", "defaultIsVisible", "expandedSidebarProps", "overrides", "sidebar", "sidebarPlacement"]);

  var boxProps = Box.useProps(_objectSpread2$3({}, restProps));

  var _React$useContext = react.useContext(PageContext),
      collapseBelow = _React$useContext.collapseBelow,
      isCollapsed = _React$useContext.isCollapsed,
      sidebarState = _React$useContext.sidebar;

  var className = useClassName({
    style: PageWithSidebar$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var sidebarClassName = useClassName({
    style: PageWithSidebarSidebar,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      collapseBelow: collapseBelow,
      isCollapsed: isCollapsed,
      isSidebarMinimized: sidebarState.isMinimized
    }),
    themeKey: themeKey,
    themeKeySuffix: 'Sidebar'
  });
  var sidebarExpandedWrapperClassName = useClassName({
    style: PageWithSidebarSidebarExpandedWrapper,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      collapseBelow: collapseBelow
    }),
    themeKey: themeKey,
    themeKeySuffix: 'SidebarExpandedWrapper'
  });
  var sidebarCollapsedWrapperClassName = useClassName({
    style: PageWithSidebarSidebarCollapsedWrapper,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      collapseBelow: collapseBelow
    }),
    themeKey: themeKey,
    themeKeySuffix: 'SidebarCollapsedWrapper'
  });
  var contentClassName = useClassName({
    style: PageWithSidebarContent,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      collapseBelow: collapseBelow,
      isCollapsed: isCollapsed,
      isSidebarMinimized: sidebarState.isMinimized,
      isSidebarOpen: sidebarState.isOpen
    }),
    themeKey: themeKey,
    themeKeySuffix: 'Content'
  }); //////////////////////////////////////////

  react.useEffect(function () {
    if (!defaultIsVisible) {
      sidebarState.disclosure.hide();
    }
  }, [defaultIsVisible, sidebarState.disclosure]); //////////////////////////////////////////

  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Box, null, /*#__PURE__*/react.createElement(Drawer, _extends$1({
      className: sidebarCollapsedWrapperClassName,
      overrides: overrides,
      slide: true,
      fade: true,
      placement: sidebarPlacement
    }, collapsedSidebarProps, sidebarState.drawer, {
      animating: false
    }), /*#__PURE__*/react.createElement(Box, {
      className: sidebarClassName,
      overrides: overrides
    }, isCollapsed ? sidebar : null))), /*#__PURE__*/react.createElement(Disclosure.Content, _extends$1({
      overrides: overrides
    }, expandedSidebarProps, sidebarState.disclosure), /*#__PURE__*/react.createElement(Box, {
      className: sidebarExpandedWrapperClassName,
      overrides: overrides
    }, /*#__PURE__*/react.createElement(Box, {
      className: sidebarClassName,
      overrides: overrides
    }, !isCollapsed ? sidebar : null))), /*#__PURE__*/react.createElement(Box, {
      className: contentClassName,
      overrides: overrides
    }, children))
  });
}, {
  defaultProps: {
    collapsedSidebarProps: {},
    expandedSidebarProps: {},
    defaultIsVisible: true,
    minimizedSidebarWidth: '60px',
    sidebarWidth: '250px',
    sidebarPlacement: 'left',
    collapsedSidebarWidth: '320px'
  },
  themeKey: 'PageWithSidebar'
});
var PageWithSidebar = createComponent(function (props) {
  var pageWithSidebarProps = useProps$K(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: pageWithSidebarProps
  });
}, {
  attach: {
    useProps: useProps$K,
    displayName: 'PageWithSidebar'
  },
  themeKey: 'PageWithSidebar'
});

function usePage() {
  var context = react.useContext(PageContext);
  return _objectSpread2$3({}, context);
}

var useProps$J = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var page = usePage();
  var htmlProps = Disclosure.useProps(_objectSpread2$3(_objectSpread2$3({}, props), page.isCollapsed ? page.sidebar.drawer : page.sidebar.disclosure));
  var className = useClassName({
    style: PageWithSidebarDisclosure$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: htmlProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, htmlProps), {}, {
    className: className
  });
}, {
  themeKey: 'PageWithSidebar.Disclosure'
});
var PageWithSidebarDisclosure = createComponent(function (props) {
  var PageWithSidebarDisclosureProps = useProps$J(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: PageWithSidebarDisclosureProps
  });
}, {
  attach: {
    useProps: useProps$J,
    displayName: 'PageWithSidebar.Disclosure'
  },
  defaultProps: {
    use: 'button'
  },
  themeKey: 'PageWithSidebar.Disclosure'
});

var useProps$I = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var page = usePage();
  var htmlProps = Box.useProps(props);
  var className = useClassName({
    style: PageWithSidebarMinimize$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: htmlProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, htmlProps), {}, {
    className: className,
    onClick: page.sidebar.toggleMinimize
  });
}, {
  themeKey: 'PageWithSidebar.Minimize'
});
var PageWithSidebarMinimize = createComponent(function (props) {
  var PageWithSidebarMinimizeProps = useProps$I(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: PageWithSidebarMinimizeProps
  });
}, {
  attach: {
    useProps: useProps$I,
    displayName: 'PageWithSidebar.Minimize'
  },
  defaultProps: {
    use: 'button'
  },
  themeKey: 'PageWithSidebar.Minimize'
});

var useProps$H = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var children = props.children,
      defaultIsVisible = props.defaultIsVisible,
      header = props.header,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children", "defaultIsVisible", "header"]);

  var boxProps = Box.useProps(restProps);

  var _React$useContext = react.useContext(PageContext),
      headerState = _React$useContext.header;

  var className = useClassName({
    style: PageWithHeader$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var headerClassName = useClassName({
    style: PageWithHeaderHeader,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Header'
  });
  var contentClassName = useClassName({
    style: PageWithHeaderContent,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      isHeaderOpen: headerState.isOpen
    }),
    themeKey: themeKey,
    themeKeySuffix: 'Content'
  });
  react.useEffect(function () {
    if (!defaultIsVisible) {
      headerState.disclosure.hide();
    }
  }, [defaultIsVisible, headerState.disclosure]);
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Disclosure.Content, _extends$1({
      className: headerClassName
    }, headerState.disclosure), header), /*#__PURE__*/react.createElement(Box, {
      className: contentClassName
    }, children))
  });
}, {
  defaultProps: {
    defaultIsVisible: true,
    headerHeight: '60px'
  },
  themeKey: 'PageWithHeader'
});
var PageWithHeader = createComponent(function (props) {
  var textProps = useProps$H(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$H,
    displayName: 'PageWithHeader'
  },
  themeKey: 'PageWithHeader'
});

var useProps$G = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var page = usePage();
  var htmlProps = Disclosure.useProps(_objectSpread2$3(_objectSpread2$3({}, props), page.header.disclosure));
  var className = useClassName({
    style: PageWithHeaderDisclosure$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: htmlProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, htmlProps), {}, {
    className: className
  });
}, {
  themeKey: 'PageWithHeader.Disclosure'
});
var PageWithHeaderDisclosure = createComponent(function (props) {
  var PageWithHeaderDisclosureProps = useProps$G(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: PageWithHeaderDisclosureProps
  });
}, {
  attach: {
    useProps: useProps$G,
    displayName: 'PageWithHeader.Disclosure'
  },
  defaultProps: {
    use: 'button'
  },
  themeKey: 'PageWithHeader.Disclosure'
});

var useProps$F = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: PageContentWrapper$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'PageContent.Wrapper'
});
var PageContentWrapper = createComponent(function (props) {
  var pageContentWrapperProps = useProps$F(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: pageContentWrapperProps
  });
}, {
  attach: {
    useProps: useProps$F,
    displayName: 'PageContent.Wrapper'
  },
  themeKey: 'PageContent.Wrapper'
});

var useProps$E = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var overrides = props.overrides,
      wrapperProps = props.wrapperProps,
      restProps = _objectWithoutPropertiesLoose$4(props, ["overrides", "wrapperProps"]);

  var containerProps = Container.useProps(_objectSpread2$3(_objectSpread2$3({}, restProps), {}, {
    wrapElement: function wrapElement(element) {
      return /*#__PURE__*/react.createElement(PageContentWrapper, _extends$1({
        overrides: overrides
      }, wrapperProps), element);
    }
  }));
  var className = useClassName({
    style: PageContent,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: containerProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, containerProps), {}, {
    className: className
  });
}, {
  defaultProps: {
    breakpoint: 'tablet',
    isLayout: true
  },
  themeKey: 'PageContent'
});
createComponent(function (props) {
  var pageContentProps = useProps$E(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: pageContentProps
  });
}, {
  attach: {
    useProps: useProps$E,
    displayName: 'PageContent'
  },
  themeKey: 'PageContent'
});

Object.assign(PageWithSidebar, {
  Disclosure: PageWithSidebarDisclosure,
  Minimize: PageWithSidebarMinimize
});
Object.assign(PageWithHeader, {
  Disclosure: PageWithHeaderDisclosure
});

var _templateObject$i, _templateObject2$e, _templateObject3$e, _templateObject4$e;
var Pagination = function Pagination(styleProps) {
  return css(_templateObject$i || (_templateObject$i = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PaginationButton = function PaginationButton(styleProps) {
  return css(_templateObject2$e || (_templateObject2$e = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PaginationSelect = function PaginationSelect(styleProps) {
  return css(_templateObject3$e || (_templateObject3$e = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var PaginationPrepositionText = function PaginationPrepositionText(styleProps) {
  return css(_templateObject4$e || (_templateObject4$e = _taggedTemplateLiteralLoose(["\n  font-weight: ", ";\n\n  & {\n    ", ";\n  }\n"])), fontWeight('semibold')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

var _baseTimes = baseTimes;

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

var identity_1 = identity;

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */
function castFunction(value) {
  return typeof value == 'function' ? value : identity_1;
}

var _castFunction = castFunction;

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol_1(value)) {
    return NAN;
  }
  if (isObject_1(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject_1(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

var toNumber_1 = toNumber;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber_1(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

var toFinite_1 = toFinite;

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite_1(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

var toInteger_1 = toInteger;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH = 4294967295;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min;

/**
 * Invokes the iteratee `n` times, returning an array of the results of
 * each invocation. The iteratee is invoked with one argument; (index).
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 * @example
 *
 * _.times(3, String);
 * // => ['0', '1', '2']
 *
 *  _.times(4, _.constant(0));
 * // => [0, 0, 0, 0]
 */
function times(n, iteratee) {
  n = toInteger_1(n);
  if (n < 1 || n > MAX_SAFE_INTEGER) {
    return [];
  }
  var index = MAX_ARRAY_LENGTH,
      length = nativeMin(n, MAX_ARRAY_LENGTH);

  iteratee = _castFunction(iteratee);
  n -= MAX_ARRAY_LENGTH;

  var result = _baseTimes(length, iteratee);
  while (++index < n) {
    iteratee(index);
  }
  return result;
}

var times_1 = times;

var _templateObject$h, _templateObject2$d, _templateObject3$d, _templateObject4$d, _templateObject5$d, _templateObject6$c, _templateObject7$b, _templateObject8$b, _templateObject9$8, _templateObject10$7, _templateObject11$7, _templateObject12$6, _templateObject13$4, _templateObject14$3, _templateObject15$3, _templateObject16$3, _templateObject17$3, _templateObject18$3, _templateObject19$2, _templateObject20$2, _templateObject21$2, _templateObject22$1, _templateObject23$1, _templateObject24$1, _templateObject25$1, _templateObject26$1, _templateObject27$1;
var Select$2 = function Select(styleProps) {
  return css(_templateObject$h || (_templateObject$h = _taggedTemplateLiteralLoose(["\n  appearance: none;\n  color: ", ";\n  height: 2.75em;\n  line-height: ", ";\n  transition: box-shadow 0.1s ease-in-out 0s, border-color 0.1s, background-color 0.1s;\n  position: relative;\n  width: 100%;\n\n  ", ";\n\n  &[disabled],\n  &[aria-disabled=\"true\"] {\n    background: ", ";\n    box-shadow: unset;\n\n    & {\n      ", ";\n    }\n  }\n\n  &[disabled] + .bb-Icon {\n    color: ", ";\n    fill: ", ";\n  }\n\n  &:focus {\n    outline: unset;\n    z-index: 2;\n    position: unset;\n  }\n\n  ", "\n\n  & {\n    ", ";\n  }\n"])), palette(styleProps.color)(styleProps), lineHeight('default')(styleProps), getVariantStyles(styleProps), palette('white700', {
    dark: 'black200'
  })(styleProps), theme(styleProps.themeKey, "styles.disabled")(styleProps), palette('gray400')(styleProps), palette('gray400')(styleProps), !styleProps.isPlaceholderSelected && css$1(_templateObject2$d || (_templateObject2$d = _taggedTemplateLiteralLoose(["\n      position: unset;\n    "]))), theme(styleProps.themeKey, "styles.base")(styleProps));
};

function getVariantStyles(styleProps) {
  if (styleProps.variant === 'bordered') {
    return css$1(_templateObject3$d || (_templateObject3$d = _taggedTemplateLiteralLoose(["\n      border: 1px solid\n        ", ";\n      border-radius: ", ";\n      padding: 0.4em ", " 0.4em 0.8em;\n\n      &&:focus,\n      &[aria-expanded='true'] {\n        border-color: ", ";\n        box-shadow: ", "\n          0px 0px 0px 3px !important;\n      }\n\n      ", "\n\n      & {\n        ", ";\n      }\n    "])), palette(styleProps.palette || 'white900', {
      dark: styleProps.palette || 'gray700'
    })(styleProps), borderRadius('default')(styleProps), styleProps.hasIcon ? '2em' : '0.8em', palette(styleProps.palette || 'primary')(styleProps), palette((styleProps.palette || 'primary') + "Tint", {
      dark: (styleProps.palette || 'primary') + "Shade"
    })(styleProps), styleProps.state && css$1(_templateObject4$d || (_templateObject4$d = _taggedTemplateLiteralLoose(["\n        & {\n          border-color: ", ";\n          box-shadow: ", "\n            0px 0px 0px 3px !important;\n        }\n      "])), palette("" + styleProps.state)(styleProps), palette(styleProps.state + "Tint", {
      dark: styleProps.state + "Shade"
    })(styleProps)), theme(styleProps.themeKey, "variants.bordered.styles.base")(styleProps));
  }

  if (styleProps.variant === 'borderless') {
    return css$1(_templateObject5$d || (_templateObject5$d = _taggedTemplateLiteralLoose(["\n      border-top-left-radius: ", ";\n      border-top-right-radius: ", ";\n      border-bottom: 1px solid transparent;\n\n      ", "\n\n      &:focus,\n      &[aria-expanded='true'] {\n        border-bottom-color: ", ";\n        box-shadow: ", "\n          0px 2px 0px !important;\n      }\n\n      &[disabled] {\n        border-radius: ", ";\n        padding: 0.4em 2em 0.4em 0.8em;\n      }\n\n      ", "\n\n      ", "\n\n      & {\n        ", ";\n      }\n    "])), borderRadius('default')(styleProps), borderRadius('default')(styleProps), styleProps.hasIcon && css$1(_templateObject6$c || (_templateObject6$c = _taggedTemplateLiteralLoose(["\n        padding-right: 2em;\n      "]))), palette(styleProps.palette || 'primary')(styleProps), palette((styleProps.palette || 'primary') + "Tint", {
      dark: styleProps.palette + "Shade"
    })(styleProps), borderRadius('default')(styleProps), styleProps.disabled && css$1(_templateObject7$b || (_templateObject7$b = _taggedTemplateLiteralLoose(["\n        border-radius: ", ";\n        padding: 0.4em 0.8em 0.4em 0.8em;\n      "])), borderRadius('default')(styleProps)), styleProps.state && css$1(_templateObject8$b || (_templateObject8$b = _taggedTemplateLiteralLoose(["\n        & {\n          border-color: ", ";\n          box-shadow: ", " 0px 2px\n            0px !important;\n        }\n      "])), palette("" + styleProps.state)(styleProps), palette(styleProps.state + "Tint", {
      dark: styleProps.state + "Shade"
    })(styleProps)), theme(styleProps.themeKey, "variants.borderless.styles.base")(styleProps));
  }

  if (styleProps.variant === 'underline') {
    return css$1(_templateObject9$8 || (_templateObject9$8 = _taggedTemplateLiteralLoose(["\n      border-top-left-radius: ", ";\n      border-top-right-radius: ", ";\n      border-bottom: 1px solid\n        ", ";\n\n      ", "\n\n      &:focus,\n      &[aria-expanded='true'] {\n        border-bottom-color: ", ";\n        box-shadow: ", "\n          0px 2px 0px !important;\n      }\n\n      &[disabled] {\n        padding: 0.4em 2em 0.4em 0.8em;\n      }\n\n      ", "\n\n      ", "\n\n      & {\n        ", ";\n      }\n    "])), borderRadius('default')(styleProps), borderRadius('default')(styleProps), palette(styleProps.palette || 'white900', {
      dark: styleProps.palette || 'gray700'
    })(styleProps), styleProps.hasIcon && css$1(_templateObject10$7 || (_templateObject10$7 = _taggedTemplateLiteralLoose(["\n        padding-right: 2em;\n      "]))), palette(styleProps.palette || 'primary')(styleProps), palette((styleProps.palette || 'primary') + "Tint", {
      dark: styleProps.palette + "Shade"
    })(styleProps), styleProps.disabled && css$1(_templateObject11$7 || (_templateObject11$7 = _taggedTemplateLiteralLoose(["\n        padding: 0.4em 0.8em 0.4em 0.8em;\n      "]))), styleProps.state && css$1(_templateObject12$6 || (_templateObject12$6 = _taggedTemplateLiteralLoose(["\n        & {\n          border-color: ", ";\n          box-shadow: ", " 0px 2px\n            0px !important;\n        }\n      "])), palette("" + styleProps.state)(styleProps), palette(styleProps.state + "Tint", {
      dark: styleProps.state + "Shade"
    })(styleProps)), theme(styleProps.themeKey, "variants.underline.styles.base")(styleProps));
  }

  return css$1(_templateObject13$4 || (_templateObject13$4 = _taggedTemplateLiteralLoose([""])));
} ////////////////////////////////////////////////////////////////////////


var SelectWrapper = function SelectWrapper(styleProps) {
  return css(_templateObject14$3 || (_templateObject14$3 = _taggedTemplateLiteralLoose(["\n  align-items: center;\n  position: relative;\n  width: fit-content;\n\n  ", ";\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), getSelectWrapperVariantStyles(styleProps), styleProps.size && getWrapperSizeStyles(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};

function getSelectWrapperVariantStyles(styleProps) {
  if (styleProps.variant === 'bordered') {
    return css$1(_templateObject15$3 || (_templateObject15$3 = _taggedTemplateLiteralLoose(["\n      background-color: ", ";\n      border-radius: ", ";\n\n      & {\n        ", ";\n      }\n    "])), palette('white', {
      dark: 'black100'
    })(styleProps), borderRadius('default')(styleProps), theme(styleProps.themeKey, "variants.bordered.styles.base")(styleProps));
  }

  if (styleProps.variant === 'borderless') {
    return css$1(_templateObject16$3 || (_templateObject16$3 = _taggedTemplateLiteralLoose(["\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "variants.borderless.styles.base")(styleProps));
  }

  if (styleProps.variant === 'underline') {
    return css$1(_templateObject17$3 || (_templateObject17$3 = _taggedTemplateLiteralLoose(["\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "variants.underline.styles.base")(styleProps));
  }

  return css$1(_templateObject18$3 || (_templateObject18$3 = _taggedTemplateLiteralLoose([""])));
}

function getWrapperSizeStyles(styleProps) {
  var properties = {
    small: css$1(_templateObject19$2 || (_templateObject19$2 = _taggedTemplateLiteralLoose(["\n      font-size: ", "rem;\n\n      & {\n        ", ";\n      }\n    "])), fontSize('150')(styleProps), theme(styleProps.themeKey, "styles.sizes.small")(styleProps)),
    default: css$1(_templateObject20$2 || (_templateObject20$2 = _taggedTemplateLiteralLoose(["\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "styles.sizes.default")(styleProps)),
    medium: css$1(_templateObject21$2 || (_templateObject21$2 = _taggedTemplateLiteralLoose(["\n      font-size: ", "rem;\n\n      & {\n        ", ";\n      }\n    "])), fontSize('300')(styleProps), theme(styleProps.themeKey, "styles.sizes.medium")(styleProps)),
    large: css$1(_templateObject22$1 || (_templateObject22$1 = _taggedTemplateLiteralLoose(["\n      font-size: ", "rem;\n\n      & {\n        ", ";\n      }\n    "])), fontSize('400')(styleProps), theme(styleProps.themeKey, "styles.sizes.large")(styleProps))
  };
  return properties[styleProps.size];
} ////////////////////////////////////////////////////////////////////////

var SelectIcon = function SelectIcon(styleProps) {
  return css(_templateObject23$1 || (_templateObject23$1 = _taggedTemplateLiteralLoose(["\n  && {\n    position: absolute;\n    width: 0.8em;\n    height: 2.75em;\n    right: 0.8em;\n    z-index: 1;\n    color: ", ";\n    fill: ", ";\n    pointer-events: none;\n  }\n\n  & {\n    ", ";\n  }\n"])), palette('text')(styleProps), palette('text')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
}; ////////////////////////////////////////////////////////////////////////

var SelectSpinner = function SelectSpinner(styleProps) {
  return css(_templateObject24$1 || (_templateObject24$1 = _taggedTemplateLiteralLoose(["\n  && {\n    font-size: inherit;\n    align-items: center;\n    display: flex;\n    position: absolute;\n    height: 2.75em;\n    margin: 0 0.75em;\n    top: 0;\n    right: 0;\n    z-index: 2;\n\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
}; ////////////////////////////////////////////////////////////////////////

var SelectField$1 = function SelectField(styleProps) {
  return css(_templateObject25$1 || (_templateObject25$1 = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var LabelWrapper = function LabelWrapper(styleProps) {
  return css(_templateObject26$1 || (_templateObject26$1 = _taggedTemplateLiteralLoose(["\n  ", ";\n"])), LabelWrapper$2(styleProps));
};
var LabelWrapperBackground = function LabelWrapperBackground(styleProps) {
  return css(_templateObject27$1 || (_templateObject27$1 = _taggedTemplateLiteralLoose(["\n  ", ";\n"])), LabelWrapperBackground$1(styleProps));
};

var useProps$D = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var disabled = props.disabled,
      isLoading = props.isLoading,
      isRequired = props.isRequired,
      label = props.label,
      onChange = props.onChange,
      options = props.options,
      _placeholder = props.placeholder,
      selectProps = props.selectProps,
      selectRef = props.selectRef,
      state = props.state,
      restProps = _objectWithoutPropertiesLoose$4(props, ["disabled", "isLoading", "isRequired", "label", "onChange", "options", "placeholder", "selectProps", "selectRef", "state"]);

  var ref = react.useRef();
  var uid = useUniqueId();

  var _useLabelPlaceholder = useLabelPlaceholder(_objectSpread2$3({
    enabled: Boolean(label)
  }, props)),
      isFocused = _useLabelPlaceholder.isFocused,
      labelPlaceholderInputProps = _useLabelPlaceholder.inputProps;

  var placeholder = _placeholder;

  if (isLoading && options.length === 0) {
    placeholder = 'Loading...';
  }

  var _React$useState = react.useState(Boolean(!props.defaultValue && !props.value && (label || placeholder))),
      isPlaceholderSelected = _React$useState[0],
      setIsPlaceholderSelected = _React$useState[1];

  var handleChange = react.useCallback(function (e) {
    setIsPlaceholderSelected(false);
    onChange && onChange(e);
  }, [onChange]);
  var wrapperClassName = useClassName({
    style: SelectWrapper,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Wrapper',
    prevClassName: restProps.className
  });
  var iconClassName = useClassName({
    style: SelectIcon,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Icon'
  });
  var spinnerClassName = useClassName({
    style: SelectSpinner,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Spinner'
  });
  var labelWrapperClassName = useClassName({
    style: LabelWrapper,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      isFocused: isFocused || !isPlaceholderSelected
    }),
    themeKey: themeKey,
    themeKeySuffix: 'LabelWrapper'
  });
  var labelWrapperBackgroundClassName = useClassName({
    style: LabelWrapperBackground,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      isFocused: isFocused || !isPlaceholderSelected
    }),
    themeKey: themeKey,
    themeKeySuffix: 'LabelWrapperBackground'
  });
  var boxProps = Box.useProps(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3({}, omitCSSProps(restProps)), {}, {
    id: uid
  }, selectProps), labelPlaceholderInputProps), {}, {
    className: undefined,
    elementRef: mergeRefs(ref, selectRef, props.elementRef),
    wrapElement: function wrapElement(children) {
      return /*#__PURE__*/react.createElement(Box, _extends$1({
        className: wrapperClassName
      }, pickCSSProps(props)), label && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Box, {
        className: labelWrapperBackgroundClassName
      }, /*#__PURE__*/react.createElement(Text, {
        opacity: "0"
      }, label)), /*#__PURE__*/react.createElement(Box, {
        className: labelWrapperClassName
      }, /*#__PURE__*/react.createElement(Text, {
        use: "label",
        htmlFor: (selectProps === null || selectProps === void 0 ? void 0 : selectProps.id) || uid
      }, label))), children, isLoading ? /*#__PURE__*/react.createElement(Spinner, {
        className: spinnerClassName,
        color: "text"
      }) : /*#__PURE__*/react.createElement(Icon, {
        className: iconClassName,
        icon: "chevron-down"
      }));
    }
  }));
  var color = 'text';

  if (isPlaceholderSelected) {
    color = 'gray300';

    if (label) {
      color = 'transparent';
    }
  }

  var className = useClassName({
    style: Select$2,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      color: color,
      hasIcon: true,
      isPlaceholderSelected: isPlaceholderSelected
    }),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    'aria-invalid': state === 'danger',
    'aria-required': isRequired,
    disabled: disabled,
    onChange: handleChange,
    children: /*#__PURE__*/react.createElement(react.Fragment, null, (label || placeholder) && /*#__PURE__*/react.createElement("option", {
      disabled: typeof restProps.value !== 'undefined' || !isPlaceholderSelected,
      value: ""
    }, label || placeholder), options.map(function (option, i) {
      return /*#__PURE__*/react.createElement("option", {
        key: i // eslint-disable-line
        ,
        disabled: disabled || option.disabled,
        value: option.value
      }, option.label);
    }))
  });
}, {
  defaultProps: {
    variant: 'bordered'
  },
  themeKey: 'Select'
});
var Select$1 = createComponent(function (props) {
  var selectProps = useProps$D(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: selectProps
  });
}, {
  attach: {
    useProps: useProps$D,
    displayName: 'Select'
  },
  defaultProps: {
    use: 'select'
  },
  themeKey: 'Select'
}); ////////////////////////////////////////////////////////////////

var useSelectFieldProps = createHook(function (props, _ref2) {
  var themeKey = _ref2.themeKey;

  var addonAfter = props.addonAfter,
      addonBefore = props.addonBefore;
      props.children;
      var autoFocus = props.autoFocus,
      defaultValue = props.defaultValue,
      description = props.description,
      disabled = props.disabled,
      hint = props.hint,
      selectProps = props.selectProps,
      isLoading = props.isLoading,
      isOptional = props.isOptional,
      isRequired = props.isRequired,
      orientation = props.orientation,
      label = props.label,
      name = props.name,
      options = props.options,
      size = props.size,
      placeholder = props.placeholder,
      state = props.state,
      tooltip = props.tooltip,
      tooltipTriggerComponent = props.tooltipTriggerComponent,
      value = props.value,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onFocus = props.onFocus,
      overrides = props.overrides,
      selectRef = props.selectRef,
      validationText = props.validationText,
      variant = props.variant,
      restProps = _objectWithoutPropertiesLoose$4(props, ["addonAfter", "addonBefore", "children", "autoFocus", "defaultValue", "description", "disabled", "hint", "selectProps", "isLoading", "isOptional", "isRequired", "orientation", "label", "name", "options", "size", "placeholder", "state", "tooltip", "tooltipTriggerComponent", "value", "onBlur", "onChange", "onFocus", "overrides", "selectRef", "validationText", "variant"]);

  var boxProps = Box.useProps(restProps);
  var className = useClassName({
    style: SelectField$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(FieldWrapper, {
      description: description,
      hint: hint,
      isOptional: isOptional,
      isRequired: isRequired,
      label: label,
      overrides: overrides,
      state: state,
      tooltip: tooltip,
      tooltipTriggerComponent: tooltipTriggerComponent,
      validationText: validationText,
      variant: variant
    }, function (_ref3) {
      var elementProps = _ref3.elementProps;
      return /*#__PURE__*/react.createElement(ConditionalWrap, {
        condition: Boolean(addonBefore || addonAfter),
        wrap: function wrap(children) {
          return /*#__PURE__*/react.createElement(Group, {
            orientation: orientation,
            overrides: overrides
          }, children);
        }
      }, /*#__PURE__*/react.createElement(react.Fragment, null, addonBefore, /*#__PURE__*/react.createElement(Select$1, _extends$1({
        autoFocus: autoFocus,
        defaultValue: defaultValue,
        disabled: disabled,
        isLoading: isLoading,
        isRequired: isRequired,
        name: name,
        size: size,
        options: options,
        placeholder: placeholder,
        selectProps: selectProps,
        selectRef: selectRef,
        state: state,
        value: value,
        onBlur: onBlur,
        onChange: onChange,
        onFocus: onFocus,
        overrides: overrides,
        variant: variant
      }, elementProps)), addonAfter));
    })
  });
}, {
  themeKey: 'SelectField'
});
var SelectField = createComponent(function (props) {
  var SelectFieldProps = useSelectFieldProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: SelectFieldProps
  });
}, {
  attach: {
    useProps: useProps$D,
    displayName: 'SelectField'
  },
  themeKey: 'SelectField'
});

var Select = Object.assign(Select$1, {
  Formik: formikField(Select$1),
  ReduxForm: reduxFormField(Select$1)
});
Object.assign(SelectField, {
  Formik: formikField(SelectField, {
    hasFieldWrapper: true
  }),
  ReduxForm: reduxFormField(SelectField, {
    hasFieldWrapper: true
  })
});

var useProps$C = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var _currentPage = props.currentPage,
      nextButtonProps = props.nextButtonProps,
      nextText = props.nextText,
      numberOfPages = props.numberOfPages,
      onChangePage = props.onChangePage,
      overrides = props.overrides,
      prepositionText = props.prepositionText,
      previousButtonProps = props.previousButtonProps,
      previousText = props.previousText,
      selectProps = props.selectProps,
      restProps = _objectWithoutPropertiesLoose$4(props, ["currentPage", "nextButtonProps", "nextText", "numberOfPages", "onChangePage", "overrides", "prepositionText", "previousButtonProps", "previousText", "selectProps"]);

  var setProps = Set$1.useProps(_objectSpread2$3(_objectSpread2$3({}, restProps), {}, {
    overrides: overrides
  }));

  var _React$useState = react.useState(1),
      currentPage = _React$useState[0],
      setCurrentPage = _React$useState[1];

  react.useEffect(function () {
    setCurrentPage(_currentPage || 1);
  }, [_currentPage]);
  var className = useClassName({
    style: Pagination,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: setProps.className
  });
  var buttonClassName = useClassName({
    style: PaginationButton,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Button'
  });
  var selectClassName = useClassName({
    style: PaginationSelect,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Select'
  });
  var prepositionClassName = useClassName({
    style: PaginationPrepositionText,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'PrepositionText'
  });
  var handleChangePage = react.useCallback(function (page) {
    if (onChangePage) {
      onChangePage(page);
    } else {
      setCurrentPage(page);
    }
  }, [onChangePage]);
  var handleChangePageDropdown = react.useCallback(function (e) {
    var index = parseInt(e.target.value, 10);
    handleChangePage(index + 1);
  }, [handleChangePage]);
  return _objectSpread2$3(_objectSpread2$3({}, setProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Button, _extends$1({
      className: buttonClassName,
      disabled: currentPage === 1,
      onClick: function onClick() {
        return handleChangePage(currentPage - 1);
      },
      iconBefore: "chevron-left",
      variant: "ghost",
      themeKey: themeKey + ".Button",
      overrides: overrides
    }, previousButtonProps), previousText), /*#__PURE__*/react.createElement(Select, _extends$1({
      className: selectClassName,
      onChange: handleChangePageDropdown,
      options: times_1(numberOfPages).map(function (_, index) {
        return {
          label: "" + (index + 1),
          value: index
        };
      }),
      value: currentPage - 1,
      themeKey: themeKey + ".Select",
      overrides: overrides
    }, selectProps)), /*#__PURE__*/react.createElement(Box, {
      className: prepositionClassName
    }, prepositionText, " ", numberOfPages), /*#__PURE__*/react.createElement(Button, _extends$1({
      className: buttonClassName,
      disabled: currentPage === numberOfPages,
      onClick: function onClick() {
        return handleChangePage(currentPage + 1);
      },
      iconAfter: "chevron-right",
      variant: "ghost",
      themeKey: themeKey + ".Button",
      overrides: overrides
    }, nextButtonProps), nextText))
  });
}, {
  defaultProps: {
    prepositionText: 'of',
    previousText: 'Previous',
    nextText: 'Next'
  },
  themeKey: 'Pagination'
});
createComponent(function (props) {
  var textProps = useProps$C(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$C,
    displayName: 'Pagination'
  },
  themeKey: 'Pagination'
});

var _templateObject$g;
var Paragraph = function Paragraph(styleProps) {
  return css(_templateObject$g || (_templateObject$g = _taggedTemplateLiteralLoose(["\n  ", ";\n\n  & .bb-Icon {\n    vertical-align: -0.125em;\n  }\n\n  & {\n    ", ";\n  }\n"])), getCapsizeStyles({
    lineHeight: 'default',
    includeBottomGap: true
  })(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$B = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: Paragraph,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Paragraph'
});
createComponent(function (props) {
  var paragraph = useProps$B(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: paragraph
  });
}, {
  attach: {
    useProps: useProps$B,
    displayName: 'Paragraph'
  },
  defaultProps: {
    use: 'p'
  },
  themeKey: 'Paragraph'
});

var PopoverStateContext = react.createContext({
  popover: {}
});
function usePopoverState(initialState) {
  return usePopoverState$1(initialState);
}
function usePopoverContext() {
  return react.useContext(PopoverStateContext);
}
function PopoverState(props) {
  props.children;
      var restProps = _objectWithoutPropertiesLoose$4(props, ["children"]);

  var popover = usePopoverState(restProps);
  var contextValue = react.useMemo(function () {
    return {
      popover: popover
    };
  }, [popover]);
  return /*#__PURE__*/react.createElement(PopoverStateContext.Provider, {
    value: contextValue
  }, isFunction$2(props.children) ? props.children(popover) : props.children);
}

var PopoverContext = react.createContext({});
var useProps$A = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var popoverContext = react.useContext(PopoverStateContext);
  props = _objectSpread2$3(_objectSpread2$3({}, props), popoverContext.popover);

  var _props = props,
      _props$actionButtonsP = _props.actionButtonsProps,
      actionButtonsProps = _props$actionButtonsP === void 0 ? {} : _props$actionButtonsP,
      _props$arrowProps = _props.arrowProps,
      arrowProps = _props$arrowProps === void 0 ? {} : _props$arrowProps,
      _props$closeButtonPro = _props.closeButtonProps,
      closeButtonProps = _props$closeButtonPro === void 0 ? {} : _props$closeButtonPro,
      footer = _props.footer,
      hasArrow = _props.hasArrow,
      hide = _props.hide,
      hideOnEsc = _props.hideOnEsc,
      hideOnClickOutside = _props.hideOnClickOutside,
      modal = _props.modal,
      onClickClose = _props.onClickClose,
      overrides = _props.overrides,
      preventBodyScroll = _props.preventBodyScroll,
      showActionButtons = _props.showActionButtons,
      showCloseButton = _props.showCloseButton,
      standalone = _props.standalone,
      title = _props.title,
      usePortal = _props.usePortal,
      visible = _props.visible,
      animating = _props.animating,
      animated = _props.animated,
      baseId = _props.baseId,
      unstable_initialFocusRef = _props.unstable_initialFocusRef,
      unstable_finalFocusRef = _props.unstable_finalFocusRef,
      unstable_orphan = _props.unstable_orphan,
      unstable_autoFocusOnHide = _props.unstable_autoFocusOnHide,
      unstable_autoFocusOnShow = _props.unstable_autoFocusOnShow,
      unstable_popoverRef = _props.unstable_popoverRef,
      unstable_popoverStyles = _props.unstable_popoverStyles,
      stopAnimation = _props.stopAnimation,
      restProps = _objectWithoutPropertiesLoose$4(_props, ["actionButtonsProps", "arrowProps", "closeButtonProps", "footer", "hasArrow", "hide", "hideOnEsc", "hideOnClickOutside", "modal", "onClickClose", "overrides", "preventBodyScroll", "showActionButtons", "showCloseButton", "standalone", "title", "usePortal", "visible", "animating", "animated", "baseId", "unstable_initialFocusRef", "unstable_finalFocusRef", "unstable_orphan", "unstable_autoFocusOnHide", "unstable_autoFocusOnShow", "unstable_popoverRef", "unstable_popoverStyles", "stopAnimation"]);

  var popoverProps = usePopover({
    hide: hide,
    hideOnEsc: hideOnEsc,
    hideOnClickOutside: hideOnClickOutside,
    modal: usePortal || modal,
    preventBodyScroll: preventBodyScroll,
    visible: visible,
    animating: animating,
    animated: animated,
    baseId: baseId,
    unstable_initialFocusRef: unstable_initialFocusRef,
    unstable_finalFocusRef: unstable_finalFocusRef,
    unstable_orphan: unstable_orphan,
    unstable_autoFocusOnHide: unstable_autoFocusOnHide,
    unstable_autoFocusOnShow: unstable_autoFocusOnShow,
    unstable_popoverRef: unstable_popoverRef,
    unstable_popoverStyles: unstable_popoverStyles,
    stopAnimation: stopAnimation
  }, restProps);
  var boxProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, restProps), popoverProps));
  var className = useClassName({
    style: Popover$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      prevTransformValue: unstable_popoverStyles.transform
    }),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var popoverCloseClassName = useClassName({
    style: PopoverClose,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Close',
    prevClassName: closeButtonProps.className
  });
  var titleId = useUniqueId();
  var descriptionId = useUniqueId();
  var context = react.useMemo(function () {
    return _objectSpread2$3({
      descriptionId: descriptionId,
      titleId: titleId
    }, props);
  }, [descriptionId, props, titleId]);
  var handleClickClose = react.useCallback(function (e) {
    onClickClose && onClickClose(e);
    hide && hide();
  }, [hide, onClickClose]);
  var children = /*#__PURE__*/react.createElement(PopoverContext.Provider, {
    value: context
  }, standalone ? props.children : /*#__PURE__*/react.createElement(react.Fragment, null, hasArrow && /*#__PURE__*/react.createElement(PopoverArrow, _extends$1({
    overrides: overrides // @ts-ignore
    ,
    placement: props.placement // @ts-ignore
    ,
    unstable_arrowRef: props.unstable_arrowRef // @ts-ignore
    ,
    unstable_arrowStyles: props.unstable_arrowStyles
  }, arrowProps)), title && /*#__PURE__*/react.createElement(PopoverHeader, {
    overrides: overrides
  }, typeof title === 'string' ? /*#__PURE__*/react.createElement(PopoverTitle, {
    overrides: overrides
  }, title) : title, showCloseButton && /*#__PURE__*/react.createElement(Button.Close, _extends$1({
    className: popoverCloseClassName,
    onClick: handleClickClose,
    size: "small"
  }, closeButtonProps))), /*#__PURE__*/react.createElement(PopoverContent, {
    overrides: overrides
  }, props.children), (footer || showActionButtons) && /*#__PURE__*/react.createElement(PopoverFooter, {
    overrides: overrides
  }, footer && /*#__PURE__*/react.createElement(Box, null, footer), showActionButtons && /*#__PURE__*/react.createElement(Box, null, /*#__PURE__*/react.createElement(ActionButtons, _extends$1({}, actionButtonsProps, {
    onClickCancel: actionButtonsProps.onClickCancel || hide,
    size: "small"
  }))))));
  return _objectSpread2$3(_objectSpread2$3({
    'aria-describedby': props.children ? descriptionId : undefined,
    'aria-labelledby': props.title ? titleId : undefined
  }, boxProps), {}, {
    children: children,
    className: className
  });
}, {
  defaultProps: {
    duration: '150ms'
  },
  themeKey: 'Popover'
});
var Popover = createComponent(function (props) {
  var popoverProps = useProps$A(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: popoverProps
  });
}, {
  attach: {
    useProps: useProps$A,
    displayName: 'Popover'
  },
  themeKey: 'Popover'
}); //////////////////////////////

var usePopoverContentProps = createHook(function (props, _ref2) {
  var themeKey = _ref2.themeKey;
  var boxProps = Box.useProps(props);
  var contextProps = react.useContext(PopoverContext);
  var className = useClassName({
    style: PopoverContent$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, contextProps), props),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({
    id: props.id || contextProps.descriptionId
  }, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Popover.Content'
});
var PopoverContent = createComponent(function (props) {
  var calloutContentProps = usePopoverContentProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: calloutContentProps
  });
}, {
  attach: {
    useProps: usePopoverContentProps,
    displayName: 'Popover.Content'
  },
  themeKey: 'Popover.Content'
}); //////////////////////////////

var usePopoverHeaderProps = createHook(function (props, _ref3) {
  var themeKey = _ref3.themeKey;
  var flexProps = Flex.useProps(props);
  var contextProps = react.useContext(PopoverContext);
  var className = useClassName({
    style: PopoverHeader$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, contextProps), props),
    themeKey: themeKey,
    prevClassName: flexProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, flexProps), {}, {
    className: className
  });
}, {
  themeKey: 'Popover.Header'
});
var PopoverHeader = createComponent(function (props) {
  var calloutHeaderProps = usePopoverHeaderProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: calloutHeaderProps
  });
}, {
  attach: {
    useProps: usePopoverHeaderProps,
    displayName: 'Popover.Header'
  },
  themeKey: 'Popover.Header'
}); //////////////////////////////

var usePopoverTitleProps = createHook(function (props, _ref4) {
  var themeKey = _ref4.themeKey;
  var textProps = Text.useProps(props);
  var contextProps = react.useContext(PopoverContext);
  var className = useClassName({
    style: PopoverTitle$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, contextProps), props),
    themeKey: themeKey,
    prevClassName: textProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({
    id: contextProps.titleId
  }, textProps), {}, {
    className: className
  });
}, {
  themeKey: 'Popover.Title'
});
var PopoverTitle = createComponent(function (props) {
  var calloutTitleProps = usePopoverTitleProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: calloutTitleProps
  });
}, {
  attach: {
    useProps: usePopoverTitleProps,
    displayName: 'Popover.Title'
  },
  defaultProps: {
    use: 'span'
  },
  themeKey: 'Popover.Title'
}); //////////////////////////////

var usePopoverFooterProps = createHook(function (props, _ref5) {
  var themeKey = _ref5.themeKey;
  var flexProps = Flex.useProps(props);
  var contextProps = react.useContext(PopoverContext);
  var className = useClassName({
    style: PopoverFooter$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, contextProps), props),
    themeKey: themeKey,
    prevClassName: flexProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, flexProps), {}, {
    className: className
  });
}, {
  themeKey: 'Popover.Footer'
});
var PopoverFooter = createComponent(function (props) {
  var calloutFooterProps = usePopoverFooterProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: calloutFooterProps
  });
}, {
  attach: {
    useProps: usePopoverFooterProps,
    displayName: 'Popover.Footer'
  },
  themeKey: 'Popover.Footer'
}); //////////////////////////////

var usePopoverArrowProps = createHook(function (props, _ref6) {
  var themeKey = _ref6.themeKey;
  var popoverContext = react.useContext(PopoverStateContext);
  props = _objectSpread2$3(_objectSpread2$3({}, props), popoverContext.popover);

  var _props2 = props,
      placement = _props2.placement,
      size = _props2.size,
      unstable_arrowRef = _props2.unstable_arrowRef,
      unstable_arrowStyles = _props2.unstable_arrowStyles,
      htmlProps = _objectWithoutPropertiesLoose$4(_props2, ["placement", "size", "unstable_arrowRef", "unstable_arrowStyles"]);

  var contextProps = react.useContext(PopoverContext);
  var popoverArrowProps = usePopoverArrow({
    // @ts-ignore
    placement: placement || contextProps.placement,
    size: size,
    // @ts-ignore
    unstable_arrowRef: unstable_arrowRef || contextProps.unstable_arrowRef,
    // @ts-ignore
    unstable_arrowStyles: unstable_arrowStyles || contextProps.unstable_arrowRef
  }, htmlProps);
  htmlProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, htmlProps), popoverArrowProps));
  var className = useClassName({
    style: PopoverArrow$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: htmlProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, htmlProps), {}, {
    className: className
  });
}, {
  themeKey: 'Popover.Arrow'
});
var PopoverArrow = createComponent(function (props) {
  var popoverArrowProps = usePopoverArrowProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: popoverArrowProps
  });
}, {
  attach: {
    useProps: useProps$A,
    displayName: 'Popover.Arrow'
  },
  themeKey: 'Popover.Arrow'
});

var useProps$z = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var popoverContext = react.useContext(PopoverStateContext);
  props = _objectSpread2$3(_objectSpread2$3({}, props), popoverContext.popover);

  var _props = props,
      visible = _props.visible,
      baseId = _props.baseId,
      animating = _props.animating,
      animated = _props.animated,
      stopAnimation = _props.stopAnimation,
      modal = _props.modal,
      usePortal = _props.usePortal,
      htmlProps = _objectWithoutPropertiesLoose$4(_props, ["visible", "baseId", "animating", "animated", "stopAnimation", "modal", "usePortal"]);

  var popoverBackdropProps = usePopoverBackdrop({
    visible: visible,
    baseId: baseId,
    animating: animating,
    animated: animated,
    stopAnimation: stopAnimation,
    modal: usePortal || modal
  }, htmlProps);
  htmlProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, htmlProps), popoverBackdropProps));
  var className = useClassName({
    style: PopoverBackdrop$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: htmlProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, htmlProps), {}, {
    className: className
  });
}, {
  themeKey: 'Popover.Backdrop'
});
var PopoverBackdrop = createComponent(function (props) {
  var popoverBackdropProps = useProps$z(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: popoverBackdropProps
  });
}, {
  attach: {
    useProps: useProps$z,
    displayName: 'Popover.Backdrop'
  },
  themeKey: 'Popover.Backdrop'
});

var useProps$y = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var popoverContext = react.useContext(PopoverStateContext);
  props = _objectSpread2$3(_objectSpread2$3({}, props), popoverContext.popover);

  var _props = props,
      disabled = _props.disabled,
      focusable = _props.focusable,
      visible = _props.visible,
      toggle = _props.toggle,
      baseId = _props.baseId,
      unstable_referenceRef = _props.unstable_referenceRef,
      htmlProps = _objectWithoutPropertiesLoose$4(_props, ["disabled", "focusable", "visible", "toggle", "baseId", "unstable_referenceRef"]);

  var popoverDisclosureProps = usePopoverDisclosure({
    disabled: disabled,
    focusable: focusable,
    visible: visible,
    toggle: toggle,
    baseId: baseId,
    unstable_referenceRef: unstable_referenceRef
  }, htmlProps);
  htmlProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, htmlProps), popoverDisclosureProps));
  var className = useClassName({
    style: PopoverDisclosure$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: htmlProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, htmlProps), {}, {
    className: className
  });
}, {
  themeKey: 'Popover.Disclosure'
});
var PopoverDisclosure = createComponent(function (props) {
  var popoverDisclosureProps = useProps$y(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: popoverDisclosureProps
  });
}, {
  attach: {
    useProps: useProps$y,
    displayName: 'Popover.Disclosure'
  },
  defaultProps: {
    use: 'button'
  },
  themeKey: 'Popover.Disclosure'
});

Object.assign(Popover, {
  Arrow: PopoverArrow,
  Backdrop: PopoverBackdrop,
  Content: PopoverContent,
  Disclosure: PopoverDisclosure,
  Footer: PopoverFooter,
  Header: PopoverHeader,
  Title: PopoverTitle,
  useContext: usePopoverContext,
  useState: usePopoverState,
  State: PopoverState
});

var _templateObject$f;
var Portal = function Portal(styleProps) {
  return css(_templateObject$f || (_templateObject$f = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$x = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: Portal,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    children: /*#__PURE__*/react.createElement(Box, props, boxProps.children),
    className: className
  });
}, {
  themeKey: 'Portal'
});
createComponent(function (props) {
  var portalProps = useProps$x(props);
  return createElement({
    children: props.children,
    component: Portal$1,
    use: props.use,
    htmlProps: portalProps
  });
}, {
  attach: {
    useProps: useProps$x,
    displayName: 'Portal'
  },
  themeKey: 'Portal'
});

var _templateObject$e, _templateObject2$c, _templateObject3$c, _templateObject4$c, _templateObject5$c, _templateObject6$b;
var ProgressBar = function ProgressBar(styleProps) {
  return css(_templateObject$e || (_templateObject$e = _taggedTemplateLiteralLoose(["\n  border-radius: ", ";\n  overflow: hidden;\n  width: 100%;\n  height: 1rem;\n  background-color: ", ";\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), borderRadius('default')(styleProps), palette(styleProps.color + "Tint", {
    dark: styleProps.color + "Shade"
  })(styleProps), getSizeAttributes$1(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var ProgressBarIndicator = function ProgressBarIndicator(styleProps) {
  return css(_templateObject2$c || (_templateObject2$c = _taggedTemplateLiteralLoose(["\n  height: 100%;\n  background-color: ", ";\n  transition: width 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  width: ", "%;\n\n  & {\n    ", ";\n  }\n"])), palette(styleProps.color)(styleProps), styleProps.value || '0', theme(styleProps.themeKey, "styles.base")(styleProps));
};

function getSizeAttributes$1(styleProps) {
  var sizeAttributes = {
    small: css$1(_templateObject3$c || (_templateObject3$c = _taggedTemplateLiteralLoose(["\n      height: 0.6rem;\n\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "styles.sizes.small")(styleProps)),
    default: css$1(_templateObject4$c || (_templateObject4$c = _taggedTemplateLiteralLoose(["\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "styles.sizes.default")(styleProps)),
    medium: css$1(_templateObject5$c || (_templateObject5$c = _taggedTemplateLiteralLoose(["\n      height: 1.5rem;\n\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "styles.sizes.medium")(styleProps)),
    large: css$1(_templateObject6$b || (_templateObject6$b = _taggedTemplateLiteralLoose(["\n      height: 2rem;\n\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "styles.sizes.large")(styleProps))
  };
  return sizeAttributes[styleProps.size || 'default'];
}

function normalizeValue(value, maxValue) {
  var newValue = value;
  if (newValue > maxValue) newValue = maxValue;else if (newValue < 0) newValue = 0;
  return newValue;
}

var useProps$w = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var maxValue = props.maxValue,
      value = props.value,
      restProps = _objectWithoutPropertiesLoose$4(props, ["maxValue", "value"]);

  var boxProps = Box.useProps(restProps);
  var newValue = value || 0;
  var newMaxValue = maxValue || 100;
  newValue = normalizeValue(newValue, newMaxValue);
  var percent = newValue / newMaxValue * 100;
  var className = useClassName({
    style: ProgressBar,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var indicatorClassName = useClassName({
    style: ProgressBarIndicator,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      value: percent
    }),
    themeKey: themeKey,
    themeKeySuffix: 'Indicator',
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    'aria-valuenow': newValue,
    'aria-valuemin': 0,
    'aria-valuemax': newMaxValue,
    className: className,
    role: 'progressbar',
    children: /*#__PURE__*/react.createElement(Box, {
      className: indicatorClassName
    })
  });
}, {
  defaultProps: {
    color: 'primary',
    maxValue: 100,
    size: 'default',
    value: 0
  },
  themeKey: 'ProgressBar'
});
createComponent(function (props) {
  var textProps = useProps$w(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$w,
    displayName: 'ProgressBar'
  },
  themeKey: 'ProgressBar'
});

var _templateObject$d, _templateObject2$b, _templateObject3$b, _templateObject4$b, _templateObject5$b, _templateObject6$a, _templateObject7$a, _templateObject8$a, _templateObject9$7, _templateObject10$6, _templateObject11$6, _templateObject12$5, _templateObject13$3;
var Toast$1 = function Toast(styleProps) {
  return css(_templateObject$d || (_templateObject$d = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var ToastOverlay = function ToastOverlay(styleProps) {
  return css(_templateObject2$b || (_templateObject2$b = _taggedTemplateLiteralLoose(["\n  && {\n    min-width: 350px;\n    z-index: 19900411;\n  }\n\n  & .bb-Toast {\n    animation: ", " 250ms ease-in-out forwards;\n  }\n\n  & {\n    ", ";\n  }\n"])), getAnimation(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var getAnimation = function getAnimation(styleProps) {
  return keyframes(_templateObject3$b || (_templateObject3$b = _taggedTemplateLiteralLoose(["\n  from {\n    ", "\n\n    ", "\n  }\n\n  to {\n    ", "\n\n    ", "\n  }\n"])), styleProps.fade && css$1(_templateObject4$b || (_templateObject4$b = _taggedTemplateLiteralLoose(["\n        opacity: 0;\n      "]))), styleProps.slide && css$1(_templateObject5$b || (_templateObject5$b = _taggedTemplateLiteralLoose(["\n        ", "\n        ", "\n        ", "\n        ", "\n      "])), ['top-end', 'right', 'bottom-end'].includes(styleProps.placement) && css$1(_templateObject6$a || (_templateObject6$a = _taggedTemplateLiteralLoose(["\n            transform: translateX(", ");\n          "])), styleProps.fade ? '10%' : '130%'), ['bottom'].includes(styleProps.placement) && css$1(_templateObject7$a || (_templateObject7$a = _taggedTemplateLiteralLoose(["\n            transform: translateY(", ");\n          "])), styleProps.fade ? '10%' : '130%'), ['top-start', 'left', 'bottom-start'].includes(styleProps.placement) && css$1(_templateObject8$a || (_templateObject8$a = _taggedTemplateLiteralLoose(["\n            transform: translateX(", ");\n          "])), styleProps.fade ? '-10%' : '-130%'), ['top'].includes(styleProps.placement) && css$1(_templateObject9$7 || (_templateObject9$7 = _taggedTemplateLiteralLoose(["\n            transform: translateY(", ");\n          "])), styleProps.fade ? '-10%' : '-130%')), styleProps.fade && css$1(_templateObject10$6 || (_templateObject10$6 = _taggedTemplateLiteralLoose(["\n        opacity: 1;\n      "]))), styleProps.slide && css$1(_templateObject11$6 || (_templateObject11$6 = _taggedTemplateLiteralLoose(["\n        ", " ", ";\n      "])), ['top-end', 'right', 'bottom-end', 'top-start', 'left', 'bottom-start'].includes(styleProps.placement) && css$1(_templateObject12$5 || (_templateObject12$5 = _taggedTemplateLiteralLoose(["\n          transform: translateX(0);\n        "]))), ['bottom', 'top'].includes(styleProps.placement) && css$1(_templateObject13$3 || (_templateObject13$3 = _taggedTemplateLiteralLoose(["\n          transform: translateY(0);\n        "])))));
};

var useProps$v = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var alertProps = Alert.useProps(props, {
    themeKey: 'Toast'
  });
  var className = useClassName({
    style: Toast$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: alertProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, alertProps), {}, {
    className: className
  });
}, {
  defaultProps: {
    accent: true,
    showCloseButton: true
  },
  themeKey: 'Toast'
});
var Toast = createComponent(function (props) {
  var toastProps = useProps$v(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: toastProps
  });
}, {
  attach: {
    useProps: useProps$v,
    displayName: 'Toast'
  },
  themeKey: 'Toast'
});

var ToastContext = react.createContext({
  // @ts-ignore
  add: function add(toast) {},
  // @ts-ignore
  success: function success(toast) {},
  // @ts-ignore
  danger: function danger(toast) {},
  // @ts-ignore
  warning: function warning(toast) {},
  // @ts-ignore
  info: function info(toast) {},
  toasts: []
});
function ToastProvider(props) {
  var _theme$Toast, _theme$Toast2, _theme$Toast3;

  var children = props.children;

  var _useTheme = useTheme(),
      theme = _useTheme.theme;

  var _React$useState = react.useState([]),
      toasts = _React$useState[0],
      setToasts = _React$useState[1];

  var placement = theme === null || theme === void 0 ? void 0 : (_theme$Toast = theme.Toast) === null || _theme$Toast === void 0 ? void 0 : _theme$Toast.placement;
  var showCountdown = theme === null || theme === void 0 ? void 0 : (_theme$Toast2 = theme.Toast) === null || _theme$Toast2 === void 0 ? void 0 : _theme$Toast2.showCountdown;
  var timeout = theme === null || theme === void 0 ? void 0 : (_theme$Toast3 = theme.Toast) === null || _theme$Toast3 === void 0 ? void 0 : _theme$Toast3.timeout;
  var remove = react.useCallback(function (key) {
    setToasts(function (toasts) {
      var newToasts = toasts.filter(function (toast) {
        return toast.key !== key;
      });
      return newToasts;
    });
  }, []);
  var add = react.useCallback(function (_toast) {
    var key = generateId('toast-');

    var toast = _objectSpread2$3({
      showCountdown: showCountdown,
      timeout: timeout
    }, _toast);

    setToasts(function (toasts) {
      return [].concat(placement.includes('bottom') ? toasts : [], [_objectSpread2$3(_objectSpread2$3({
        key: key
      }, toast), {}, {
        countdown: toast.showCountdown ? toast.timeout : undefined,
        onClickClose: function onClickClose() {
          return remove(key);
        }
      })], !placement.includes('bottom') ? toasts : []);
    });

    if (toast.timeout) {
      setTimeout(function () {
        setToasts(function (toasts) {
          var newToasts = toasts.filter(function (toast) {
            return toast.key !== key;
          });
          return newToasts;
        });
      }, toast.timeout);
    }
  }, [placement, remove, showCountdown, timeout]);
  var success = react.useCallback(function (toast) {
    return add(_objectSpread2$3(_objectSpread2$3({}, toast), {}, {
      type: 'success'
    }));
  }, [add]);
  var info = react.useCallback(function (toast) {
    return add(_objectSpread2$3(_objectSpread2$3({}, toast), {}, {
      type: 'info'
    }));
  }, [add]);
  var warning = react.useCallback(function (toast) {
    return add(_objectSpread2$3(_objectSpread2$3({}, toast), {}, {
      type: 'warning'
    }));
  }, [add]);
  var danger = react.useCallback(function (toast) {
    return add(_objectSpread2$3(_objectSpread2$3({}, toast), {}, {
      type: 'danger'
    }));
  }, [add]);
  var value = react.useMemo(function () {
    return {
      add: add,
      success: success,
      info: info,
      warning: warning,
      danger: danger,
      toasts: toasts
    };
  }, [add, danger, info, success, toasts, warning]);
  return /*#__PURE__*/react.createElement(ToastContext.Provider, {
    value: value
  }, children);
}

var useProps$u = createHook(function (props, _ref) {
  var _theme$Toast;

  var themeKey = _ref.themeKey;

  props.children;
      props.isStacked;
      var overlayProps = props.overlayProps,
      spacing = props.spacing,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children", "isStacked", "overlayProps", "spacing"]);

  var _useTheme = useTheme(),
      theme = _useTheme.theme;

  var boxProps = Box.useProps(restProps);
  var overlay = Overlay.useState({
    visible: true,
    animated: true
  });

  var _React$useContext = react.useContext(ToastContext),
      toasts = _React$useContext.toasts;

  var placement = theme === null || theme === void 0 ? void 0 : (_theme$Toast = theme.Toast) === null || _theme$Toast === void 0 ? void 0 : _theme$Toast.placement;
  var className = useClassName({
    style: Toast$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var overlayClassName = useClassName({
    style: ToastOverlay,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      placement: placement
    }),
    themeKey: themeKey,
    themeKeySuffix: 'Overlay'
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(Overlay, _extends$1({}, overlay, overlayProps, {
      className: overlayClassName,
      placement: placement
    }), /*#__PURE__*/react.createElement(Stack, {
      spacing: spacing
    }, toasts.map(function (toast) {
      return /*#__PURE__*/react.createElement(Toast, _extends$1({
        key: toast.key
      }, toast), toast.message);
    })))
  });
}, {
  defaultProps: {
    fade: true,
    slide: true,
    spacing: 'major-2'
  },
  themeKey: 'Toast.Manager'
});
var ToastManager = createComponent(function (props) {
  var toastManagerProps = useProps$u(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: toastManagerProps
  });
}, {
  attach: {
    useProps: useProps$u
  },
  themeKey: 'Toast.Manager'
});

Object.assign(Toast || {}, {
  Manager: ToastManager
});

var _templateObject$c;
function GlobalStyles() {
  var _theme = react.useContext(ThemeContext);

  var _useColorMode = useColorMode(),
      colorMode = _useColorMode.colorMode;

  var styleProps = {
    colorMode: colorMode,
    theme: _theme
  };
  var colorModesCSSVariables = react.useMemo(function () {
    return getColorModesCSSVariables(_theme);
  }, [_theme]);
  return /*#__PURE__*/react.createElement(Global, {
    styles: css$1(_templateObject$c || (_templateObject$c = _taggedTemplateLiteralLoose(["\n        ", "\n\n        html,\n        body {\n          background-color: ", ";\n          box-sizing: border-box;\n          font-family: ", ";\n          font-size: ", "px;\n          line-height: ", ";\n          margin: 0;\n          padding: 0;\n          -webkit-font-smoothing: antialiased;\n          text-rendering: optimizeLegibility;\n          color: ", ";\n          fill: ", ";\n        }\n\n        *,\n        *::before,\n        *::after {\n          box-sizing: inherit;\n        }\n\n        ", ";\n\n        ", ";\n      "])), colorModesCSSVariables, palette('background')(styleProps), font('default')(styleProps), theme('global', 'fontSize')(styleProps), lineHeight('default')(styleProps), palette('text')(styleProps), palette('text')(styleProps), font('importUrls')(styleProps) && font('importUrls')(styleProps).map(function (url) {
      return "@import url('" + url + "');";
    }).join(''), theme('global.styles.base')(styleProps))
  });
}

Provider.defaultProps = {
  colorMode: 'default'
};
function Provider(props) {
  var children = props.children,
      colorMode = props.colorMode,
      collapseBelow = props.collapseBelow,
      isSSR = props.isSSR,
      isStandalone = props.isStandalone,
      _theme = props.theme; ////////////////////////////////////////////////

  var _React$useState = react.useState(_theme),
      theme = _React$useState[0],
      setTheme = _React$useState[1];

  react.useEffect(function () {
    setTheme(_theme);
  }, [_theme]); ////////////////////////////////////////////////

  var derivedTheme = react.useMemo(function () {
    if (theme && isStandalone) {
      return theme;
    }

    return buildTheme(theme);
  }, [isStandalone, theme]); ////////////////////////////////////////////////

  var themeContextValue = react.useMemo(function () {
    return {
      theme: theme,
      setTheme: setTheme
    };
  }, [theme, setTheme]); ////////////////////////////////////////////////

  return /*#__PURE__*/react.createElement(BumbagThemeContext.Provider, {
    value: themeContextValue
  }, /*#__PURE__*/react.createElement(ThemeProvider, {
    theme: derivedTheme
  }, /*#__PURE__*/react.createElement(ColorModeProvider, {
    isSSR: isSSR,
    mode: colorMode
  }, /*#__PURE__*/react.createElement(Provider$1, {
    unstable_prefix: "bb-id"
  }, /*#__PURE__*/react.createElement(ToastProvider, null, /*#__PURE__*/react.createElement(PageProvider, {
    collapseBelow: collapseBelow
  }, /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(GlobalStyles, null), /*#__PURE__*/react.createElement(Box, null, children))))))));
}

var _templateObject$b, _templateObject2$a, _templateObject3$a, _templateObject4$a, _templateObject5$a, _templateObject7$9, _templateObject8$9;
var Radio$1 = function Radio(styleProps) {
  return css(_templateObject$b || (_templateObject$b = _taggedTemplateLiteralLoose(["\n  && {\n    display: flex;\n    align-items: center;\n  }\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var RadioIcon = function RadioIcon(styleProps) {
  return css(_templateObject2$a || (_templateObject2$a = _taggedTemplateLiteralLoose(["\n  -webkit-appearance: none;\n  background-color: ", ";\n  border: 1px solid ", ";\n  border-radius: 100%;\n  height: 1em;\n  position: relative;\n  min-width: 1em;\n  width: 1em;\n  transition: box-shadow 0.1s ease-in-out 0s, border-color 0.1s, background-color 0.1s;\n\n  & {\n    ", ";\n  }\n"])), palette('default')(styleProps), palette('white900', {
    dark: 'gray700'
  })(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var RadioLabel = function RadioLabel(styleProps) {
  return css(_templateObject3$a || (_templateObject3$a = _taggedTemplateLiteralLoose(["\n  && {\n    font-weight: ", ";\n  }\n\n  & {\n    ", ";\n  }\n"])), fontWeight('normal')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var HiddenRadio = function HiddenRadio(styleProps) {
  return getHiddenInputStyles({
    iconClassName: 'bb-RadioIcon',
    checkedIconCss: css$1(_templateObject4$a || (_templateObject4$a = _taggedTemplateLiteralLoose(["\n      background: ", ";\n      border-radius: 50%;\n      content: '';\n      height: 0.5em;\n      left: 50%;\n      position: absolute;\n      top: 50%;\n      transform: translate(-50%, -50%);\n      width: 0.5em;\n    "])), palette('primary', {
      dark: 'primary300'
    })(styleProps)),
    disabledCheckedIconCss: css$1(_templateObject5$a || (_templateObject5$a = _taggedTemplateLiteralLoose(["\n      border-color: ", ";\n      background: ", ";\n    "])), palette('gray300', {
      dark: 'gray'
    })(styleProps), palette('gray300', {
      dark: 'gray'
    })(styleProps)),
    styleProps: styleProps,
    themeKey: 'Radio.Icon'
  });
};
var RadioGroup$1 = function RadioGroup(styleProps) {
  return css(_templateObject7$9 || (_templateObject7$9 = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var RadioGroupField$1 = function RadioGroupField(styleProps) {
  return css(_templateObject8$9 || (_templateObject8$9 = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$t = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var autoFocus = props.autoFocus,
      checked = props.checked,
      defaultChecked = props.defaultChecked,
      disabled = props.disabled,
      isRequired = props.isRequired,
      label = props.label,
      name = props.name,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onFocus = props.onFocus,
      overrides = props.overrides,
      radioProps = props.radioProps,
      radioRef = props.radioRef,
      state = props.state,
      value = props.value,
      restProps = _objectWithoutPropertiesLoose$4(props, ["autoFocus", "checked", "defaultChecked", "disabled", "isRequired", "label", "name", "onBlur", "onChange", "onFocus", "overrides", "radioProps", "radioRef", "state", "value"]);

  var boxProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, restProps), {}, {
    overrides: overrides
  }));
  var className = useClassName({
    style: Radio$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var radioIconClassName = useClassName({
    style: RadioIcon,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Icon'
  });
  var hiddenRadioClassName = useClassName({
    style: HiddenRadio,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'HiddenInput'
  });
  var radioLabelClassName = useClassName({
    style: RadioLabel,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Label'
  });
  var labelId = useUniqueId();
  var radioId = useUniqueId();
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    'aria-describedby': labelId,
    'aria-invalid': state === 'danger',
    'aria-required': isRequired,
    className: className,
    children: /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Box, _extends$1({
      ref: radioRef,
      use: "input",
      className: hiddenRadioClassName // @ts-ignore
      ,
      autoFocus: autoFocus,
      checked: checked,
      defaultChecked: defaultChecked,
      disabled: disabled,
      id: radioId,
      onBlur: onBlur,
      onChange: onChange,
      onFocus: onFocus,
      name: name,
      type: "radio" // @ts-ignore
      ,
      value: value,
      overrides: overrides
    }, radioProps)), /*#__PURE__*/react.createElement(Box, {
      className: radioIconClassName,
      overrides: overrides
    }), label && /*#__PURE__*/react.createElement(Label, {
      use: "span",
      id: labelId,
      className: radioLabelClassName,
      htmlFor: radioId,
      overrides: overrides,
      marginLeft: "minor-2"
    }, label))
  });
}, {
  themeKey: 'Radio'
});
var Radio = createComponent(function (props) {
  var textProps = useProps$t(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$t,
    displayName: 'Radio'
  },
  defaultProps: {
    use: 'label'
  },
  themeKey: 'Radio'
});

var useProps$s = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var defaultValue = props.defaultValue,
      disabled = props.disabled,
      orientation = props.orientation,
      onChange = props.onChange,
      options = props.options,
      overrides = props.overrides,
      name = props.name,
      spacing = props.spacing,
      state = props.state,
      value = props.value,
      restProps = _objectWithoutPropertiesLoose$4(props, ["defaultValue", "disabled", "orientation", "onChange", "options", "overrides", "name", "spacing", "state", "value"]);

  var boxProps = Box.useProps(restProps);
  var className = useClassName({
    style: RadioGroup$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({
    role: 'radiogroup'
  }, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(Set$1, {
      orientation: orientation,
      overrides: overrides,
      spacing: spacing
    }, options.map(function (option, i) {
      return /*#__PURE__*/react.createElement(Radio, _extends$1({
        key: i
      }, option, {
        checked: typeof value === 'undefined' ? undefined : option.value === value,
        defaultChecked: typeof defaultValue === 'undefined' ? undefined : option.value === defaultValue,
        name: name,
        onChange: onChange,
        overrides: overrides,
        state: state || option.state,
        disabled: disabled || option.disabled
      }));
    }))
  });
}, {
  defaultProps: {
    orientation: 'vertical',
    spacing: 'minor-2'
  },
  themeKey: 'RadioGroup'
});
var RadioGroup = createComponent(function (props) {
  var textProps = useProps$s(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$s,
    displayName: 'RadioGroup'
  },
  themeKey: 'RadioGroup'
}); ////////////////////////////////////////////////////////////////

var useRadioGroupFieldProps = createHook(function (props, _ref2) {
  var themeKey = _ref2.themeKey;

  var defaultChecked = props.defaultChecked,
      description = props.description,
      disabled = props.disabled,
      hint = props.hint,
      orientation = props.orientation,
      isOptional = props.isOptional,
      isRequired = props.isRequired,
      label = props.label,
      name = props.name,
      options = props.options,
      onChange = props.onChange,
      overrides = props.overrides,
      radioGroupProps = props.radioGroupProps,
      state = props.state,
      tooltip = props.tooltip,
      tooltipTriggerComponent = props.tooltipTriggerComponent,
      value = props.value,
      validationText = props.validationText,
      restProps = _objectWithoutPropertiesLoose$4(props, ["defaultChecked", "description", "disabled", "hint", "orientation", "isOptional", "isRequired", "label", "name", "options", "onChange", "overrides", "radioGroupProps", "state", "tooltip", "tooltipTriggerComponent", "value", "validationText"]);

  var boxProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, restProps), {}, {
    overrides: overrides
  }));
  var className = useClassName({
    style: RadioGroupField$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(FieldWrapper, {
      description: description,
      hint: hint,
      isOptional: isOptional,
      isRequired: isRequired,
      label: label,
      labelType: "legend",
      overrides: overrides,
      state: state,
      tooltip: tooltip,
      tooltipTriggerComponent: tooltipTriggerComponent,
      validationText: validationText
    }, function (_ref3) {
      var elementProps = _ref3.elementProps;
      return /*#__PURE__*/react.createElement(RadioGroup, _extends$1({
        defaultChecked: defaultChecked,
        disabled: disabled,
        orientation: orientation,
        name: name,
        options: options,
        onChange: onChange,
        overrides: overrides,
        state: state,
        value: value
      }, elementProps, radioGroupProps));
    })
  });
}, {
  themeKey: 'RadioGroupField'
});
var RadioGroupField = createComponent(function (props) {
  var radioGroupFieldProps = useRadioGroupFieldProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: radioGroupFieldProps
  });
}, {
  attach: {
    useProps: useProps$s,
    displayName: 'RadioGroupField'
  },
  defaultProps: {
    use: 'fieldset'
  },
  themeKey: 'RadioGroupField'
});

Object.assign(Radio, {
  Formik: formikField(Radio),
  ReduxForm: reduxFormField(Radio)
});
Object.assign(RadioGroup, {
  Formik: formikField(RadioGroup),
  ReduxForm: reduxFormField(RadioGroup)
});
Object.assign(RadioGroupField, {
  Formik: formikField(RadioGroupField, {
    hasFieldWrapper: true
  }),
  ReduxForm: reduxFormField(RadioGroupField, {
    hasFieldWrapper: true
  })
});

var _templateObject$a, _templateObject2$9, _templateObject3$9, _templateObject4$9, _templateObject5$9, _templateObject6$9, _templateObject7$8, _templateObject8$8;
var Rating = function Rating(styleProps) {
  return css(_templateObject$a || (_templateObject$a = _taggedTemplateLiteralLoose(["\n  align-items: center;\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var RatingItem$1 = function RatingItem(styleProps) {
  return css(_templateObject2$9 || (_templateObject2$9 = _taggedTemplateLiteralLoose(["\n  color: ", ";\n  display: inline-flex;\n  transition: color 0.1s, transform 0.2s;\n\n  ", "\n\n  ", "\n\n  &:not(:first-of-type) {\n    margin-left: ", "rem;\n  }\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), styleProps.isActive ? palette(styleProps.color)(styleProps) : palette('white900', {
    dark: 'gray800'
  })(styleProps), !styleProps.disabled && css$1(_templateObject3$9 || (_templateObject3$9 = _taggedTemplateLiteralLoose(["\n      &:hover {\n        transform: scale(1.2);\n      }\n      &:hover:active {\n        transform: scale(1.1);\n      }\n    "]))), styleProps.disabled && !styleProps.isStatic && css$1(_templateObject4$9 || (_templateObject4$9 = _taggedTemplateLiteralLoose(["\n      cursor: not-allowed;\n      opacity: 0.5;\n    "]))), space(1)(styleProps), getSizeAttributes(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};

function getSizeAttributes(styleProps) {
  var sizeAttributes = {
    small: css$1(_templateObject5$9 || (_templateObject5$9 = _taggedTemplateLiteralLoose(["\n      font-size: ", "rem;\n\n      & {\n        ", ";\n      }\n    "])), fontSize('300')(styleProps), theme(styleProps.themeKey, "styles.sizes.small")(styleProps)),
    default: css$1(_templateObject6$9 || (_templateObject6$9 = _taggedTemplateLiteralLoose(["\n      font-size: ", "rem;\n\n      & {\n        ", ";\n      }\n    "])), fontSize('400')(styleProps), theme(styleProps.themeKey, "styles.sizes.default")(styleProps)),
    medium: css$1(_templateObject7$8 || (_templateObject7$8 = _taggedTemplateLiteralLoose(["\n      font-size: ", "rem;\n\n      & {\n        ", ";\n      }\n    "])), fontSize('500')(styleProps), theme(styleProps.themeKey, "styles.sizes.medium")(styleProps)),
    large: css$1(_templateObject8$8 || (_templateObject8$8 = _taggedTemplateLiteralLoose(["\n      font-size: ", "rem;\n\n      & {\n        ", ";\n      }\n    "])), fontSize('600')(styleProps), theme(styleProps.themeKey, "styles.sizes.large")(styleProps))
  };
  return sizeAttributes[styleProps.size || 'default'];
}

var useProps$r = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var color = props.color,
      item = props.item,
      items = props.items,
      isSingular = props.isSingular,
      isStatic = props.isStatic,
      onChange = props.onChange,
      overrides = props.overrides,
      maxValue = props.maxValue,
      roverProps = props.roverProps,
      size = props.size,
      value = props.value,
      restProps = _objectWithoutPropertiesLoose$4(props, ["color", "item", "items", "isSingular", "isStatic", "onChange", "overrides", "maxValue", "roverProps", "size", "value"]);

  var flexProps = Flex.useProps(restProps);
  var rover = Rover.useState();

  var _React$useState = react.useState(-1),
      hoveringIndex = _React$useState[0],
      setHoveringIndex = _React$useState[1];

  var className = useClassName({
    style: Rating,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: flexProps.className
  });
  var disabled = props.disabled || isStatic;
  return _objectSpread2$3(_objectSpread2$3({}, flexProps), {}, {
    className: className,
    onMouseLeave: !disabled ? function () {
      return setHoveringIndex(-1);
    } : undefined,
    overrides: overrides,
    role: 'radiogroup',
    children: times$1(items ? items.length : maxValue, function (index) {
      return /*#__PURE__*/react.createElement(Rover, _extends$1({
        key: index
      }, rover, roverProps, {
        disabled: disabled
      }), function (props) {
        return /*#__PURE__*/react.createElement(RatingItem, _extends$1({}, props, {
          "aria-checked": value === index + 1,
          "aria-posinset": index + 1,
          "aria-setsize": maxValue,
          color: color,
          isActive: hoveringIndex >= 0 ? isSingular ? hoveringIndex === index : hoveringIndex >= index : isSingular ? value === index + 1 : value > index,
          isStatic: isStatic,
          onClick: !disabled ? function () {
            return onChange(index + 1);
          } : undefined,
          onMouseEnter: !disabled ? function () {
            return setHoveringIndex(index);
          } : undefined,
          overrides: overrides,
          size: size
        }), item || (items === null || items === void 0 ? void 0 : items[index]));
      });
    })
  });
}, {
  defaultProps: {
    maxValue: 5,
    value: 0
  },
  themeKey: 'Rating'
});
createComponent(function (props) {
  var ratingProps = useProps$r(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: ratingProps
  });
}, {
  attach: {
    useProps: useProps$r,
    displayName: 'Rating'
  },
  themeKey: 'Rating'
}); ////////////////////////////////////////

var useRatingItemProps = createHook(function (props, _ref2) {
  var themeKey = _ref2.themeKey;

  var children = props.children,
      color = props.color,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children", "color"]);

  var boxProps = Box.useProps(restProps);
  var className = useClassName({
    style: RatingItem$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      color: color
    }),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    role: 'radio',
    children: children
  });
}, {
  defaultProps: {
    children: /*#__PURE__*/react.createElement(Icon, {
      icon: "star"
    }),
    color: 'gold'
  },
  themeKey: 'Rating.Item'
});
var RatingItem = createComponent(function (props) {
  var ratingItemProps = useRatingItemProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: ratingItemProps
  });
}, {
  attach: {
    useProps: useProps$r,
    displayName: 'Rating.Item'
  },
  themeKey: 'Rating.Item'
});

var _templateObject$9, _templateObject2$8, _templateObject3$8, _templateObject4$8, _templateObject5$8, _templateObject6$8, _templateObject7$7, _templateObject8$7, _templateObject9$6, _templateObject10$5, _templateObject11$5, _templateObject12$4, _templateObject13$2, _templateObject14$2, _templateObject15$2, _templateObject16$2, _templateObject17$2, _templateObject18$2, _templateObject19$1, _templateObject20$1, _templateObject21$1;
var SelectMenu$1 = function SelectMenu(styleProps) {
  return css(_templateObject$9 || (_templateObject$9 = _taggedTemplateLiteralLoose(["\n  position: relative;\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SelectMenuPopover = function SelectMenuPopover(styleProps) {
  return css(_templateObject2$8 || (_templateObject2$8 = _taggedTemplateLiteralLoose(["\n  &&& {\n    max-width: 100%;\n    width: 100%;\n    max-height: ", ";\n    padding: 0;\n    display: flex;\n    flex-direction: column;\n  }\n\n  & {\n    ", ";\n  }\n"])), styleProps.popoverHeight, theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SelectMenuButtonWrapper = function SelectMenuButtonWrapper(styleProps) {
  return css(_templateObject3$8 || (_templateObject3$8 = _taggedTemplateLiteralLoose(["\n  ", ";\n\n  width: 100%;\n"])), SelectWrapper(styleProps));
};
var SelectMenuButton$1 = function SelectMenuButton(styleProps) {
  return css(_templateObject4$8 || (_templateObject4$8 = _taggedTemplateLiteralLoose(["\n  ", ";\n\n  & {\n    cursor: default;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n\n  && {\n    position: relative;\n  }\n\n  &[aria-expanded=\"true\"] {\n    position: unset;\n  }\n\n  ", "\n\n  & {\n    ", ";\n  }\n"])), Select$2(styleProps), styleProps.isSelected && css$1(_templateObject5$8 || (_templateObject5$8 = _taggedTemplateLiteralLoose(["\n      && {\n        position: unset;\n      }\n    "]))), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SelectMenuButtonIcon = function SelectMenuButtonIcon(styleProps) {
  return css(_templateObject6$8 || (_templateObject6$8 = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SelectMenuClearButtonWrapper = function SelectMenuClearButtonWrapper(styleProps) {
  return css(_templateObject7$7 || (_templateObject7$7 = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SelectMenuClearButton = function SelectMenuClearButton(styleProps) {
  return css(_templateObject8$7 || (_templateObject8$7 = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SelectMenuButtonIconsWrapper = function SelectMenuButtonIconsWrapper(styleProps) {
  return css(_templateObject9$6 || (_templateObject9$6 = _taggedTemplateLiteralLoose(["\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  min-width: 4rem;\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SelectMenuButtonText = function SelectMenuButtonText(styleProps) {
  return css(_templateObject10$5 || (_templateObject10$5 = _taggedTemplateLiteralLoose(["\n  color: ", ";\n  max-width: calc(100% - 4rem);\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  & {\n    ", ";\n  }\n"])), palette(styleProps.color)(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SelectMenuStaticItem$1 = function SelectMenuStaticItem(styleProps) {
  return css(_templateObject11$5 || (_templateObject11$5 = _taggedTemplateLiteralLoose(["\n  padding: ", "rem ", "rem;\n  width: 100%;\n\n  & {\n    ", ";\n  }\n"])), space(1.5)(styleProps), space(4)(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SelectMenuItem$1 = function SelectMenuItem(styleProps) {
  return css(_templateObject12$4 || (_templateObject12$4 = _taggedTemplateLiteralLoose(["\n  &&& {\n    font-weight: 300;\n\n    &[aria-selected=\"true\"] {\n      background-color: ", ";\n      color: ", ";\n\n      &:hover {\n        background-color: ", ";\n      }\n\n      ", "\n    }\n\n    &[aria-disabled=\"true\"] {\n      color: ", ";\n    }\n  }\n\n  & {\n    ", ";\n  }\n"])), palette('primaryTint')(styleProps), palette('primary900')(styleProps), darken(0.01, 'primaryTint')(styleProps), styleProps.tabIndex === 0 && css$1(_templateObject13$2 || (_templateObject13$2 = _taggedTemplateLiteralLoose(["\n          background-color: ", ";\n        "])), darken(0.01, 'primaryTint')(styleProps)), palette('gray100')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SelectMenuItemText = function SelectMenuItemText(styleProps) {
  return css(_templateObject14$2 || (_templateObject14$2 = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SelectMenuItemsWrapper = function SelectMenuItemsWrapper(styleProps) {
  return css(_templateObject15$2 || (_templateObject15$2 = _taggedTemplateLiteralLoose(["\n  &&& {\n    padding: ", "rem 0;\n    overflow-y: scroll;\n\n    ", ";\n  }\n\n  & {\n    ", ";\n  }\n"])), space(2)(styleProps), getHiddenScrollbarStyles(), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SelectMenuSearchInputWrapper = function SelectMenuSearchInputWrapper(styleProps) {
  return css(_templateObject16$2 || (_templateObject16$2 = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SelectMenuSearchInput$1 = function SelectMenuSearchInput(styleProps) {
  return css(_templateObject17$2 || (_templateObject17$2 = _taggedTemplateLiteralLoose(["\n  & > input {\n    border-color: transparent;\n    border-bottom-color: ", ";\n    border-bottom-left-radius: 0px;\n    border-bottom-right-radius: 0px;\n  }\n\n  & {\n    ", ";\n  }\n"])), palette('white800')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SelectMenuTagsWrapper = function SelectMenuTagsWrapper(styleProps) {
  return css(_templateObject18$2 || (_templateObject18$2 = _taggedTemplateLiteralLoose(["\n  background: ", ";\n  border-bottom: 1px solid ", ";\n  padding: ", "rem;\n\n  & {\n    ", ";\n  }\n"])), palette('white600')(styleProps), palette('white800')(styleProps), space(2)(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SelectMenuField$1 = function SelectMenuField(styleProps) {
  return css(_templateObject19$1 || (_templateObject19$1 = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SelectMenuLabelWrapper = function SelectMenuLabelWrapper(styleProps) {
  return css(_templateObject20$1 || (_templateObject20$1 = _taggedTemplateLiteralLoose(["\n  ", ";\n"])), LabelWrapper(styleProps));
};
var SelectMenuLabelWrapperBackground = function SelectMenuLabelWrapperBackground(styleProps) {
  return css(_templateObject21$1 || (_templateObject21$1 = _taggedTemplateLiteralLoose(["\n  ", ";\n"])), LabelWrapperBackground(styleProps));
};

var _templateObject$8, _templateObject2$7, _templateObject3$7, _templateObject4$7, _templateObject5$7, _templateObject6$7, _templateObject7$6, _templateObject8$6, _templateObject9$5;
var Tag$1 = function Tag(styleProps) {
  return css(_templateObject$8 || (_templateObject$8 = _taggedTemplateLiteralLoose(["\n  align-items: center;\n  background-color: ", ";\n  border-radius: ", ";\n  color: ", ";\n  display: inline-flex;\n  fill: ", ";\n  font-size: ", "rem;\n  font-weight: ", ";\n  height: 1.5rem;\n  justify-content: center;\n\n  ", "\n  ", "\n  ", "\n\n  & {\n    ", ";\n  }\n"])), palette(styleProps.palette, {
    dark: styleProps.palette === 'text' ? 'gray900' : styleProps.palette
  })(styleProps), borderRadius('default')(styleProps), palette(styleProps.palette + "Inverted")(styleProps), palette(styleProps.palette + "Inverted")(styleProps), fontSize('100')(styleProps), fontWeight('semibold')(styleProps), styleProps.variant === 'outlined' && outlinedProperties(styleProps), styleProps.variant === 'tint' && tintProperties(styleProps), styleProps.size && sizeProperties(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var TagContent = function TagContent(styleProps) {
  return css(_templateObject2$7 || (_templateObject2$7 = _taggedTemplateLiteralLoose(["\n  align-items: center;\n  height: inherit;\n  padding: 0 ", "em;\n\n  & {\n    ", ";\n  }\n"])), space(3)(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var TagClose = function TagClose(styleProps) {
  return css(_templateObject3$7 || (_templateObject3$7 = _taggedTemplateLiteralLoose(["\n  &&& {\n    background-color: ", ";\n    color: ", ";\n    fill: ", ";\n    height: 1.5em;\n    padding: 0 ", "em;\n    margin-right: ", "em;\n    margin-left: -", "em;\n\n    &:hover {\n      background-color: ", ";\n    }\n\n    &:focus {\n      box-shadow: unset;\n    }\n\n    ", "\n\n    & {\n      ", ";\n    }\n  }\n"])), palette(styleProps.palette)(styleProps), palette(styleProps.palette + "Inverted")(styleProps), palette(styleProps.palette + "Inverted")(styleProps), space(1)(styleProps), space(1)(styleProps), space(1)(styleProps), darken(0.1, styleProps.palette)(styleProps), styleProps.variant === 'outlined' && css$1(_templateObject4$7 || (_templateObject4$7 = _taggedTemplateLiteralLoose(["\n        background-color: unset;\n        color: ", ";\n\n        &:hover {\n          background-color: ", ";\n        }\n      "])), palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps), palette('white700')(styleProps)), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var outlinedProperties = function outlinedProperties(styleProps) {
  return css(_templateObject5$7 || (_templateObject5$7 = _taggedTemplateLiteralLoose(["\n  & {\n    background-color: unset;\n    border: 1px solid ", ";\n    color: ", ";\n    fill: ", ";\n  }\n  & {\n    ", ";\n  }\n"])), palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps), palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps), palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps), theme(styleProps.themeKey, "styles.outlined")(styleProps));
};
var tintProperties = function tintProperties(styleProps) {
  return css(_templateObject6$7 || (_templateObject6$7 = _taggedTemplateLiteralLoose(["\n  & {\n    background-color: ", ";\n    color: ", ";\n    fill: ", ";\n  }\n  & {\n    ", ";\n  }\n"])), palette(styleProps.palette + "Tint", {
    dark: styleProps.palette === 'text' ? 'gray900' : styleProps.palette + "Shade"
  })(styleProps), palette(styleProps.palette + "TintInverted", {
    dark: styleProps.palette === 'text' ? 'white' : styleProps.palette + "ShadeInverted"
  })(styleProps), palette(styleProps.palette + "TintInverted", {
    dark: styleProps.palette === 'text' ? 'white' : styleProps.palette + "ShadeInverted"
  })(styleProps), theme(styleProps.themeKey, "styles.outlined")(styleProps));
};
var sizeProperties = function sizeProperties(styleProps) {
  var sizes = {
    default: css(_templateObject7$6 || (_templateObject7$6 = _taggedTemplateLiteralLoose(["\n    & {\n      ", ";\n    }\n  "])), theme(styleProps.themeKey, "styles.sizes.default")(styleProps)),
    medium: css(_templateObject8$6 || (_templateObject8$6 = _taggedTemplateLiteralLoose(["\n    font-size: 1em;\n    height: 2rem;\n    & {\n      ", ";\n    }\n  "])), theme(styleProps.themeKey, "styles.sizes.medium")(styleProps)),
    large: css(_templateObject9$5 || (_templateObject9$5 = _taggedTemplateLiteralLoose(["\n    font-size: 1.25em;\n    height: 2.5rem;\n    & {\n      ", ";\n    }\n  "])), theme(styleProps.themeKey, "styles.sizes.large")(styleProps))
  };
  return sizes[styleProps.size];
};

var useProps$q = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var children = props.children,
      onRemove = props.onRemove,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children", "onRemove"]);

  var boxProps = Box.useProps(restProps);
  var className = useClassName({
    style: Tag$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var tagContentClassName = useClassName({
    style: TagContent,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Content'
  });
  var tagCloseClassName = useClassName({
    style: TagClose,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Close'
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Flex, {
      className: tagContentClassName
    }, children), onRemove && /*#__PURE__*/react.createElement(Button.Close, {
      className: tagCloseClassName,
      onClick: onRemove,
      iconProps: {
        fontSize: '200'
      }
    }))
  });
}, {
  themeKey: 'Tag',
  defaultProps: {
    palette: 'text',
    size: 'default'
  }
});
var Tag = createComponent(function (props) {
  var textProps = useProps$q(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$q,
    displayName: 'Tag'
  },
  themeKey: 'Tag'
});

var useProps$p = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var isDropdown = props.isDropdown,
      restProps = _objectWithoutPropertiesLoose$4(props, ["isDropdown"]);

  var MenuItem$1 = isDropdown ? DropdownMenuItem : MenuItem;
  var dropdownMenuItemProps = MenuItem$1.useProps(restProps);
  var className = useClassName({
    style: SelectMenuItem$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, dropdownMenuItemProps), props),
    themeKey: themeKey,
    prevClassName: dropdownMenuItemProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, dropdownMenuItemProps), {}, {
    className: className
  });
}, {
  defaultProps: {
    isDropdown: true,
    role: 'option'
  },
  themeKey: 'SelectMenu.Item'
});
var SelectMenuItem = createComponent(function (props) {
  var textProps = useProps$p(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$p,
    displayName: 'SelectMenu.Item'
  },
  defaultProps: {
    use: 'li'
  },
  themeKey: 'SelectMenu.Item'
});

var useProps$o = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var className = useClassName({
    style: SelectMenuStaticItem$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'SelectMenu.StaticItem'
});
var SelectMenuStaticItem = createComponent(function (props) {
  var textProps = useProps$o(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$o,
    displayName: 'SelectMenu.StaticItem'
  },
  themeKey: 'SelectMenu.StaticItem'
});

var SelectMenuContext = react.createContext({});

function reducer(state, event) {
  switch (event.type) {
    case 'VALUE_CHANGE':
      {
        return _objectSpread2$3(_objectSpread2$3({}, state), {}, {
          page: 1,
          selectedOptions: event.value ? Array.isArray(event.value) ? event.value : [event.value] : []
        });
      }

    case 'INPUT_CHANGE':
      {
        return _objectSpread2$3(_objectSpread2$3({}, state), {}, {
          page: 1,
          searchText: event.searchText
        });
      }

    case 'OPTIONS_SET':
      {
        return _objectSpread2$3(_objectSpread2$3({}, state), {}, {
          options: event.options
        });
      }

    case 'OPTIONS_FILTERED':
      {
        return _objectSpread2$3(_objectSpread2$3({}, state), {}, {
          filteredOptions: event.filteredOptions
        });
      }

    case 'PAGE_INCREMENT':
      {
        return _objectSpread2$3(_objectSpread2$3({}, state), {}, {
          page: state.page + 1
        });
      }

    default:
      {
        return state;
      }
  }
}

var useProps$n = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var buttonProps = props.buttonProps,
      cacheKey = props.cacheKey,
      disabled = props.disabled,
      disableClear = props.disableClear,
      dropdownMenuInitialState = props.dropdownMenuInitialState,
      emptyText = props.emptyText,
      errorText = props.errorText,
      loadingText = props.loadingText,
      loadingMoreText = props.loadingMoreText,
      popoverProps = props.popoverProps,
      hasSearch = props.hasSearch,
      hasTags = props.hasTags,
      itemProps = props.itemProps,
      isDropdown = props.isDropdown,
      isLoading = props.isLoading,
      isMultiSelect = props.isMultiSelect,
      label = props.label,
      limit = props.limit,
      loadOptions = props.loadOptions,
      loadVariables = props.loadVariables,
      initialOptions = props.options,
      overrides = props.overrides,
      pagination = props.pagination,
      renderDisclosure = props.renderDisclosure,
      Empty = props.renderEmpty,
      Error = props.renderError,
      Loading = props.renderLoading,
      LoadingMore = props.renderLoadingMore,
      Option = props.renderOption,
      searchInputProps = props.searchInputProps,
      placeholder = props.placeholder,
      fieldState = props.state,
      size = props.size,
      tagProps = props.tagProps,
      value = props.value,
      variant = props.variant,
      restProps = _objectWithoutPropertiesLoose$4(props, ["buttonProps", "cacheKey", "disabled", "disableClear", "dropdownMenuInitialState", "emptyText", "errorText", "loadingText", "loadingMoreText", "popoverProps", "hasSearch", "hasTags", "itemProps", "isDropdown", "isLoading", "isMultiSelect", "label", "limit", "loadOptions", "loadVariables", "options", "overrides", "pagination", "renderDisclosure", "renderEmpty", "renderError", "renderLoading", "renderLoadingMore", "renderOption", "searchInputProps", "placeholder", "state", "size", "tagProps", "value", "variant"]); /////////////////////////////////////////////////


  var boxProps = Box.useProps(restProps); //////////////////////////////////////////////////

  var buttonRef = react.useRef(); //////////////////////////////////////////////////

  var dropdownMenu = DropdownMenu.useState(_objectSpread2$3({
    loop: true,
    gutter: 4
  }, dropdownMenuInitialState)); //////////////////////////////////////////////////

  var _React$useState = react.useState(false),
      blockLoad = _React$useState[0],
      setBlockLoad = _React$useState[1];

  var _React$useState2 = react.useState(props.defer || !loadOptions),
      defer = _React$useState2[0],
      setDefer = _React$useState2[1]; //////////////////////////////////////////////////


  var _useLabelPlaceholder = useLabelPlaceholder(_objectSpread2$3({
    enabled: Boolean(label),
    useValue: true,
    onBlur: null,
    onFocus: null
  }, props)),
      isFocused = _useLabelPlaceholder.isFocused,
      _useLabelPlaceholder$ = _useLabelPlaceholder.inputProps,
      onBlur = _useLabelPlaceholder$.onBlur,
      onChange = _useLabelPlaceholder$.onChange,
      onFocus = _useLabelPlaceholder$.onFocus; //////////////////////////////////////////////////


  var className = useClassName({
    style: SelectMenu$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var wrapperClassName = useClassName({
    style: SelectMenuButtonWrapper,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'ButtonWrapper'
  });
  var dropdownMenuPopoverClassName = useClassName({
    style: SelectMenuPopover,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Popover'
  });
  var selectMenuItemsWrapperClassName = useClassName({
    style: SelectMenuItemsWrapper,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'ItemsWrapper'
  });
  var labelWrapperClassName = useClassName({
    style: SelectMenuLabelWrapper,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      isFocused: isFocused || dropdownMenu.visible
    }),
    themeKey: themeKey,
    themeKeySuffix: 'LabelWrapper'
  });
  var labelWrapperBackgroundClassName = useClassName({
    style: SelectMenuLabelWrapperBackground,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      isFocused: isFocused || dropdownMenu.visible
    }),
    themeKey: themeKey,
    themeKeySuffix: 'LabelWrapperBackground'
  }); //////////////////////////////////////////////////

  var _React$useReducer = react.useReducer(reducer, {
    searchText: '',
    filteredOptions: initialOptions,
    options: initialOptions,
    page: 1,
    selectedOptions: []
  }),
      _React$useReducer$ = _React$useReducer[0],
      searchText = _React$useReducer$.searchText,
      filteredOptions = _React$useReducer$.filteredOptions,
      options = _React$useReducer$.options,
      page = _React$useReducer$.page,
      selectedOptions = _React$useReducer$.selectedOptions;
      _React$useReducer$.selectedIndexes;
      var dispatch = _React$useReducer[1];

  react.useEffect(function () {
    dispatch({
      type: 'OPTIONS_SET',
      options: initialOptions
    });
    dispatch({
      type: 'OPTIONS_FILTERED',
      filteredOptions: initialOptions
    });
  }, [initialOptions]); //////////////////////////////////////////////////

  var debouncedInputValue = useDebounce(searchText, 500);
  var getOptions = react.useCallback( /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref2) {
      var loadVariables, page, _ref2$searchText, searchText;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              loadVariables = _ref2.loadVariables, page = _ref2.page, _ref2$searchText = _ref2.searchText, searchText = _ref2$searchText === void 0 ? '' : _ref2$searchText;

              if (!(typeof loadOptions === 'function')) {
                _context.next = 5;
                break;
              }

              if (!blockLoad) {
                _context.next = 4;
                break;
              }

              return _context.abrupt("return", new Promise(function (res) {
                return res({
                  options: options
                });
              }));

            case 4:
              return _context.abrupt("return", loadOptions({
                page: page,
                searchText: searchText,
                variables: loadVariables
              }).then(function (_ref4) {
                var fetchedOptions = _ref4.options;
                var newOptions = [].concat(options, fetchedOptions);

                if (page === 1) {
                  newOptions = fetchedOptions;
                }

                if (page > 1 && fetchedOptions.length === 0) {
                  setBlockLoad(true);
                }

                return {
                  options: newOptions
                };
              }));

            case 5:
              return _context.abrupt("return", new Promise(function (res) {
                return res(undefined);
              }));

            case 6:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }(), [blockLoad, loadOptions, options]);
  var optionsRecord = useLoads(cacheKey, getOptions, {
    defer: defer,
    variables: [{
      loadVariables: loadVariables,
      page: page,
      searchText: debouncedInputValue
    }]
  }); //////////////////////////////////////////////////

  var visibleOptions = react.useMemo(function () {
    return filteredOptions.slice(0, limit).filter(function (option) {
      if (!option) return false;

      if (hasTags) {
        return !selectedOptions.includes(option);
      }

      return true;
    });
  }, [filteredOptions, hasTags, limit, selectedOptions]); //////////////////////////////////////////////////

  var isLoadingMore = loadOptions && (optionsRecord.isPending || optionsRecord.isIdle) && page > 1;
  var state = 'empty';

  if (visibleOptions.length > 0 || loadOptions && (optionsRecord.isResolved && visibleOptions.length > 0 || isLoadingMore)) {
    state = 'success';
  } else if (isLoading || loadOptions && (optionsRecord.isPending || optionsRecord.isIdle) && page === 1) {
    state = 'loading';
  } else if (loadOptions && optionsRecord.isRejected) {
    state = 'error';
  } //////////////////////////////////////////////////


  var filterOptions = react.useCallback(function (_ref5) {
    var searchText = _ref5.searchText;
    if (loadOptions) return;
    var filteredOptions = options.filter(function (option) {
      return option.label.toLowerCase().includes(searchText.trim().toLowerCase());
    });
    dispatch({
      type: 'OPTIONS_FILTERED',
      filteredOptions: filteredOptions
    });
    return filteredOptions;
  }, [loadOptions, options]); //////////////////////////////////////////////////

  var handleClickItem = react.useCallback(function (_ref6) {
    var option = _ref6.option;
    return function () {
      if (isMultiSelect) {
        var _newOptions = [];

        if (selectedOptions.some(function (selectedOption) {
          return selectedOption.key === option.key;
        })) {
          _newOptions = selectedOptions.filter(function (selectedOption) {
            return option.key !== selectedOption.key;
          });
        } else {
          _newOptions = [].concat(selectedOptions, [option]);
        }

        onChange && onChange(_newOptions, option);
      } else {
        var _newOptions2 = selectedOptions;

        if (!selectedOptions.includes(option)) {
          _newOptions2 = option;
        } else if (!disableClear) {
          _newOptions2 = '';
        }

        onChange && onChange(_newOptions2, _newOptions2);
      }
    };
  }, [disableClear, isMultiSelect, onChange, selectedOptions]);
  var handleClickButton = react.useCallback(function () {
    if (defer) {
      setDefer(false);
      optionsRecord.load();
    }

    onFocus({});
  }, [defer, optionsRecord]); // eslint-disable-line

  var handleChangeInput = react.useCallback(function (event) {
    var searchText = event.target.value || '';
    setBlockLoad(false);
    dispatch({
      type: 'INPUT_CHANGE',
      searchText: searchText
    });
    filterOptions({
      searchText: searchText
    });
  }, [filterOptions]);
  var handleClearTag = react.useCallback(function (_ref7) {
    var option = _ref7.option;
    handleClickItem({
      option: option
    })();
  }, [handleClickItem]);
  var handleClearOptions = react.useCallback(function (e) {
    e.stopPropagation();
    dispatch({
      type: 'VALUE_CHANGE',
      value: ''
    });
    onChange && onChange('', '');
  }, [onChange]);
  var handleScrollPopover = react.useCallback(function (event) {
    var target = event.currentTarget;

    if (pagination && !isLoadingMore && !blockLoad && target.scrollHeight > target.offsetHeight && target.scrollHeight - target.offsetHeight - target.scrollTop <= 200) {
      dispatch({
        type: 'PAGE_INCREMENT'
      });
    }

    return;
  }, [blockLoad, isLoadingMore, pagination]); //////////////////////////////////////////////////

  react.useEffect(function () {
    dispatch({
      type: 'VALUE_CHANGE',
      value: value
    });
  }, [value]);
  react.useEffect(function () {
    if (!dropdownMenu.visible) {
      handleChangeInput({
        target: {
          value: ''
        }
      });
      onBlur({});
    }
  }, [dropdownMenu.visible, handleChangeInput]); // eslint-disable-line

  react.useEffect(function () {
    if (loadOptions && optionsRecord.isResolved) {
      var _optionsRecord$respon, _optionsRecord$respon2;

      var _options = (_optionsRecord$respon = (_optionsRecord$respon2 = optionsRecord.response) === null || _optionsRecord$respon2 === void 0 ? void 0 : _optionsRecord$respon2.options) !== null && _optionsRecord$respon !== void 0 ? _optionsRecord$respon : [];

      dispatch({
        type: 'OPTIONS_SET',
        options: _options
      });
      dispatch({
        type: 'OPTIONS_FILTERED',
        filteredOptions: _options
      });
    }
  }, [loadOptions, optionsRecord.isResolved, optionsRecord.response]); //////////////////////////////////////////////////

  var context = react.useMemo(function () {
    return {
      dropdownMenu: dropdownMenu,
      overrides: overrides,
      themeKey: themeKey
    };
  }, [dropdownMenu, overrides, themeKey]); //////////////////////////////////////////////////

  var EmptyStaticItem = react.useCallback(function (props) {
    return /*#__PURE__*/react.createElement(SelectMenuStaticItem, _extends$1({}, dropdownMenu, props, {
      onClick: function onClick(e) {
        props.onClick && props.onClick(e);
        dropdownMenu.hide();
      }
    }));
  }, [] // eslint-disable-line
  );
  var EmptyItem = react.useCallback(function (props) {
    return /*#__PURE__*/react.createElement(SelectMenuItem, _extends$1({
      isDropdown: isDropdown
    }, dropdownMenu, props, {
      onClick: function onClick(e) {
        props.onClick && props.onClick(e);
        dropdownMenu.hide();
      }
    }));
  }, [] // eslint-disable-line
  ); //////////////////////////////////////////////////

  var MenuWrapper = isDropdown ? DropdownMenuPopover : Menu; //////////////////////////////////////////////////

  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(SelectMenuContext.Provider, {
      value: context
    }, isDropdown && /*#__PURE__*/react.createElement(Box, {
      className: wrapperClassName
    }, label && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Box, {
      className: labelWrapperBackgroundClassName
    }, /*#__PURE__*/react.createElement(Text, {
      opacity: "0"
    }, label)), /*#__PURE__*/react.createElement(Box, {
      className: labelWrapperClassName,
      onClick: function onClick() {
        var _buttonRef$current;

        return (_buttonRef$current = buttonRef.current) === null || _buttonRef$current === void 0 ? void 0 : _buttonRef$current.focus();
      }
    }, /*#__PURE__*/react.createElement(Text, null, label))), /*#__PURE__*/react.createElement(SelectMenuButton, _extends$1({
      elementRef: buttonRef,
      disabled: disabled,
      disableClear: disableClear,
      isLoading: isLoading,
      onClick: handleClickButton,
      onClear: handleClearOptions,
      placeholder: placeholder,
      renderDisclosure: renderDisclosure,
      selectedOptions: selectedOptions,
      size: size,
      state: fieldState,
      variant: variant,
      value: value
    }, buttonProps))), /*#__PURE__*/react.createElement(MenuWrapper, _extends$1({}, dropdownMenu, {
      className: dropdownMenuPopoverClassName,
      overrides: overrides,
      role: "listbox"
    }, popoverProps), !isDropdown || dropdownMenu.visible ? /*#__PURE__*/react.createElement(react.Fragment, null, hasSearch && /*#__PURE__*/react.createElement(SelectMenuSearchInput, {
      onChange: handleChangeInput,
      value: searchText,
      searchInputProps: searchInputProps,
      autoFocus: isDropdown
    }), hasTags && selectedOptions.length > 0 && /*#__PURE__*/react.createElement(SelectMenuTags, {
      onClearTag: handleClearTag,
      selectedOptions: selectedOptions,
      tagProps: tagProps
    }), /*#__PURE__*/react.createElement(Box, {
      use: "ul",
      className: selectMenuItemsWrapperClassName,
      onScroll: handleScrollPopover,
      overrides: overrides
    }, state === 'success' && /*#__PURE__*/react.createElement(react.Fragment, null, visibleOptions.map(function (option, index) {
      return /*#__PURE__*/react.createElement(SelectMenuItem, _extends$1({
        key: option.key || index
      }, dropdownMenu, {
        "aria-selected": selectedOptions.some(function (selectedOption) {
          return selectedOption.key === option.key;
        }),
        "aria-disabled": option.disabled,
        disabled: option.disabled,
        iconAfter: option.iconAfter,
        iconAfterProps: option.iconAfterProps,
        iconBefore: option.iconBefore,
        iconBeforeProps: option.iconBeforeProps,
        isDropdown: isDropdown,
        hideOnClick: !isMultiSelect,
        onClick: handleClickItem({
          index: index,
          option: option
        }),
        overrides: overrides
      }, itemProps), /*#__PURE__*/react.createElement(Option, {
        label: option.label,
        searchText: searchText,
        option: option,
        overrides: overrides,
        MatchedLabel: function MatchedLabel(props) {
          return /*#__PURE__*/react.createElement(_MatchedLabel, _extends$1({
            label: option.label,
            searchText: searchText
          }, props));
        }
      }));
    }), isLoadingMore && /*#__PURE__*/react.createElement(LoadingMore, {
      loadingText: loadingMoreText,
      overrides: overrides
    })), state === 'loading' && /*#__PURE__*/react.createElement(Loading, {
      loadingText: loadingText,
      overrides: overrides
    }), state === 'empty' && /*#__PURE__*/react.createElement(Empty, {
      emptyText: emptyText,
      searchText: searchText,
      overrides: overrides,
      StaticItem: EmptyStaticItem,
      Item: EmptyItem
    }), state === 'error' && /*#__PURE__*/react.createElement(Error, {
      errorText: errorText,
      overrides: overrides
    }))) : null))
  });
}, {
  defaultProps: {
    cacheKey: 'bb-options',
    disabled: false,
    emptyText: 'No results found',
    errorText: 'An error occurred',
    isDropdown: true,
    loadingText: 'Loading...',
    loadingMoreText: 'Loading...',
    options: [],
    popoverHeight: '300px',
    renderEmpty: Empty,
    renderError: Error$1,
    renderLoading: Loading,
    renderLoadingMore: Loading,
    renderOption: _MatchedLabel,
    variant: 'bordered'
  },
  themeKey: 'SelectMenu'
});
var SelectMenu = createComponent(function (props) {
  var selectMenuProps = useProps$n(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: selectMenuProps
  });
}, {
  attach: {
    useProps: useProps$n,
    displayName: 'SelectMenu'
  },
  themeKey: 'SelectMenu'
}); //////////////////////////////////////////////////////////////////

function SelectMenuButton(props) {
  var disabled = props.disabled,
      disableClear = props.disableClear,
      elementRef = props.elementRef,
      isLoading = props.isLoading,
      onClick = props.onClick,
      onClear = props.onClear,
      renderDisclosure = props.renderDisclosure,
      selectedOptions = props.selectedOptions,
      placeholder = props.placeholder,
      variant = props.variant,
      restProps = _objectWithoutPropertiesLoose$4(props, ["disabled", "disableClear", "elementRef", "isLoading", "onClick", "onClear", "renderDisclosure", "selectedOptions", "placeholder", "variant"]);

  var _React$useContext = react.useContext(SelectMenuContext),
      dropdownMenu = _React$useContext.dropdownMenu,
      overrides = _React$useContext.overrides,
      themeKey = _React$useContext.themeKey;

  var color = 'text';

  if (!selectedOptions || selectedOptions.length === 0) {
    color = 'gray300';
  }

  var buttonClassName = useClassName({
    style: SelectMenuButton$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: overrides,
      disabled: disabled,
      variant: variant,
      isSelected: selectedOptions.length > 0
    }),
    themeKey: themeKey,
    themeKeySuffix: 'Button'
  });
  var buttonTextClassName = useClassName({
    style: SelectMenuButtonText,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      color: color,
      overrides: overrides
    }),
    themeKey: themeKey,
    themeKeySuffix: 'ButtonText'
  });
  var iconsWrapperClassName = useClassName({
    style: SelectMenuButtonIconsWrapper,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: overrides
    }),
    themeKey: themeKey,
    themeKeySuffix: 'ButtonIconsWrapper'
  });
  var iconClassName = useClassName({
    style: SelectMenuButtonIcon,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: overrides
    }),
    themeKey: themeKey,
    themeKeySuffix: 'ButtonIcon'
  });
  var dropdownMenuButtonProps = DropdownMenuButton.useProps(_objectSpread2$3(_objectSpread2$3({}, dropdownMenu), {}, {
    'aria-haspopup': 'listbox',
    elementRef: elementRef,
    disabled: disabled,
    onClick: onClick,
    overrides: overrides
  }, restProps));
  var label = placeholder;

  if (selectedOptions.length === 1) {
    var _selectedOptions$;

    label = selectedOptions === null || selectedOptions === void 0 ? void 0 : (_selectedOptions$ = selectedOptions[0]) === null || _selectedOptions$ === void 0 ? void 0 : _selectedOptions$.label;
  }

  if (selectedOptions.length > 1) {
    var _selectedOptions$2;

    label = (selectedOptions === null || selectedOptions === void 0 ? void 0 : (_selectedOptions$2 = selectedOptions[0]) === null || _selectedOptions$2 === void 0 ? void 0 : _selectedOptions$2.label) + " + " + (selectedOptions.length - 1) + " other" + (selectedOptions.length - 1 > 1 ? 's' : '');
  }

  if (renderDisclosure) {
    return renderDisclosure({
      disclosureProps: dropdownMenuButtonProps,
      disabled: disabled,
      disableClear: disableClear,
      isLoading: isLoading,
      label: label,
      selectedOptions: selectedOptions,
      onClear: onClear,
      placeholder: placeholder
    });
  }

  return /*#__PURE__*/react.createElement(Box, _extends$1({}, dropdownMenuButtonProps, {
    className: buttonClassName
  }), /*#__PURE__*/react.createElement(Box, {
    className: buttonTextClassName
  }, label), /*#__PURE__*/react.createElement(Box, {
    className: iconsWrapperClassName
  }, /*#__PURE__*/react.createElement(Set$1, null, !disableClear && selectedOptions.length > 0 && /*#__PURE__*/react.createElement(ClearButton, {
    onClick: onClear
  }), isLoading ? /*#__PURE__*/react.createElement(Spinner, {
    color: "text",
    size: "small"
  }) : /*#__PURE__*/react.createElement(Icon, {
    className: iconClassName,
    icon: "chevron-down"
  }))));
} //////////////////////////////////////////////////////////////////


function SelectMenuSearchInput(props) {
  var autoFocus = props.autoFocus,
      onChange = props.onChange,
      searchInputProps = props.searchInputProps,
      value = props.value,
      restProps = _objectWithoutPropertiesLoose$4(props, ["autoFocus", "onChange", "searchInputProps", "value"]);

  var _React$useContext2 = react.useContext(SelectMenuContext),
      overrides = _React$useContext2.overrides,
      themeKey = _React$useContext2.themeKey;

  var searchInputWrapperClassName = useClassName({
    style: SelectMenuSearchInputWrapper,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: overrides
    }),
    themeKey: themeKey,
    themeKeySuffix: 'SearchInputWrapper'
  });
  var searchInputClassName = useClassName({
    style: SelectMenuSearchInput$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: overrides
    }),
    themeKey: themeKey,
    themeKeySuffix: 'SearchInput'
  });
  return /*#__PURE__*/react.createElement(Box, _extends$1({
    className: searchInputWrapperClassName
  }, restProps), /*#__PURE__*/react.createElement(Input, _extends$1({
    className: searchInputClassName,
    onChange: onChange,
    overrides: overrides,
    placeholder: "Type to search...",
    value: value,
    autoFocus: autoFocus
  }, searchInputProps)));
} //////////////////////////////////////////////////////////////////


function SelectMenuTags(props) {
  var onClearTag = props.onClearTag,
      selectedOptions = props.selectedOptions,
      tagProps = props.tagProps,
      restProps = _objectWithoutPropertiesLoose$4(props, ["onClearTag", "selectedOptions", "tagProps"]);

  var _React$useContext3 = react.useContext(SelectMenuContext),
      overrides = _React$useContext3.overrides,
      themeKey = _React$useContext3.themeKey;

  var tagsWrapperClassName = useClassName({
    style: SelectMenuTagsWrapper,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: overrides
    }),
    themeKey: themeKey,
    themeKeySuffix: 'TagsWrapper'
  });
  return /*#__PURE__*/react.createElement(Box, _extends$1({
    className: tagsWrapperClassName
  }, restProps), /*#__PURE__*/react.createElement(Set$1, {
    spacing: "minor-1",
    overrides: overrides
  }, selectedOptions.map(function (option) {
    return /*#__PURE__*/react.createElement(Tag, _extends$1({
      key: option.key,
      palette: "primaryTint",
      onRemove: function onRemove() {
        return onClearTag({
          option: option
        });
      },
      overrides: overrides
    }, tagProps), option.label);
  })));
} //////////////////////////////////////////////////////////////////


function _MatchedLabel(props) {
  var label = props.label,
      searchText = props.searchText,
      restProps = _objectWithoutPropertiesLoose$4(props, ["label", "searchText"]);

  var _React$useContext4 = react.useContext(SelectMenuContext),
      overrides = _React$useContext4.overrides,
      themeKey = _React$useContext4.themeKey;

  var className = useClassName({
    style: SelectMenuItemText,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'ItemText'
  });

  var escapeStringRegexp = function escapeStringRegexp(string) {
    return string.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&');
  };

  var match = label.match(new RegExp(escapeStringRegexp(searchText), 'i')) || [];
  var preText = label.slice(0, match.index);
  var highlightedText = match[0];
  var postText = label.slice(match.index + (match[0] || '').length);
  return highlightedText ? /*#__PURE__*/react.createElement(Text, _extends$1({
    className: className,
    overrides: overrides
  }, restProps), preText && /*#__PURE__*/react.createElement(Text, {
    overrides: overrides
  }, preText), highlightedText && /*#__PURE__*/react.createElement(Text, {
    fontWeight: "semibold",
    overrides: overrides
  }, highlightedText), postText && /*#__PURE__*/react.createElement(Text, {
    overrides: overrides
  }, postText)) : /*#__PURE__*/react.createElement(Text, _extends$1({
    className: className,
    overrides: overrides
  }, restProps), label);
} //////////////////////////////////////////////////////////////////


function Empty(props) {
  var emptyText = props.emptyText,
      overrides = props.overrides,
      restProps = _objectWithoutPropertiesLoose$4(props, ["emptyText", "overrides"]);

  return /*#__PURE__*/react.createElement(SelectMenuStaticItem, _extends$1({
    overrides: overrides
  }, restProps), emptyText);
} //////////////////////////////////////////////////////////////////


function Loading(props) {
  var loadingText = props.loadingText,
      overrides = props.overrides,
      restProps = _objectWithoutPropertiesLoose$4(props, ["loadingText", "overrides"]);

  return /*#__PURE__*/react.createElement(SelectMenuStaticItem, _extends$1({
    display: "flex",
    alignItems: "center",
    overrides: overrides
  }, restProps), /*#__PURE__*/react.createElement(Spinner, {
    size: "small",
    overrides: overrides
  }), /*#__PURE__*/react.createElement(Text, {
    marginLeft: "major-1",
    overrides: overrides
  }, loadingText));
} //////////////////////////////////////////////////////////////////


function ClearButton(props) {
  var buttonProps = props.buttonProps,
      onClick = props.onClick,
      restProps = _objectWithoutPropertiesLoose$4(props, ["buttonProps", "onClick"]);

  var _React$useContext5 = react.useContext(SelectMenuContext),
      overrides = _React$useContext5.overrides,
      themeKey = _React$useContext5.themeKey;

  var wrapperClassName = useClassName({
    style: SelectMenuClearButtonWrapper,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: overrides
    }),
    themeKey: themeKey,
    themeKeySuffix: 'ClearButtonWrapper'
  });
  var buttonClassName = useClassName({
    style: SelectMenuClearButton,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: overrides
    }),
    themeKey: themeKey,
    themeKeySuffix: 'ClearButton'
  });
  return /*#__PURE__*/react.createElement(Box, _extends$1({
    className: wrapperClassName,
    overrides: overrides
  }, restProps), /*#__PURE__*/react.createElement(Button.Close, _extends$1({
    className: buttonClassName,
    onClick: onClick,
    iconProps: {
      fontSize: '200'
    },
    size: "small",
    onMouseDown: function onMouseDown(e) {
      return e.preventDefault();
    },
    overrides: overrides
  }, buttonProps)));
} //////////////////////////////////////////////////////////////////


function Error$1(props) {
  var errorText = props.errorText,
      overrides = props.overrides,
      restProps = _objectWithoutPropertiesLoose$4(props, ["errorText", "overrides"]);

  return /*#__PURE__*/react.createElement(SelectMenuStaticItem, _extends$1({
    overrides: overrides
  }, restProps), errorText);
}

var useProps$m = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var addonAfter = props.addonAfter,
      addonBefore = props.addonBefore,
      buttonProps = props.buttonProps,
      selectMenuProps = props.selectMenuProps,
      cacheKey = props.cacheKey;
      props.children;
      props.defaultValue;
      var defer = props.defer,
      description = props.description,
      disabled = props.disabled,
      disableClear = props.disableClear,
      errorText = props.errorText,
      emptyText = props.emptyText,
      hasSearch = props.hasSearch,
      hasTags = props.hasTags,
      hint = props.hint,
      isDropdown = props.isDropdown,
      isLoading = props.isLoading,
      isMultiSelect = props.isMultiSelect,
      isOptional = props.isOptional,
      isRequired = props.isRequired,
      orientation = props.orientation,
      label = props.label,
      limit = props.limit,
      loadingText = props.loadingText,
      loadingMoreText = props.loadingMoreText,
      loadOptions = props.loadOptions,
      loadVariables = props.loadVariables,
      options = props.options,
      pagination = props.pagination,
      placeholder = props.placeholder,
      renderError = props.renderError,
      renderEmpty = props.renderEmpty,
      renderLoading = props.renderLoading,
      renderLoadingMore = props.renderLoadingMore,
      renderOption = props.renderOption,
      itemProps = props.itemProps,
      popoverProps = props.popoverProps,
      dropdownMenuInitialState = props.dropdownMenuInitialState,
      searchInputProps = props.searchInputProps,
      state = props.state,
      tagProps = props.tagProps,
      tooltip = props.tooltip,
      tooltipTriggerComponent = props.tooltipTriggerComponent,
      value = props.value,
      onChange = props.onChange,
      overrides = props.overrides,
      validationText = props.validationText,
      variant = props.variant,
      restProps = _objectWithoutPropertiesLoose$4(props, ["addonAfter", "addonBefore", "buttonProps", "selectMenuProps", "cacheKey", "children", "defaultValue", "defer", "description", "disabled", "disableClear", "errorText", "emptyText", "hasSearch", "hasTags", "hint", "isDropdown", "isLoading", "isMultiSelect", "isOptional", "isRequired", "orientation", "label", "limit", "loadingText", "loadingMoreText", "loadOptions", "loadVariables", "options", "pagination", "placeholder", "renderError", "renderEmpty", "renderLoading", "renderLoadingMore", "renderOption", "itemProps", "popoverProps", "dropdownMenuInitialState", "searchInputProps", "state", "tagProps", "tooltip", "tooltipTriggerComponent", "value", "onChange", "overrides", "validationText", "variant"]);

  var boxProps = Box.useProps(restProps);
  var className = useClassName({
    style: SelectMenuField$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(FieldWrapper, {
      description: description,
      hint: hint,
      isOptional: isOptional,
      isRequired: isRequired,
      label: label,
      overrides: overrides,
      state: state,
      tooltip: tooltip,
      tooltipTriggerComponent: tooltipTriggerComponent,
      validationText: validationText,
      variant: variant
    }, function (_ref2) {
      var elementProps = _ref2.elementProps;
      return /*#__PURE__*/react.createElement(ConditionalWrap, {
        condition: Boolean(addonBefore || addonAfter),
        wrap: function wrap(children) {
          return /*#__PURE__*/react.createElement(Group, {
            orientation: orientation,
            overrides: overrides
          }, children);
        }
      }, /*#__PURE__*/react.createElement(react.Fragment, null, addonBefore, /*#__PURE__*/react.createElement(SelectMenu, _extends$1({
        flex: addonBefore || addonAfter ? '1' : undefined,
        cacheKey: cacheKey,
        defer: defer,
        disabled: disabled,
        disableClear: disableClear,
        hasTags: hasTags,
        hasSearch: hasSearch,
        isDropdown: isDropdown,
        isLoading: isLoading,
        isMultiSelect: isMultiSelect,
        limit: limit,
        loadOptions: loadOptions,
        loadVariables: loadVariables,
        options: options,
        onChange: onChange,
        pagination: pagination,
        placeholder: placeholder,
        value: value,
        errorText: errorText,
        emptyText: emptyText,
        loadingText: loadingText,
        loadingMoreText: loadingMoreText,
        renderError: renderError,
        renderEmpty: renderEmpty,
        renderLoading: renderLoading,
        renderLoadingMore: renderLoadingMore,
        renderOption: renderOption,
        buttonProps: buttonProps,
        itemProps: itemProps,
        popoverProps: popoverProps,
        searchInputProps: searchInputProps,
        tagProps: tagProps,
        dropdownMenuInitialState: dropdownMenuInitialState,
        state: state,
        overrides: overrides,
        variant: variant
      }, elementProps, selectMenuProps)), addonAfter));
    })
  });
}, {
  themeKey: 'SelectMenuField'
});
var SelectMenuField = createComponent(function (props) {
  var SelectMenuFieldProps = useProps$m(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: SelectMenuFieldProps
  });
}, {
  attach: {
    useProps: useProps$m,
    displayName: 'SelectMenuField'
  },
  themeKey: 'SelectMenuField'
});

Object.assign(SelectMenu, {
  StaticItem: SelectMenuStaticItem,
  Item: SelectMenuItem,
  Formik: formikField(SelectMenu, {
    isSelectMenu: true
  }),
  ReduxForm: reduxFormField(SelectMenu, {
    isSelectMenu: true
  })
});
Object.assign(SelectMenuField, {
  Formik: formikField(SelectMenuField, {
    hasFieldWrapper: true,
    isSelectMenu: true
  }),
  ReduxForm: reduxFormField(SelectMenuField, {
    hasFieldWrapper: true,
    isSelectMenu: true
  })
});

var _templateObject$7, _templateObject2$6, _templateObject3$6, _templateObject4$6, _templateObject5$6, _templateObject6$6;
var SideNav$1 = function SideNav(styleProps) {
  return css(_templateObject$7 || (_templateObject$7 = _taggedTemplateLiteralLoose(["\n  width: 100%;\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SideNavLevel$1 = function SideNavLevel(styleProps) {
  return css(_templateObject2$6 || (_templateObject2$6 = _taggedTemplateLiteralLoose(["\n  &&& {\n    margin-left: unset;\n  }\n\n  ", "\n\n  & {\n    ", ";\n  }\n"])), styleProps.level === 0 && css$1(_templateObject3$6 || (_templateObject3$6 = _taggedTemplateLiteralLoose(["\n      margin-bottom: ", "rem;\n    "])), space(3, 'major')(styleProps)), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SideNavLevelTitle = function SideNavLevelTitle(styleProps) {
  return css(_templateObject4$6 || (_templateObject4$6 = _taggedTemplateLiteralLoose(["\n  font-size: ", "rem;\n  font-weight: ", ";\n  margin-bottom: ", "rem;\n  padding-left: ", "rem;\n  text-transform: uppercase;\n\n  & {\n    ", ";\n  }\n"])), fontSize('150')(styleProps), fontWeight('semibold')(styleProps), space(2)(styleProps), styleProps.level + 1, theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SideNavItem$1 = function SideNavItem(styleProps) {
  return css(_templateObject5$6 || (_templateObject5$6 = _taggedTemplateLiteralLoose(["\n  align-items: center;\n  color: ", ";\n  cursor: pointer;\n  display: flex;\n  min-height: 2.75em;\n  padding: 0 1rem;\n  padding-left: ", "rem;\n  transition: box-shadow 0.1s ease-in-out 0s, background-color 0.1s, color 0.1s;\n\n  a& {\n    color: ", ";\n    fill: ", ";\n    text-decoration: unset;\n\n    &:hover {\n      color: ", ";\n      fill: ", ";\n    }\n  }\n\n  & {\n    ", ";\n  }\n\n  &&&:hover {\n    color: ", ";\n\n    & {\n      ", ";\n    }\n  }\n\n  &:focus {\n    outline: unset;\n    background-color: ", ";\n\n    & {\n      ", ";\n    }\n  }\n\n  ", "\n"])), palette('text200')(styleProps), styleProps.level === 1 ? space(2, 'major')(styleProps) : styleProps.level, palette('text200')(styleProps), palette('text200')(styleProps), palette('text200')(styleProps), palette('text200')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps), palette('primary', {
    dark: 'primary300'
  })(styleProps), theme(styleProps.themeKey, "styles.hover")(styleProps), palette('primaryTint', {
    dark: 'primaryShade'
  })(styleProps), theme(styleProps.themeKey, "styles.focus")(styleProps), styleProps.isActive && css$1(_templateObject6$6 || (_templateObject6$6 = _taggedTemplateLiteralLoose(["\n      background-color: ", ";\n      box-shadow: inset 3px 0 0 0 ", ";\n\n      & {\n        ", ";\n      }\n    "])), palette('primaryTint', {
    dark: 'primaryShade'
  })(styleProps), palette('primary')(styleProps), theme(styleProps.themeKey, "styles.active")(styleProps)));
};

var SideNavContext = react.createContext({
  onChangeSelectedId: function onChangeSelectedId() {},
  selectedId: undefined,
  overrides: {}
});
var useProps$l = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var children = props.children,
      defaultSelectedId = props.defaultSelectedId,
      onChange = props.onChange,
      overrides = props.overrides,
      _selectedId = props.selectedId,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children", "defaultSelectedId", "onChange", "overrides", "selectedId"]);

  var navigationProps = Navigation.useProps(restProps);
  var className = useClassName({
    style: SideNav$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: navigationProps.className
  });

  var _React$useState = react.useState(defaultSelectedId),
      selectedId = _React$useState[0],
      setSelectedId = _React$useState[1];

  var handleChangeSelectedId = react.useCallback(function (id) {
    if (onChange) {
      onChange(id);
    } else {
      setSelectedId(id);
    }
  }, [onChange]);
  var contextValue = react.useMemo(function () {
    return {
      onChangeSelectedId: handleChangeSelectedId,
      selectedId: _selectedId || selectedId,
      overrides: overrides
    };
  }, [_selectedId, handleChangeSelectedId, overrides, selectedId]);
  return _objectSpread2$3(_objectSpread2$3({}, navigationProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(SideNavContext.Provider, {
      value: contextValue
    }, children)
  });
}, {
  themeKey: 'SideNav'
});
var SideNav = createComponent(function (props) {
  var textProps = useProps$l(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$l,
    displayName: 'SideNav'
  },
  themeKey: 'SideNav'
});

var SideNavLevelContext = react.createContext({
  level: 0
});
var useProps$k = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var children = props.children,
      overrides = props.overrides,
      title = props.title,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children", "overrides", "title"]);

  var listProps = List.useProps(restProps);

  var _React$useContext = react.useContext(SideNavContext),
      sideNavOverrides = _React$useContext.overrides;

  var _React$useContext2 = react.useContext(SideNavLevelContext),
      level = _React$useContext2.level;

  var className = useClassName({
    style: SideNavLevel$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      level: level,
      overrides: _objectSpread2$3(_objectSpread2$3({}, sideNavOverrides), overrides)
    }),
    themeKey: themeKey,
    prevClassName: listProps.className
  });
  var titleClassName = useClassName({
    style: SideNavLevelTitle,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      level: level,
      overrides: _objectSpread2$3(_objectSpread2$3({}, sideNavOverrides), overrides)
    }),
    themeKey: themeKey,
    themeKeySuffix: 'Title'
  });
  var contextValue = react.useMemo(function () {
    return {
      level: level + 1
    };
  }, [level]);
  var titleId = useUniqueId();
  return _objectSpread2$3(_objectSpread2$3({}, listProps), {}, {
    'aria-labelledby': title ? titleId : undefined,
    className: className,
    children: /*#__PURE__*/react.createElement(SideNavLevelContext.Provider, {
      value: contextValue
    }, title && /*#__PURE__*/react.createElement(Box, {
      id: titleId,
      className: titleClassName
    }, title), children)
  });
}, {
  themeKey: 'SideNav.Level'
});
var SideNavLevel = createComponent(function (props) {
  var textProps = useProps$k(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$k,
    displayName: 'SideNav.Level'
  },
  defaultProps: {
    use: 'ul'
  },
  themeKey: 'SideNav.Level'
});

var useProps$j = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var children = props.children,
      href = props.href,
      isActive = props.isActive,
      navId = props.navId,
      onClick = props.onClick,
      overrides = props.overrides,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children", "href", "isActive", "navId", "onClick", "overrides"]);

  var listItemProps = ListItem.useProps(restProps);

  var _React$useContext = react.useContext(SideNavContext),
      onChangeSelectedId = _React$useContext.onChangeSelectedId,
      selectedId = _React$useContext.selectedId,
      sideNavOverrides = _React$useContext.overrides;

  var _React$useContext2 = react.useContext(SideNavLevelContext),
      level = _React$useContext2.level;

  var className = useClassName({
    style: SideNavItem$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      isActive: typeof isActive === 'boolean' ? isActive : selectedId === navId,
      level: level,
      overrides: _objectSpread2$3(_objectSpread2$3({}, sideNavOverrides), overrides)
    }),
    themeKey: themeKey
  });
  return _objectSpread2$3(_objectSpread2$3({}, listItemProps), {}, {
    className: classnames$1(listItemProps.className, href || react.isValidElement(children) ? undefined : className),
    onClick: href || react.isValidElement(children) ? undefined : bindFns(onClick, function () {
      return onChangeSelectedId(navId);
    }),
    children: href || react.isValidElement(children) ?
    /*
    // @ts-ignore */
    react.cloneElement(href ? /*#__PURE__*/react.createElement("a", {
      href: href
    }, children) : children, {
      className: className,
      onClick: bindFns(onClick, function () {
        return onChangeSelectedId(navId);
      })
    }) : children
  });
}, {
  themeKey: 'SideNav.Item'
});
var SideNavItem = createComponent(function (props) {
  var sideNavItemProps = useProps$j(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: sideNavItemProps
  });
}, {
  attach: {
    useProps: useProps$j,
    displayName: 'SideNav.Item'
  },
  defaultProps: {
    use: 'li'
  },
  themeKey: 'SideNav.Item'
});

Object.assign(SideNav, {
  Level: SideNavLevel,
  Item: SideNavItem
});

var _templateObject$6, _templateObject2$5, _templateObject3$5, _templateObject4$5, _templateObject5$5, _templateObject6$5, _templateObject7$5, _templateObject8$5, _templateObject9$4, _templateObject10$4, _templateObject11$4, _templateObject12$3;
var Switch$1 = function Switch(styleProps) {
  return css(_templateObject$6 || (_templateObject$6 = _taggedTemplateLiteralLoose(["\n  && {\n    display: flex;\n    align-items: center;\n  }\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SwitchIcon = function SwitchIcon(styleProps) {
  return css(_templateObject2$5 || (_templateObject2$5 = _taggedTemplateLiteralLoose(["\n  background-color: ", ";\n  border: 1px solid ", ";\n  border-radius: 1em;\n  height: 1.5em;\n  position: relative;\n  width: 2.5em;\n  transition: box-shadow 0.1s ease-in-out 0s, border-color 0.1s, background-color 0.1s;\n\n  & {\n    ", ";\n  }\n"])), palette('default')(styleProps), palette('gray100', {
    dark: 'gray700'
  })(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SwitchLabel = function SwitchLabel(styleProps) {
  return css(_templateObject3$5 || (_templateObject3$5 = _taggedTemplateLiteralLoose(["\n  && {\n    font-weight: ", ";\n  }\n\n  & {\n    ", ";\n  }\n"])), fontWeight('normal')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var HiddenSwitch = function HiddenSwitch(styleProps) {
  return getHiddenInputStyles({
    iconClassName: 'bb-SwitchIcon',
    checkedCss: css$1(_templateObject4$5 || (_templateObject4$5 = _taggedTemplateLiteralLoose(["\n      background-color: ", ";\n      transition: all ease 0.2s;\n    "])), palette(styleProps.palette || 'primary', {
      dark: (styleProps.palette || 'primary') + "700"
    })(styleProps)),
    disabledCheckedCss: css$1(_templateObject5$5 || (_templateObject5$5 = _taggedTemplateLiteralLoose(["\n      background-color: ", ";\n      border-color: ", ";\n    "])), palette((styleProps.palette || 'primary') + "100", {
      dark: (styleProps.palette || 'primary') + "800"
    })(styleProps), palette((styleProps.palette || 'primary') + "100", {
      dark: (styleProps.palette || 'primary') + "800"
    })(styleProps)),
    disabledUncheckedIconCss: css$1(_templateObject6$5 || (_templateObject6$5 = _taggedTemplateLiteralLoose(["\n      background: ", ";\n    "])), palette('white700')(styleProps)),
    checkedIconCss: css$1(_templateObject7$5 || (_templateObject7$5 = _taggedTemplateLiteralLoose(["\n      border-color: ", ";\n      left: 1.25em;\n    "])), palette(styleProps.palette || 'primary', {
      dark: (styleProps.palette || 'primary') + "700"
    })(styleProps)),
    disabledCheckedIconCss: css$1(_templateObject8$5 || (_templateObject8$5 = _taggedTemplateLiteralLoose(["\n      border-color: ", ";\n    "])), palette((styleProps.palette || 'primary') + "100", {
      dark: (styleProps.palette || 'primary') + "800"
    })(styleProps)),
    uncheckedIconCss: css$1(_templateObject9$4 || (_templateObject9$4 = _taggedTemplateLiteralLoose(["\n      background: ", ";\n      content: '';\n      border-radius: 100%;\n      border: 1px solid ", ";\n      height: 1em;\n      width: 1em;\n      top: 0.2em;\n      left: 0.2em;\n      transition: all ease 0.2s;\n      position: absolute;\n    "])), palette('default', {
      dark: 'gray100'
    })(styleProps), palette('gray100', {
      dark: 'gray700'
    })(styleProps)),
    styleProps: styleProps,
    themeKey: 'Switch.Icon'
  });
};
var SwitchGroup$1 = function SwitchGroup(styleProps) {
  return css(_templateObject10$4 || (_templateObject10$4 = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SwitchField$1 = function SwitchField(styleProps) {
  return css(_templateObject11$4 || (_templateObject11$4 = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var SwitchGroupField$1 = function SwitchGroupField(styleProps) {
  return css(_templateObject12$3 || (_templateObject12$3 = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$i = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var autoFocus = props.autoFocus,
      checked = props.checked,
      inputProps = props.inputProps,
      defaultChecked = props.defaultChecked,
      disabled = props.disabled,
      isRequired = props.isRequired,
      label = props.label,
      name = props.name,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onFocus = props.onFocus,
      overrides = props.overrides,
      state = props.state,
      switchRef = props.switchRef,
      value = props.value,
      restProps = _objectWithoutPropertiesLoose$4(props, ["autoFocus", "checked", "inputProps", "defaultChecked", "disabled", "isRequired", "label", "name", "onBlur", "onChange", "onFocus", "overrides", "state", "switchRef", "value"]);

  var boxProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, restProps), {}, {
    overrides: overrides
  }));
  var className = useClassName({
    style: Switch$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var switchIconClassName = useClassName({
    style: SwitchIcon,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Icon'
  });
  var hiddenSwitchClassName = useClassName({
    style: HiddenSwitch,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'HiddenInput'
  });
  var switchLabelClassName = useClassName({
    style: SwitchLabel,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Label'
  });
  var labelId = useUniqueId();
  var switchId = useUniqueId();
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    'aria-describedby': labelId,
    'aria-invalid': state === 'danger',
    'aria-required': isRequired,
    className: className,
    children: /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Box, _extends$1({
      ref: switchRef,
      use: "input",
      className: hiddenSwitchClassName // @ts-ignore
      ,
      autoFocus: autoFocus,
      checked: checked,
      defaultChecked: defaultChecked,
      disabled: disabled,
      id: switchId,
      onBlur: onBlur,
      onChange: onChange,
      onFocus: onFocus,
      overrides: overrides,
      name: name,
      type: "checkbox" // @ts-ignore
      ,
      value: value
    }, inputProps)), /*#__PURE__*/react.createElement(Box, {
      className: switchIconClassName,
      overrides: overrides
    }), label && /*#__PURE__*/react.createElement(Label, {
      use: "span",
      id: labelId,
      className: switchLabelClassName,
      htmlFor: switchId,
      overrides: overrides,
      marginLeft: "minor-2"
    }, label))
  });
}, {
  themeKey: 'Switch'
});
var Switch = createComponent(function (props) {
  var textProps = useProps$i(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$i,
    displayName: 'Switch'
  },
  defaultProps: {
    use: 'label'
  },
  themeKey: 'Switch'
}); ////////////////////////////////////////////////////////////////

var useSwitchFieldProps = createHook(function (props, _ref2) {
  var themeKey = _ref2.themeKey;

  var autoFocus = props.autoFocus,
      checked = props.checked,
      switchLabel = props.switchLabel,
      switchProps = props.switchProps,
      description = props.description,
      defaultChecked = props.defaultChecked,
      disabled = props.disabled,
      hint = props.hint,
      isOptional = props.isOptional,
      isRequired = props.isRequired,
      label = props.label,
      name = props.name,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onFocus = props.onFocus,
      overrides = props.overrides,
      state = props.state,
      switchRef = props.switchRef,
      tooltip = props.tooltip,
      tooltipTriggerComponent = props.tooltipTriggerComponent,
      validationText = props.validationText,
      value = props.value,
      restProps = _objectWithoutPropertiesLoose$4(props, ["autoFocus", "checked", "switchLabel", "switchProps", "description", "defaultChecked", "disabled", "hint", "isOptional", "isRequired", "label", "name", "onBlur", "onChange", "onFocus", "overrides", "state", "switchRef", "tooltip", "tooltipTriggerComponent", "validationText", "value"]);

  var boxProps = Box.useProps(restProps);
  var className = useClassName({
    style: SwitchField$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(FieldWrapper, {
      description: description,
      hint: hint,
      isOptional: isOptional,
      isRequired: isRequired,
      label: label,
      labelType: "legend",
      overrides: overrides,
      state: state,
      tooltip: tooltip,
      tooltipTriggerComponent: tooltipTriggerComponent,
      validationText: validationText
    }, function (_ref3) {
      var elementProps = _ref3.elementProps;
      return /*#__PURE__*/react.createElement(Switch, _extends$1({
        autoFocus: autoFocus,
        checked: checked,
        defaultChecked: defaultChecked,
        disabled: disabled,
        isRequired: isRequired,
        label: switchLabel,
        name: name,
        onBlur: onBlur,
        onChange: onChange,
        onFocus: onFocus,
        overrides: overrides,
        state: state,
        switchRef: switchRef,
        value: value
      }, omit(elementProps, 'id'), switchProps, {
        inputProps: _objectSpread2$3({
          id: elementProps.id
        }, switchProps.inputProps)
      }));
    })
  });
}, {
  defaultProps: {
    switchProps: {}
  },
  themeKey: 'SwitchField'
});
var SwitchField = createComponent(function (props) {
  var switchFieldProps = useSwitchFieldProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: switchFieldProps
  });
}, {
  attach: {
    useProps: useProps$i,
    displayName: 'SwitchField'
  },
  themeKey: 'SwitchField'
});

var useProps$h = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var defaultValue = props.defaultValue,
      disabled = props.disabled,
      orientation = props.orientation,
      onBlur = props.onBlur,
      onChange = props.onChange,
      options = props.options,
      overrides = props.overrides;
      props.name;
      var spacing = props.spacing,
      state = props.state,
      value = props.value,
      restProps = _objectWithoutPropertiesLoose$4(props, ["defaultValue", "disabled", "orientation", "onBlur", "onChange", "options", "overrides", "name", "spacing", "state", "value"]); ////////////////////////////////////////////


  var boxProps = Box.useProps(restProps); ////////////////////////////////////////////

  var className = useClassName({
    style: SwitchGroup$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  }); ////////////////////////////////////////////

  var _React$useState = react.useState(defaultValue || []),
      controlledValue = _React$useState[0],
      setControlledValue = _React$useState[1];

  var values = typeof value !== 'undefined' ? value : controlledValue; ////////////////////////////////////////////

  var handleChange = react.useCallback(function (e) {
    var newValue = e.target.value;
    var newValues = [];

    if (values.includes(newValue)) {
      newValues = (values || []).filter(function (val) {
        return val !== newValue;
      });
    } else {
      newValues = [].concat(values || [], [newValue]);
    }

    if (typeof value !== 'undefined') {
      onChange && onChange(newValues, newValue);
    } else {
      setControlledValue(newValues);
    }
  }, [onChange, value, values]);
  var handleBlur = react.useCallback(function () {
    onBlur && onBlur(values);
  }, [onBlur, values]); ////////////////////////////////////////////

  return _objectSpread2$3(_objectSpread2$3({
    role: 'group'
  }, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(Set$1, {
      orientation: orientation,
      spacing: spacing
    }, options.map(function (option, i) {
      return /*#__PURE__*/react.createElement(Switch, _extends$1({
        key: i
      }, option, {
        // @ts-ignore
        checked: values ? values.includes(option.value) : false,
        onBlur: handleBlur,
        onChange: handleChange,
        overrides: overrides,
        state: state || option.state,
        disabled: disabled || option.disabled
      }));
    }))
  });
}, {
  defaultProps: {
    orientation: 'vertical',
    spacing: 'minor-2'
  },
  themeKey: 'SwitchGroup'
});
var SwitchGroup = createComponent(function (props) {
  var textProps = useProps$h(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$h,
    displayName: 'SwitchGroup'
  },
  themeKey: 'SwitchGroup'
}); ////////////////////////////////////////////////////////////////

var useSwitchGroupFieldProps = createHook(function (props, _ref2) {
  var themeKey = _ref2.themeKey;

  var defaultChecked = props.defaultChecked,
      description = props.description,
      disabled = props.disabled,
      hint = props.hint,
      orientation = props.orientation,
      isOptional = props.isOptional,
      isRequired = props.isRequired,
      label = props.label,
      name = props.name,
      options = props.options,
      onBlur = props.onBlur,
      onChange = props.onChange,
      overrides = props.overrides,
      switchGroupProps = props.switchGroupProps,
      state = props.state,
      tooltip = props.tooltip,
      tooltipTriggerComponent = props.tooltipTriggerComponent,
      value = props.value,
      validationText = props.validationText,
      restProps = _objectWithoutPropertiesLoose$4(props, ["defaultChecked", "description", "disabled", "hint", "orientation", "isOptional", "isRequired", "label", "name", "options", "onBlur", "onChange", "overrides", "switchGroupProps", "state", "tooltip", "tooltipTriggerComponent", "value", "validationText"]);

  var boxProps = Box.useProps(restProps);
  var className = useClassName({
    style: SwitchGroupField$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(FieldWrapper, {
      description: description,
      hint: hint,
      isOptional: isOptional,
      isRequired: isRequired,
      label: label,
      labelType: "legend",
      overrides: overrides,
      state: state,
      tooltip: tooltip,
      tooltipTriggerComponent: tooltipTriggerComponent,
      validationText: validationText
    }, function (_ref3) {
      var elementProps = _ref3.elementProps;
      return /*#__PURE__*/react.createElement(SwitchGroup, _extends$1({
        defaultChecked: defaultChecked,
        disabled: disabled,
        orientation: orientation,
        name: name,
        options: options,
        onBlur: onBlur,
        onChange: onChange,
        overrides: overrides,
        state: state,
        value: value
      }, elementProps, switchGroupProps));
    })
  });
}, {
  themeKey: 'SwitchGroupField'
});
var SwitchGroupField = createComponent(function (props) {
  var switchGroupFieldProps = useSwitchGroupFieldProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: switchGroupFieldProps
  });
}, {
  attach: {
    useProps: useProps$h,
    displayName: 'SwitchGroupField'
  },
  defaultProps: {
    use: 'fieldset'
  },
  themeKey: 'SwitchGroupField'
});

Object.assign(Switch, {
  Formik: formikField(Switch, {
    isCheckbox: true
  }),
  ReduxForm: reduxFormField(Switch, {
    isCheckbox: true
  })
});
Object.assign(SwitchField, {
  Formik: formikField(SwitchField, {
    isCheckbox: true,
    hasFieldWrapper: true
  }),
  ReduxForm: reduxFormField(SwitchField, {
    isCheckbox: true,
    hasFieldWrapper: true
  })
});
Object.assign(SwitchGroup, {
  Formik: formikField(SwitchGroup, {
    isCheckboxGroup: true
  }),
  ReduxForm: reduxFormField(SwitchGroup, {
    isCheckboxGroup: true
  })
});
Object.assign(SwitchGroupField, {
  Formik: formikField(SwitchGroupField, {
    isCheckboxGroup: true,
    hasFieldWrapper: true
  }),
  ReduxForm: reduxFormField(SwitchGroupField, {
    isCheckboxGroup: true,
    hasFieldWrapper: true
  })
});

var _templateObject$5;
var Tabbable = function Tabbable(styleProps) {
  return css(_templateObject$5 || (_templateObject$5 = _taggedTemplateLiteralLoose(["\n  &[disabled],\n  &[aria-disabled=\"true\"] {\n    opacity: 0.5;\n\n    & {\n      ", ";\n    }\n  }\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.disabled")(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var useProps$g = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var disabled = props.disabled,
      focusable = props.focusable,
      htmlProps = _objectWithoutPropertiesLoose$4(props, ["disabled", "focusable"]);

  var tabbableProps = useTabbable({
    disabled: disabled,
    focusable: focusable
  }, htmlProps);
  htmlProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, props), tabbableProps));
  var className = useClassName({
    style: Tabbable,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: htmlProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, htmlProps), {}, {
    className: className
  });
}, {
  themeKey: 'Tabbable'
});
createComponent(function (props) {
  var tabbableProps = useProps$g(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: tabbableProps
  });
}, {
  attach: {
    useProps: useProps$g,
    displayName: 'Tabbable'
  },
  themeKey: 'Tabbable'
});

var _templateObject$4, _templateObject2$4, _templateObject3$4, _templateObject4$4, _templateObject5$4, _templateObject6$4, _templateObject7$4, _templateObject8$4, _templateObject9$3, _templateObject10$3, _templateObject11$3, _templateObject12$2, _templateObject13$1, _templateObject14$1, _templateObject15$1, _templateObject16$1, _templateObject17$1, _templateObject18$1;
var Table$1 = function Table(styleProps) {
  return css(_templateObject$4 || (_templateObject$4 = _taggedTemplateLiteralLoose(["\n  border-collapse: collapse;\n  border-spacing: 0;\n  text-align: left;\n  width: 100%;\n  color: ", ";\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  & {\n    ", ";\n  }\n"])), palette('text200')(styleProps), styleProps.hasDividers && css$1(_templateObject2$4 || (_templateObject2$4 = _taggedTemplateLiteralLoose(["\n      & tbody tr:not(:last-child) {\n        border-bottom: 1px solid ", ";\n      }\n    "])), palette('white800', {
    dark: 'gray900'
  })(styleProps)), styleProps.isHoverable && css$1(_templateObject3$4 || (_templateObject3$4 = _taggedTemplateLiteralLoose(["\n      & tbody tr:hover {\n        background-color: ", ";\n      }\n    "])), palette('white600', {
    dark: 'black200'
  })(styleProps)), styleProps.isStriped && css$1(_templateObject4$4 || (_templateObject4$4 = _taggedTemplateLiteralLoose(["\n      & tbody tr:nth-child(even) {\n        background-color: ", ";\n      }\n    "])), palette('white600', {
    dark: 'black200'
  })(styleProps)), styleProps.isResponsive && css$1(_templateObject5$4 || (_templateObject5$4 = _taggedTemplateLiteralLoose(["\n      ", ";\n    "])), breakpoint("max-" + styleProps.responsiveBreakpoint, css$1(_templateObject6$4 || (_templateObject6$4 = _taggedTemplateLiteralLoose(["\n          & thead {\n            display: none;\n          }\n\n          & tbody tr:not(:last-child) {\n            border-bottom: 1px solid ", ";\n          }\n\n          & tbody td {\n            display: block;\n            text-align: left !important;\n            padding: ", "rem ", "rem;\n\n            &::before {\n              display: block;\n              content: attr(data-content);\n              ", ";\n\n              & {\n                ", ";\n              }\n            }\n          }\n\n          & tfoot td {\n            display: block;\n            text-align: left !important;\n          }\n\n          & {\n            ", ";\n          }\n        "])), palette('white800', {
    dark: 'gray900'
  })(styleProps), space(2)(styleProps), space(4)(styleProps), tableHeadCellText(styleProps), theme(styleProps.themeKey, "styles.responsive.headCellText")(styleProps), theme(styleProps.themeKey, "styles.responsive.base")(styleProps)))(styleProps)), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var TableHead$1 = function TableHead(styleProps) {
  return css(_templateObject7$4 || (_templateObject7$4 = _taggedTemplateLiteralLoose(["\n  border-bottom: 1px solid ", ";\n\n  ", "\n\n  & {\n    ", ";\n  }\n"])), palette('white800', {
    dark: 'gray900'
  })(styleProps), styleProps.tableVariant !== 'minimal' && css$1(_templateObject8$4 || (_templateObject8$4 = _taggedTemplateLiteralLoose(["\n      background-color: ", ";\n    "])), palette('white600', {
    dark: 'black200'
  })(styleProps)), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var TableRow$1 = function TableRow(styleProps) {
  return css(_templateObject9$3 || (_templateObject9$3 = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var TableHeadCell$1 = function TableHeadCell(styleProps) {
  return css(_templateObject10$3 || (_templateObject10$3 = _taggedTemplateLiteralLoose(["\n  padding: ", "rem ", "rem;\n  vertical-align: middle;\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), space(3)(styleProps), space(4)(styleProps), tableHeadCellText(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var TableCell$1 = function TableCell(styleProps) {
  return css(_templateObject11$3 || (_templateObject11$3 = _taggedTemplateLiteralLoose(["\n  padding: ", "rem ", "rem;\n\n  & {\n    ", ";\n  }\n"])), space(3)(styleProps), space(4)(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var TableFoot$1 = function TableFoot(styleProps) {
  return css(_templateObject12$2 || (_templateObject12$2 = _taggedTemplateLiteralLoose(["\n  border-top: 1px solid ", ";\n\n  ", "\n\n  & {\n    ", ";\n  }\n"])), palette('white800', {
    dark: 'gray900'
  })(styleProps), styleProps.tableVariant !== 'minimal' && css$1(_templateObject13$1 || (_templateObject13$1 = _taggedTemplateLiteralLoose(["\n      background-color: ", ";\n    "])), palette('white600', {
    dark: 'black200'
  })(styleProps)), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var TableBody$1 = function TableBody(styleProps) {
  return css(_templateObject14$1 || (_templateObject14$1 = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var TableWrapper = function TableWrapper(styleProps) {
  return css(_templateObject15$1 || (_templateObject15$1 = _taggedTemplateLiteralLoose(["\n  border-radius: ", ";\n  overflow: hidden;\n\n  ", "\n\n  ", "\n\n\n  & {\n    ", ";\n  }\n"])), borderRadius('default')(styleProps), styleProps.variant === 'default' && css$1(_templateObject16$1 || (_templateObject16$1 = _taggedTemplateLiteralLoose(["\n      border: 1px solid ", ";\n    "])), palette('white800', {
    dark: 'gray900'
  })(styleProps)), styleProps.variant === 'shadowed' && css$1(_templateObject17$1 || (_templateObject17$1 = _taggedTemplateLiteralLoose(["\n      ", ";\n    "])), altitude('100')(styleProps)), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var tableHeadCellText = function tableHeadCellText(styleProps) {
  return css$1(_templateObject18$1 || (_templateObject18$1 = _taggedTemplateLiteralLoose(["\n  color: ", ";\n  font-weight: ", ";\n  font-size: ", "rem;\n  text-transform: uppercase;\n"])), palette('text100')(styleProps), fontWeight('semibold')(styleProps), fontSize('100')(styleProps));
};

var TableContext = react.createContext({
  overrides: {},
  tableVariant: 'default'
});
var useProps$f = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var children = props.children,
      overrides = props.overrides,
      variant = props.variant;
  var tableWrapperClassName = useClassName({
    style: TableWrapper,
    styleProps: props,
    themeKey: themeKey
  });
  var boxProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, omitCSSProps(props)), {}, {
    wrapElement: function wrapElement(element) {
      return /*#__PURE__*/react.createElement(Box, _extends$1({
        className: tableWrapperClassName
      }, pickCSSProps(props)), element);
    }
  }));
  var className = useClassName({
    style: Table$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var contextValue = react.useMemo(function () {
    return {
      overrides: overrides,
      tableVariant: variant
    };
  }, [overrides, variant]);
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(TableContext.Provider, {
      value: contextValue
    }, children)
  });
}, {
  defaultProps: {
    responsiveBreakpoint: 'mobile',
    variant: 'default'
  },
  themeKey: 'Table'
});
var Table = createComponent(function (props) {
  var textProps = useProps$f(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$f,
    displayName: 'Table'
  },
  defaultProps: {
    use: 'table'
  },
  themeKey: 'Table'
});

var useProps$e = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var tableContext = react.useContext(TableContext);
  var className = useClassName({
    style: TableHead$1,
    styleProps: _objectSpread2$3(_objectSpread2$3(_objectSpread2$3({}, tableContext), props), {}, {
      overrides: _objectSpread2$3(_objectSpread2$3({}, tableContext.overrides), props.overrides)
    }),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Table.Head'
});
var TableHead = createComponent(function (props) {
  var textProps = useProps$e(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$e,
    displayName: 'Table.Head'
  },
  defaultProps: {
    use: 'thead'
  },
  themeKey: 'Table.Head'
});

var useProps$d = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var tableCellRef = react.useRef();
  var boxProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, props), {}, {
    elementRef: tableCellRef
  }));
  var tableContext = react.useContext(TableContext);

  var _React$useState = react.useState(''),
      title = _React$useState[0],
      setTitle = _React$useState[1];

  var className = useClassName({
    style: TableCell$1,
    styleProps: _objectSpread2$3(_objectSpread2$3(_objectSpread2$3({}, tableContext), props), {}, {
      overrides: _objectSpread2$3(_objectSpread2$3({}, tableContext.overrides), props.overrides)
    }),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  react.useEffect(function () {
    if (tableCellRef && tableCellRef.current) {
      var _tableElement$childNo;

      // @ts-ignore
      var cellIndex = tableCellRef.current.cellIndex; // @ts-ignore

      var rowElement = tableCellRef.current.parentNode;
      var bodyElement = rowElement.parentNode;
      var tableElement = bodyElement.parentNode;
      var tableElementChildren = (_tableElement$childNo = tableElement === null || tableElement === void 0 ? void 0 : tableElement.childNodes) !== null && _tableElement$childNo !== void 0 ? _tableElement$childNo : [];

      if (tableElementChildren.length > 0) {
        // @ts-ignore
        NodeList.prototype.find = Array.prototype.find;
        var headElement = tableElementChildren.find(function (child) {
          return child.tagName === 'THEAD';
        });

        if (headElement && headElement.childNodes) {
          var _headRowElement$child;

          var headRowElement = headElement === null || headElement === void 0 ? void 0 : headElement.childNodes[0];
          var headCellElement = headRowElement === null || headRowElement === void 0 ? void 0 : (_headRowElement$child = headRowElement.childNodes) === null || _headRowElement$child === void 0 ? void 0 : _headRowElement$child[cellIndex];
          setTitle(headCellElement === null || headCellElement === void 0 ? void 0 : headCellElement.innerText);
        }
      }
    }
  }, []);
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    'data-content': title
  });
}, {
  themeKey: 'Table.Cell'
});
var TableCell = createComponent(function (props) {
  var textProps = useProps$d(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$d,
    displayName: 'Table.Cell'
  },
  defaultProps: {
    use: 'td'
  },
  themeKey: 'Table.Cell'
});

var useProps$c = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var tableContext = react.useContext(TableContext);
  var className = useClassName({
    style: TableFoot$1,
    styleProps: _objectSpread2$3(_objectSpread2$3(_objectSpread2$3({}, tableContext), props), {}, {
      overrides: _objectSpread2$3(_objectSpread2$3({}, tableContext.overrides), props.overrides)
    }),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Table.Foot'
});
var TableFoot = createComponent(function (props) {
  var textProps = useProps$c(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$c,
    displayName: 'Table.Foot'
  },
  defaultProps: {
    use: 'tfoot'
  },
  themeKey: 'Table.Foot'
});

var useProps$b = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var tableContext = react.useContext(TableContext);
  var className = useClassName({
    style: TableHeadCell$1,
    styleProps: _objectSpread2$3(_objectSpread2$3(_objectSpread2$3({}, tableContext), props), {}, {
      overrides: _objectSpread2$3(_objectSpread2$3({}, tableContext.overrides), props.overrides)
    }),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Table.HeadCell'
});
var TableHeadCell = createComponent(function (props) {
  var textProps = useProps$b(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$b,
    displayName: 'Table.HeadCell'
  },
  defaultProps: {
    use: 'th'
  },
  themeKey: 'Table.HeadCell'
});

var useProps$a = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var tableContext = react.useContext(TableContext);
  var className = useClassName({
    style: TableRow$1,
    styleProps: _objectSpread2$3(_objectSpread2$3(_objectSpread2$3({}, tableContext), props), {}, {
      overrides: _objectSpread2$3(_objectSpread2$3({}, tableContext.overrides), props.overrides)
    }),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Table.Row'
});
var TableRow = createComponent(function (props) {
  var textProps = useProps$a(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$a,
    displayName: 'Table.Row'
  },
  defaultProps: {
    use: 'tr'
  },
  themeKey: 'Table.Row'
});

var useProps$9 = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;
  var boxProps = Box.useProps(props);
  var tableContext = react.useContext(TableContext);
  var className = useClassName({
    style: TableBody$1,
    styleProps: _objectSpread2$3(_objectSpread2$3(_objectSpread2$3({}, tableContext), props), {}, {
      overrides: _objectSpread2$3(_objectSpread2$3({}, tableContext.overrides), props.overrides)
    }),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Table.Body'
});
var TableBody = createComponent(function (props) {
  var textProps = useProps$9(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$9,
    displayName: 'Table.Body'
  },
  defaultProps: {
    use: 'tbody'
  },
  themeKey: 'Table.Body'
});

Object.assign(Table, {
  Head: TableHead,
  Cell: TableCell,
  Foot: TableFoot,
  Row: TableRow,
  Body: TableBody,
  HeadCell: TableHeadCell
});

var _templateObject$3, _templateObject2$3, _templateObject3$3, _templateObject4$3, _templateObject5$3, _templateObject6$3, _templateObject7$3, _templateObject8$3, _templateObject9$2, _templateObject10$2, _templateObject11$2, _templateObject12$1, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30, _templateObject31;
var Tab$1 = function Tab(styleProps) {
  return css(_templateObject$3 || (_templateObject$3 = _taggedTemplateLiteralLoose(["\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  height: 2.75em;\n  justify-content: center;\n  margin-bottom: -1px;\n  padding: 0 1rem;\n  transition: box-shadow 0.1s ease-in-out 0s, background-color 0.1s, color 0.1s;\n\n  ", "\n\n  ", "\n\n  ", "\n\n    ", "\n\n  &[aria-selected='true'] {\n    color: ", ";\n    fill: ", ";\n\n    ", "\n\n    ", "\n\n    ", "\n\n    & {\n      ", ";\n    }\n  }\n\n  &:focus {\n    outline: unset;\n\n    ", "\n\n    ", "\n\n    & {\n      ", ";\n    }\n  }\n\n  &:not([aria-selected='true']):hover {\n    ", "\n\n    ", "\n\n    & {\n      ", ";\n    }\n  }\n\n  & {\n    ", ";\n  }\n"])), styleProps.disabled && css$1(_templateObject2$3 || (_templateObject2$3 = _taggedTemplateLiteralLoose(["\n      color: ", ";\n    "])), palette('gray300')(styleProps)), styleProps.variant === 'boxed' && css$1(_templateObject3$3 || (_templateObject3$3 = _taggedTemplateLiteralLoose(["\n      border: 1px solid transparent;\n    "]))), styleProps.variant === 'button' && css$1(_templateObject4$3 || (_templateObject4$3 = _taggedTemplateLiteralLoose(["\n      border-radius: ", ";\n    "])), borderRadius('default')(styleProps)), styleProps.orientation === 'vertical' ? css$1(_templateObject5$3 || (_templateObject5$3 = _taggedTemplateLiteralLoose(["\n            width: 100%;\n            border-top-left-radius: ", ";\n            border-bottom-left-radius: ", ";\n            margin-right: -2px;\n\n            &:not(:last-child) {\n              margin-bottom: 0.5rem;\n            }\n          "])), borderRadius('default')(styleProps), borderRadius('default')(styleProps)) : css$1(_templateObject6$3 || (_templateObject6$3 = _taggedTemplateLiteralLoose(["\n            border-top-left-radius: ", ";\n            border-top-right-radius: ", ";\n\n            &:not(:last-child) {\n              margin-right: 0.5rem;\n            }\n          "])), borderRadius('default')(styleProps), borderRadius('default')(styleProps)), palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps), palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps), styleProps.variant === 'default' && css$1(_templateObject7$3 || (_templateObject7$3 = _taggedTemplateLiteralLoose(["\n        ", ";\n      "])), styleProps.orientation === 'vertical' ? css$1(_templateObject8$3 || (_templateObject8$3 = _taggedTemplateLiteralLoose(["\n              box-shadow: inset -2px 0 0 0 ", ";\n            "])), palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps)) : css$1(_templateObject9$2 || (_templateObject9$2 = _taggedTemplateLiteralLoose(["\n              box-shadow: inset 0 -2px 0 0 ", ";\n            "])), palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps))), styleProps.variant === 'boxed' && css$1(_templateObject10$2 || (_templateObject10$2 = _taggedTemplateLiteralLoose(["\n        border: 1px solid ", ";\n\n        ", ";\n      "])), palette('white900', {
    dark: 'gray700'
  })(styleProps), styleProps.orientation === 'vertical' ? css$1(_templateObject11$2 || (_templateObject11$2 = _taggedTemplateLiteralLoose(["\n              border-right-color: ", ";\n            "])), palette('white', {
    dark: 'background'
  })(styleProps)) : css$1(_templateObject12$1 || (_templateObject12$1 = _taggedTemplateLiteralLoose(["\n              border-bottom-color: ", ";\n            "])), palette('white', {
    dark: 'background'
  })(styleProps))), styleProps.variant === 'button' && css$1(_templateObject13 || (_templateObject13 = _taggedTemplateLiteralLoose(["\n        background-color: ", ";\n        color: ", ";\n      "])), palette(styleProps.palette)(styleProps), palette(styleProps.palette + "Inverted")(styleProps)), theme(styleProps.themeKey, "styles.selected")(styleProps), styleProps.variant === 'default' && css$1(_templateObject14 || (_templateObject14 = _taggedTemplateLiteralLoose(["\n        ", ";\n      "])), styleProps.orientation === 'vertical' ? css$1(_templateObject15 || (_templateObject15 = _taggedTemplateLiteralLoose(["\n              box-shadow: inset -2px 0 0 0 ", ";\n            "])), palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps)) : css$1(_templateObject16 || (_templateObject16 = _taggedTemplateLiteralLoose(["\n              box-shadow: inset 0 -2px 0 0 ", ";\n            "])), palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps))), (styleProps.variant === 'boxed' || styleProps.variant === 'button') && css$1(_templateObject17 || (_templateObject17 = _taggedTemplateLiteralLoose(["\n        box-shadow: ", " 0px 0px 0px 1px,\n          ", " 0px 0px 0px 3px;\n      "])), palette(styleProps.palette)(styleProps), palette(styleProps.palette + "200")(styleProps)), theme(styleProps.themeKey, "styles.focus")(styleProps), styleProps.variant !== 'button' && css$1(_templateObject18 || (_templateObject18 = _taggedTemplateLiteralLoose(["\n        color: ", ";\n      "])), palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps)), styleProps.variant === 'button' && css$1(_templateObject19 || (_templateObject19 = _taggedTemplateLiteralLoose(["\n        background-color: ", ";\n      "])), palette('white700', {
    dark: 'black200'
  })(styleProps)), theme(styleProps.themeKey, "styles.hover")(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var Tabs$1 = function Tabs(styleProps) {
  return css(_templateObject20 || (_templateObject20 = _taggedTemplateLiteralLoose(["\n  width: 100%;\n\n  ", "\n\n  ", "\n\n  & {\n    ", ";\n  }\n"])), styleProps.isFitted && css$1(_templateObject21 || (_templateObject21 = _taggedTemplateLiteralLoose(["\n      & .bb-TabsTab {\n        flex: 1;\n      }\n    "]))), styleProps.orientation === 'vertical' && css$1(_templateObject22 || (_templateObject22 = _taggedTemplateLiteralLoose(["\n      display: flex;\n    "]))), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var TabsList$1 = function TabsList(styleProps) {
  return css(_templateObject23 || (_templateObject23 = _taggedTemplateLiteralLoose(["\n  align-items: center;\n  display: flex;\n  font-weight: ", ";\n\n  ", "\n\n  ", "\n\n\n  ", "\n\n  & {\n    ", ";\n  }\n"])), fontWeight('semibold')(styleProps), styleProps.orientation === 'vertical' && css$1(_templateObject24 || (_templateObject24 = _taggedTemplateLiteralLoose(["\n      flex-direction: column;\n    "]))), (styleProps.variant === 'boxed' || styleProps.variant === 'default') && css$1(_templateObject25 || (_templateObject25 = _taggedTemplateLiteralLoose(["\n      ", ";\n    "])), styleProps.orientation === 'vertical' ? css$1(_templateObject26 || (_templateObject26 = _taggedTemplateLiteralLoose(["\n            border-right: 1px solid ", ";\n          "])), palette('white900', {
    dark: 'gray700'
  })(styleProps)) : css$1(_templateObject27 || (_templateObject27 = _taggedTemplateLiteralLoose(["\n            border-bottom: 1px solid ", ";\n          "])), palette('white900', {
    dark: 'gray700'
  })(styleProps))), getAlignAttributes(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var TabsPanel$1 = function TabsPanel(styleProps) {
  return css(_templateObject28 || (_templateObject28 = _taggedTemplateLiteralLoose(["\n  &:focus {\n    outline: none;\n  }\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};

function getAlignAttributes(styleProps) {
  var sizeAttributes = {
    left: css$1(_templateObject29 || (_templateObject29 = _taggedTemplateLiteralLoose(["\n      & {\n        justify-content: start;\n\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "styles.align.left")(styleProps)),
    center: css$1(_templateObject30 || (_templateObject30 = _taggedTemplateLiteralLoose(["\n      justify-content: center;\n\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "styles.align.center")(styleProps)),
    right: css$1(_templateObject31 || (_templateObject31 = _taggedTemplateLiteralLoose(["\n      justify-content: flex-end;\n\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "styles.align.right")(styleProps))
  };
  return sizeAttributes[styleProps.align || 'left'];
}

function useTabState(initialState) {
  return useTabState$1(initialState);
}
function TabState(props) {
  props.children;
      var restProps = _objectWithoutPropertiesLoose$4(props, ["children"]);

  var state = useTabState(restProps);
  return props.children(state);
}

var TabsContext = react.createContext({
  tabs: {},
  overrides: {}
});
var useProps$8 = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var baseId = props.baseId,
      children = props.children,
      loop = props.loop,
      manual = props.manual,
      orientation = props.orientation,
      overrides = props.overrides,
      selectedId = props.selectedId,
      restProps = _objectWithoutPropertiesLoose$4(props, ["baseId", "children", "loop", "manual", "orientation", "overrides", "selectedId"]);

  var boxProps = Box.useProps(restProps);
  var tabs = useTabState({
    baseId: baseId,
    loop: loop,
    manual: manual,
    orientation: orientation,
    selectedId: selectedId
  });
  var className = useClassName({
    style: Tabs$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var contextValue = react.useMemo(function () {
    return {
      tabs: tabs,
      overrides: overrides
    };
  }, [overrides, tabs]);
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(TabsContext.Provider, {
      value: contextValue
    }, children)
  });
}, {
  themeKey: 'Tabs'
});
var Tabs = createComponent(function (props) {
  var tabsProps = useProps$8(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: tabsProps
  });
}, {
  attach: {
    useProps: useProps$8,
    displayName: 'Tabs'
  },
  themeKey: 'Tabs'
});

var TabsListContext = react.createContext({});
var useProps$7 = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var align = props.align,
      baseId = props.baseId,
      children = props.children;
      props.id;
      var variant = props.variant,
      overrides = props.overrides,
      palette = props.palette,
      disabled = props.disabled,
      focusable = props.focusable,
      first = props.first,
      last = props.last,
      move = props.move,
      currentId = props.currentId,
      wrap = props.wrap,
      groups = props.groups,
      items = props.items,
      setCurrentId = props.setCurrentId,
      orientation = props.orientation,
      unstable_virtual = props.unstable_virtual,
      unstable_moves = props.unstable_moves,
      htmlProps = _objectWithoutPropertiesLoose$4(props, ["align", "baseId", "children", "id", "variant", "overrides", "palette", "disabled", "focusable", "first", "last", "move", "currentId", "wrap", "groups", "items", "setCurrentId", "orientation", "unstable_virtual", "unstable_moves"]);

  var _React$useContext = react.useContext(TabsContext),
      tabOverrides = _React$useContext.overrides,
      tabs = _React$useContext.tabs;

  var tabsListProps = useTabList(_objectSpread2$3({
    baseId: baseId,
    disabled: disabled,
    focusable: focusable,
    first: first,
    last: last,
    move: move,
    currentId: currentId,
    orientation: orientation,
    wrap: wrap,
    groups: groups,
    items: items,
    setCurrentId: setCurrentId,
    unstable_virtual: unstable_virtual,
    unstable_moves: unstable_moves
  }, tabs), htmlProps);
  var boxProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, htmlProps), tabsListProps));
  var className = useClassName({
    style: TabsList$1,
    styleProps: _objectSpread2$3(_objectSpread2$3(_objectSpread2$3({}, tabs), props), {}, {
      overrides: _objectSpread2$3(_objectSpread2$3({}, tabOverrides), overrides)
    }),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  var contextValue = react.useMemo(function () {
    return {
      align: align,
      variant: variant,
      overrides: overrides,
      palette: palette
    };
  }, [align, variant, overrides, palette]);
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(TabsListContext.Provider, {
      value: contextValue
    }, children)
  });
}, {
  defaultProps: {
    align: 'left',
    variant: 'default',
    palette: 'primary'
  },
  themeKey: 'Tabs.List'
});
var TabsList = createComponent(function (props) {
  var tabsListProps = useProps$7(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: tabsListProps
  });
}, {
  attach: {
    useProps: useProps$7,
    displayName: 'Tabs.List'
  },
  themeKey: 'Tabs.List'
});

var useProps$6 = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var baseId = props.baseId,
      currentId = props.currentId,
      disabled = props.disabled,
      first = props.first,
      focusable = props.focusable;
      props.id;
      var last = props.last,
      manual = props.manual,
      next = props.next,
      orientation = props.orientation,
      overrides = props.overrides,
      panels = props.panels,
      previous = props.previous,
      registerItem = props.registerItem,
      selectedId = props.selectedId,
      select = props.select,
      tabId = props.tabId,
      setCurrentId = props.setCurrentId,
      items = props.items,
      up = props.up,
      down = props.down,
      unregisterItem = props.unregisterItem,
      unstable_clickOnEnter = props.unstable_clickOnEnter,
      unstable_clickOnSpace = props.unstable_clickOnSpace,
      unstable_hasActiveWidget = props.unstable_hasActiveWidget,
      unstable_idCountRef = props.unstable_idCountRef,
      unstable_moves = props.unstable_moves,
      unstable_virtual = props.unstable_virtual,
      htmlProps = _objectWithoutPropertiesLoose$4(props, ["baseId", "currentId", "disabled", "first", "focusable", "id", "last", "manual", "next", "orientation", "overrides", "panels", "previous", "registerItem", "selectedId", "select", "tabId", "setCurrentId", "items", "up", "down", "unregisterItem", "unstable_clickOnEnter", "unstable_clickOnSpace", "unstable_hasActiveWidget", "unstable_idCountRef", "unstable_moves", "unstable_virtual"]);

  var _React$useContext = react.useContext(TabsContext),
      tabOverrides = _React$useContext.overrides,
      tabs = _React$useContext.tabs;

  var tabProps = useTab(_objectSpread2$3({
    baseId: baseId,
    currentId: currentId,
    disabled: disabled,
    first: first,
    focusable: focusable,
    id: tabId,
    last: last,
    manual: manual,
    next: next,
    orientation: orientation,
    panels: panels,
    previous: previous,
    registerItem: registerItem,
    selectedId: selectedId,
    select: select,
    setCurrentId: setCurrentId,
    items: items,
    up: up,
    down: down,
    unregisterItem: unregisterItem,
    unstable_clickOnEnter: unstable_clickOnEnter,
    unstable_clickOnSpace: unstable_clickOnSpace,
    unstable_hasActiveWidget: unstable_hasActiveWidget,
    unstable_idCountRef: unstable_idCountRef,
    unstable_moves: unstable_moves,
    unstable_virtual: unstable_virtual
  }, tabs), htmlProps);
  var boxProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, htmlProps), tabProps));
  var tabsListContext = react.useContext(TabsListContext);
  var className = useClassName({
    style: Tab$1,
    styleProps: _objectSpread2$3(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3({}, tabs), props), tabsListContext), {}, {
      overrides: _objectSpread2$3(_objectSpread2$3(_objectSpread2$3({}, tabOverrides), tabsListContext.overrides), overrides)
    }),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Tabs.Tab'
});
var Tab = createComponent(function (props) {
  var tabProps = useProps$6(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: tabProps
  });
}, {
  attach: {
    useProps: useProps$6,
    displayName: 'Tabs.Tab'
  },
  themeKey: 'Tabs.Tab'
});

var useProps$5 = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var baseId = props.baseId,
      id = props.id,
      overrides = props.overrides,
      items = props.items,
      panels = props.panels,
      selectedId = props.selectedId,
      tabId = props.tabId,
      registerPanel = props.registerPanel,
      unregisterPanel = props.unregisterPanel;
      props.visible;
      var animating = props.animating,
      animated = props.animated,
      stopAnimation = props.stopAnimation,
      unstable_idCountRef = props.unstable_idCountRef,
      htmlProps = _objectWithoutPropertiesLoose$4(props, ["baseId", "id", "overrides", "items", "panels", "selectedId", "tabId", "registerPanel", "unregisterPanel", "visible", "animating", "animated", "stopAnimation", "unstable_idCountRef"]);

  var _React$useContext = react.useContext(TabsContext),
      tabOverrides = _React$useContext.overrides,
      tabs = _React$useContext.tabs;

  var tabsPanelProps = useTabPanel(_objectSpread2$3(_objectSpread2$3({
    baseId: baseId,
    id: id,
    items: items,
    panels: panels,
    selectedId: selectedId,
    tabId: tabId,
    registerPanel: registerPanel,
    unregisterPanel: unregisterPanel,
    animating: animating,
    animated: animated,
    stopAnimation: stopAnimation,
    unstable_idCountRef: unstable_idCountRef
  }, tabs), {}, {
    visible: tabs ? tabId === tabs.selectedId : tabId === selectedId
  }), htmlProps);
  var boxProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, htmlProps), tabsPanelProps));
  var className = useClassName({
    style: TabsPanel$1,
    styleProps: {
      props: props,
      overrides: _objectSpread2$3(_objectSpread2$3({}, tabOverrides), overrides)
    },
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Tabs.Panel'
});
var TabsPanel = createComponent(function (props) {
  var tabsPanelProps = useProps$5(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: tabsPanelProps
  });
}, {
  attach: {
    useProps: useProps$5,
    displayName: 'Tabs.Panel'
  },
  themeKey: 'Tabs.Panel'
});

Object.assign(Tabs, {
  Tab: Tab,
  List: TabsList,
  Panel: TabsPanel,
  useState: useTabState,
  State: TabState
});

var _templateObject$2, _templateObject2$2, _templateObject3$2, _templateObject4$2, _templateObject5$2, _templateObject6$2, _templateObject7$2, _templateObject8$2;
var TextareaWrapper = function TextareaWrapper(styleProps) {
  return css(_templateObject$2 || (_templateObject$2 = _taggedTemplateLiteralLoose(["\n  align-items: center;\n  position: relative;\n  width: 100%;\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"])), styleProps.size && wrapperSizeProperties(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var Textarea$1 = function Textarea(styleProps) {
  return css(_templateObject2$2 || (_templateObject2$2 = _taggedTemplateLiteralLoose(["\n  -webkit-appearance: none;\n  background: ", ";\n  border: 1px solid ", ";\n  border-radius: ", ";\n  color: ", ";\n  width: 100%;\n  padding: 0.4em 0.8em;\n  transition: box-shadow 0.1s ease-in-out 0s, border-color 0.1s, background-color 0.1s;\n\n  &[disabled] {\n    background-color: ", ";\n    box-shadow: unset;\n    color: ", ";\n    cursor: not-allowed;\n\n    & {\n      ", ";\n    }\n  }\n\n  &:focus {\n    outline: unset;\n    z-index: 2;\n    border-color: ", ";\n    box-shadow: ", " 0px 0px 0px 3px !important;\n\n    & {\n      ", ";\n    }\n  }\n\n  &::placeholder {\n    color: ", ";\n\n    & {\n      ", ";\n    }\n  }\n\n  ", "\n\n  & {\n    ", ";\n  }\n"])), palette('default')(styleProps), palette('white900', {
    dark: 'gray700'
  })(styleProps), borderRadius('default')(styleProps), palette('text')(styleProps), palette('white700', {
    dark: 'black200'
  })(styleProps), palette('text100')(styleProps), theme(styleProps.themeKey, "styles.disabled")(styleProps), palette('primary')(styleProps), palette('primaryTint')(styleProps), theme(styleProps.themeKey, "styles.focus")(styleProps), palette('gray300')(styleProps), theme(styleProps.themeKey, "styles.placeholder")(styleProps), styleProps.state && css$1(_templateObject3$2 || (_templateObject3$2 = _taggedTemplateLiteralLoose(["\n      & {\n        border-color: ", ";\n        box-shadow: ", " 0px 0px 0px 3px !important;\n      }\n    "])), palette("" + styleProps.state)(styleProps), palette(styleProps.state + "Tint")(styleProps)), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var TextareaField$1 = function TextareaField(styleProps) {
  return css(_templateObject4$2 || (_templateObject4$2 = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
function wrapperSizeProperties(styleProps) {
  var properties = {
    small: css$1(_templateObject5$2 || (_templateObject5$2 = _taggedTemplateLiteralLoose(["\n      font-size: ", "rem;\n\n      & {\n        ", ";\n      }\n    "])), fontSize('150')(styleProps), theme(styleProps.themeKey, "styles.sizes.small")(styleProps)),
    default: css$1(_templateObject6$2 || (_templateObject6$2 = _taggedTemplateLiteralLoose(["\n      & {\n        ", ";\n      }\n    "])), theme(styleProps.themeKey, "styles.sizes.default")(styleProps)),
    medium: css$1(_templateObject7$2 || (_templateObject7$2 = _taggedTemplateLiteralLoose(["\n      font-size: ", "rem;\n\n      & {\n        ", ";\n      }\n    "])), fontSize('300')(styleProps), theme(styleProps.themeKey, "styles.sizes.medium")(styleProps)),
    large: css$1(_templateObject8$2 || (_templateObject8$2 = _taggedTemplateLiteralLoose(["\n      font-size: ", "rem;\n\n      & {\n        ", ";\n      }\n    "])), fontSize('400')(styleProps), theme(styleProps.themeKey, "styles.sizes.large")(styleProps))
  };
  return properties[styleProps.size];
}

var useProps$4 = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var isRequired = props.isRequired,
      state = props.state,
      textareaProps = props.textareaProps,
      textareaRef = props.textareaRef,
      restProps = _objectWithoutPropertiesLoose$4(props, ["isRequired", "state", "textareaProps", "textareaRef"]);

  var wrapperClassName = useClassName({
    style: TextareaWrapper,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Wrapper',
    prevClassName: restProps.className
  });
  var boxProps = Box.useProps(_objectSpread2$3(_objectSpread2$3(_objectSpread2$3({}, omitCSSProps(restProps)), textareaProps), {}, {
    className: undefined,
    elementRef: textareaRef || props.elementRef,
    wrapElement: function wrapElement(children) {
      return /*#__PURE__*/react.createElement(Box, _extends$1({
        className: wrapperClassName
      }, pickCSSProps(props)), children);
    }
  }));
  var className = useClassName({
    style: Textarea$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    'aria-invalid': state === 'danger',
    'aria-required': isRequired
  });
}, {
  defaultProps: {
    type: 'text'
  },
  themeKey: 'Textarea'
});
var Textarea = createComponent(function (props) {
  var textareaProps = useProps$4(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: _objectSpread2$3(_objectSpread2$3({}, textareaProps), props.mask ? {
      mask: props.mask
    } : {})
  });
}, {
  attach: {
    useProps: useProps$4,
    displayName: 'Textarea'
  },
  defaultProps: {
    use: 'textarea'
  },
  themeKey: 'Textarea'
}); ////////////////////////////////////////////////////////////////

var useTextareaFieldProps = createHook(function (props, _ref2) {
  var themeKey = _ref2.themeKey;

  props.children;
      var autoComplete = props.autoComplete,
      autoFocus = props.autoFocus,
      defaultValue = props.defaultValue,
      description = props.description,
      disabled = props.disabled,
      hint = props.hint,
      textareaProps = props.textareaProps,
      isOptional = props.isOptional,
      isRequired = props.isRequired,
      label = props.label,
      name = props.name,
      size = props.size,
      mask = props.mask,
      maxLength = props.maxLength,
      minLength = props.minLength,
      multiple = props.multiple,
      pattern = props.pattern,
      placeholder = props.placeholder,
      readOnly = props.readOnly,
      spellCheck = props.spellCheck,
      step = props.step,
      state = props.state,
      tooltip = props.tooltip,
      tooltipTriggerComponent = props.tooltipTriggerComponent,
      type = props.type,
      value = props.value,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onFocus = props.onFocus,
      overrides = props.overrides,
      textareaRef = props.textareaRef,
      validationText = props.validationText,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children", "autoComplete", "autoFocus", "defaultValue", "description", "disabled", "hint", "textareaProps", "isOptional", "isRequired", "label", "name", "size", "mask", "maxLength", "minLength", "multiple", "pattern", "placeholder", "readOnly", "spellCheck", "step", "state", "tooltip", "tooltipTriggerComponent", "type", "value", "onBlur", "onChange", "onFocus", "overrides", "textareaRef", "validationText"]);

  var boxProps = Box.useProps(restProps);
  var className = useClassName({
    style: TextareaField$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(FieldWrapper, {
      description: description,
      hint: hint,
      isOptional: isOptional,
      isRequired: isRequired,
      label: label,
      overrides: overrides,
      state: state,
      tooltip: tooltip,
      tooltipTriggerComponent: tooltipTriggerComponent,
      validationText: validationText
    }, function (_ref3) {
      var elementProps = _ref3.elementProps;
      return /*#__PURE__*/react.createElement(Textarea, _extends$1({
        autoComplete: autoComplete,
        autoFocus: autoFocus,
        defaultValue: defaultValue,
        disabled: disabled,
        isRequired: isRequired,
        name: name,
        size: size,
        mask: mask,
        maxLength: maxLength,
        minLength: minLength,
        multiple: multiple,
        pattern: pattern,
        placeholder: placeholder,
        readOnly: readOnly,
        spellCheck: spellCheck,
        step: step,
        state: state,
        type: type,
        value: value,
        onBlur: onBlur,
        onChange: onChange,
        onFocus: onFocus,
        overrides: overrides,
        textareaRef: textareaRef
      }, elementProps, textareaProps));
    })
  });
}, {
  themeKey: 'TextareaField'
});
var TextareaField = createComponent(function (props) {
  var textareaFieldProps = useTextareaFieldProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textareaFieldProps
  });
}, {
  attach: {
    useProps: useProps$4,
    displayName: 'TextareaField'
  },
  themeKey: 'TextareaField'
});

Object.assign(Textarea, {
  Formik: formikField(Textarea),
  ReduxForm: reduxFormField(Textarea)
});
Object.assign(TextareaField, {
  Formik: formikField(TextareaField, {
    hasFieldWrapper: true
  }),
  ReduxForm: reduxFormField(TextareaField, {
    hasFieldWrapper: true
  })
});

var _templateObject$1, _templateObject2$1, _templateObject3$1, _templateObject4$1, _templateObject5$1, _templateObject6$1, _templateObject7$1, _templateObject8$1, _templateObject9$1, _templateObject10$1, _templateObject11$1, _templateObject12;
var TooltipContent$1 = function TooltipContent(styleProps) {
  return css(_templateObject$1 || (_templateObject$1 = _taggedTemplateLiteralLoose(["\n  background: black;\n  border-radius: ", ";\n  color: ", ";\n  opacity: 0.8;\n  hyphens: auto;\n  font-size: ", "rem;\n  font-weight: ", ";\n  padding: ", "rem ", "rem;\n  z-index: 19900411;\n\n  ", "\n\n  &[hidden] {\n    display: inherit !important;\n    visibility: hidden !important;\n  }\n\n  & {\n    ", ";\n  }\n"])), borderRadius('1')(styleProps), palette('white')(styleProps), fontSize('100')(styleProps), fontWeight('normal')(styleProps), space(1)(styleProps), space(2)(styleProps), getPlacementAttributes(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var TooltipReference$1 = function TooltipReference(styleProps) {
  return css(_templateObject2$1 || (_templateObject2$1 = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var TooltipArrow$1 = function TooltipArrow(styleProps) {
  return css(_templateObject3$1 || (_templateObject3$1 = _taggedTemplateLiteralLoose(["\n  display: grid;\n  overflow: hidden;\n\n  & > svg {\n    background-color: transparent;\n\n    & .stroke {\n      fill: black;\n    }\n    & .fill {\n      fill: black;\n    }\n  }\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var getPlacementAttributes = function getPlacementAttributes(styleProps) {
  var placementAttributes = {
    // @ts-ignore
    top: css$1(_templateObject4$1 || (_templateObject4$1 = _taggedTemplateLiteralLoose(["\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), getAnimatedAttributes({
      prevTransformValue: styleProps.prevTransformValue,
      transformX: '0px',
      transformY: '0px',
      defaultSlide: 'bottom',
      defaultExpand: 'bottom',
      slideOffset: (styleProps.gutter || '10') + "px"
    })(styleProps), theme(styleProps.themeKey, "styles.placements.top")(styleProps)),
    // @ts-ignore
    bottom: css$1(_templateObject5$1 || (_templateObject5$1 = _taggedTemplateLiteralLoose(["\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), getAnimatedAttributes({
      prevTransformValue: styleProps.prevTransformValue,
      transformX: '0px',
      transformY: '0px',
      defaultSlide: 'top',
      defaultExpand: 'top',
      slideOffset: (styleProps.gutter || '10') + "px"
    })(styleProps), theme(styleProps.themeKey, "styles.placements.bottom")(styleProps)),
    // @ts-ignore
    left: css$1(_templateObject6$1 || (_templateObject6$1 = _taggedTemplateLiteralLoose(["\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), getAnimatedAttributes({
      prevTransformValue: styleProps.prevTransformValue,
      transformX: '0px',
      transformY: '0px',
      defaultSlide: 'right',
      defaultExpand: 'right',
      slideOffset: (styleProps.gutter || '10') + "px"
    })(styleProps), theme(styleProps.themeKey, "styles.placements.left")(styleProps)),
    // @ts-ignore
    right: css$1(_templateObject7$1 || (_templateObject7$1 = _taggedTemplateLiteralLoose(["\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), getAnimatedAttributes({
      prevTransformValue: styleProps.prevTransformValue,
      transformX: '0px',
      transformY: '0px',
      defaultSlide: 'left',
      defaultExpand: 'left',
      slideOffset: (styleProps.gutter || '10') + "px"
    })(styleProps), theme(styleProps.themeKey, "styles.placements.right")(styleProps)),
    // @ts-ignore
    'top-start': css$1(_templateObject8$1 || (_templateObject8$1 = _taggedTemplateLiteralLoose(["\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), getAnimatedAttributes({
      prevTransformValue: styleProps.prevTransformValue,
      transformX: '0px',
      transformY: '0px',
      defaultSlide: 'bottom',
      defaultExpand: 'bottom',
      slideOffset: (styleProps.gutter || '10') + "px"
    })(styleProps), theme(styleProps.themeKey, "styles.placements.topStart")(styleProps)),
    // @ts-ignore
    'top-end': css$1(_templateObject9$1 || (_templateObject9$1 = _taggedTemplateLiteralLoose(["\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), getAnimatedAttributes({
      prevTransformValue: styleProps.prevTransformValue,
      transformX: '0px',
      transformY: '0px',
      defaultSlide: 'bottom',
      defaultExpand: 'bottom',
      slideOffset: (styleProps.gutter || '10') + "px"
    })(styleProps), theme(styleProps.themeKey, "styles.placements.topEnd")(styleProps)),
    // @ts-ignore
    'bottom-end': css$1(_templateObject10$1 || (_templateObject10$1 = _taggedTemplateLiteralLoose(["\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), getAnimatedAttributes({
      prevTransformValue: styleProps.prevTransformValue,
      transformX: '0px',
      transformY: '0px',
      defaultSlide: 'top',
      defaultExpand: 'top',
      slideOffset: (styleProps.gutter || '10') + "px"
    })(styleProps), theme(styleProps.themeKey, "styles.placements.bottomEnd")(styleProps)),
    // @ts-ignore
    'bottom-start': css$1(_templateObject11$1 || (_templateObject11$1 = _taggedTemplateLiteralLoose(["\n      ", ";\n\n      & {\n        ", ";\n      }\n    "])), getAnimatedAttributes({
      prevTransformValue: styleProps.prevTransformValue,
      transformX: '0px',
      transformY: '0px',
      defaultSlide: 'top',
      defaultExpand: 'top',
      slideOffset: (styleProps.gutter || '10') + "px"
    })(styleProps), theme(styleProps.themeKey, "styles.placements.bottomStart")(styleProps))
  };
  return css$1(_templateObject12 || (_templateObject12 = _taggedTemplateLiteralLoose(["\n    ", ";\n  "])), placementAttributes[styleProps.placement || 'center']);
};

function useTooltipState(initialState) {
  return useTooltipState$1(initialState);
}
function TooltipState(props) {
  props.children;
      var restProps = _objectWithoutPropertiesLoose$4(props, ["children"]);

  var state = useTooltipState(restProps);
  return props.children(state);
}

var useProps$3 = createHook(function (props) {
  var arrowProps = props.arrowProps,
      children = props.children,
      content = props.content,
      expand = props.expand,
      fade = props.fade,
      hasArrow = props.hasArrow,
      overrides = props.overrides,
      placement = props.placement,
      slide = props.slide,
      baseId = props.baseId,
      tooltipContentProps = props.tooltipContentProps,
      tooltipState = props.tooltipState;
  var boxProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, props), {}, {
    content: undefined
  })); // @ts-ignore

  var tooltip = useTooltipState(_objectSpread2$3({
    placement: placement,
    animated: expand || fade || slide,
    baseId: baseId
  }, tooltipState));
  return {
    children: /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(TooltipReference, _extends$1({
      overrides: overrides
    }, boxProps, tooltip), react.isValidElement(children) ?
    /*
    // @ts-ignore */
    function (referenceProps) {
      return react.cloneElement(children, _objectSpread2$3(_objectSpread2$3({}, referenceProps), children.props));
    } : children), /*#__PURE__*/react.createElement(TooltipContent, _extends$1({
      arrowProps: arrowProps,
      expand: expand,
      fade: fade,
      hasArrow: hasArrow,
      overrides: overrides,
      slide: slide
    }, tooltipContentProps, tooltip), content))
  };
}, {
  themeKey: 'Tooltip',
  defaultProps: {
    placement: 'top'
  }
});
var Tooltip = createComponent(function (props) {
  var tooltipProps = useProps$3(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: tooltipProps
  });
}, {
  attach: {
    useProps: useProps$3,
    displayName: 'Tooltip'
  },
  themeKey: 'Tooltip'
}); ////////////////////////////////////////////////////////////

var useTooltipContentProps = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var arrowProps = props.arrowProps,
      children = props.children,
      hasArrow = props.hasArrow,
      overrides = props.overrides,
      visible = props.visible,
      baseId = props.baseId,
      animating = props.animating,
      animated = props.animated,
      unstable_popoverRef = props.unstable_popoverRef,
      unstable_popoverStyles = props.unstable_popoverStyles,
      unstable_portal = props.unstable_portal,
      stopAnimation = props.stopAnimation,
      restProps = _objectWithoutPropertiesLoose$4(props, ["arrowProps", "children", "hasArrow", "overrides", "visible", "baseId", "animating", "animated", "unstable_popoverRef", "unstable_popoverStyles", "unstable_portal", "stopAnimation"]);

  var tooltipProps = useTooltip({
    visible: visible,
    baseId: baseId,
    animating: animating,
    animated: animated,
    unstable_popoverRef: unstable_popoverRef,
    unstable_popoverStyles: unstable_popoverStyles,
    unstable_portal: unstable_portal,
    stopAnimation: stopAnimation
  }, restProps);
  var boxProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, props), tooltipProps));
  var className = useClassName({
    style: TooltipContent$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      prevTransformValue: unstable_popoverStyles.transform
    }),
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(react.Fragment, null, hasArrow && /*#__PURE__*/react.createElement(TooltipArrow, _extends$1({
      overrides: overrides // @ts-ignore
      ,
      placement: props.placement // @ts-ignore
      ,
      unstable_arrowRef: props.unstable_arrowRef // @ts-ignore
      ,
      unstable_arrowStyles: props.unstable_arrowStyles
    }, arrowProps)), children)
  });
}, {
  themeKey: 'Tooltip.Content'
});
var TooltipContent = createComponent(function (props) {
  var tooltipContentProps = useTooltipContentProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: tooltipContentProps
  });
}, {
  attach: {
    useProps: useProps$3,
    displayName: 'Tooltip.Content'
  },
  themeKey: 'Tooltip.Content'
}); ////////////////////////////////////////////////////////////

var useTooltipReferenceProps = createHook(function (props, _ref2) {
  var themeKey = _ref2.themeKey;

  var show = props.show,
      hide = props.hide,
      unstable_referenceRef = props.unstable_referenceRef,
      baseId = props.baseId,
      restProps = _objectWithoutPropertiesLoose$4(props, ["show", "hide", "unstable_referenceRef", "baseId"]);

  var tooltipReferenceProps = useTooltipReference({
    show: show,
    hide: hide,
    unstable_referenceRef: unstable_referenceRef,
    baseId: baseId
  }, restProps);
  var boxProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, props), tooltipReferenceProps));
  var className = useClassName({
    style: TooltipReference$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Tooltip.Reference'
});
var TooltipReference = createComponent(function (props) {
  var tooltipReferenceProps = useTooltipReferenceProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: tooltipReferenceProps
  });
}, {
  attach: {
    useProps: useTooltipReferenceProps,
    displayName: 'Tooltip.Reference'
  },
  themeKey: 'Tooltip.Reference'
}); ////////////////////////////////////////////////////////////

var useTooltipArrowProps = createHook(function (props, _ref3) {
  var themeKey = _ref3.themeKey;

  var unstable_arrowRef = props.unstable_arrowRef,
      unstable_arrowStyles = props.unstable_arrowStyles,
      placement = props.placement,
      size = props.size,
      restProps = _objectWithoutPropertiesLoose$4(props, ["unstable_arrowRef", "unstable_arrowStyles", "placement", "size"]);

  var tooltipArrowProps = useTooltipArrow({
    placement: placement,
    size: size,
    unstable_arrowRef: unstable_arrowRef,
    unstable_arrowStyles: unstable_arrowStyles
  }, restProps);
  var boxProps = Box.useProps(_objectSpread2$3(_objectSpread2$3({}, props), tooltipArrowProps));
  var className = useClassName({
    style: TooltipArrow$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, boxProps), {}, {
    className: className
  });
}, {
  themeKey: 'Tooltip.Arrow'
});
var TooltipArrow = createComponent(function (props) {
  var tooltipArrowProps = useTooltipArrowProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: tooltipArrowProps
  });
}, {
  attach: {
    useProps: useTooltipArrowProps,
    displayName: 'Tooltip.Arrow'
  },
  themeKey: 'Tooltip.Arrow'
});

Object.assign(Tooltip, {
  Arrow: TooltipArrow,
  Content: TooltipContent,
  Reference: TooltipReference,
  useState: useTooltipState,
  State: TooltipState
});

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11;
var TopNav$1 = function TopNav(styleProps) {
  return css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n  display: flex;\n  justify-content: space-between;\n  min-height: 60px;\n\n  & {\n    ", ";\n  }\n"])), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var TopNavSection$1 = function TopNavSection(styleProps) {
  return css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose(["\n  display: flex;\n\n  &:not(:last-child) {\n    margin-right: ", "rem;\n  }\n\n  &&&&& li {\n    align-items: center;\n    display: flex;\n  }\n\n  &&&&& > *:not(:last-child) {\n    margin-right: ", "rem;\n  }\n\n  & {\n    ", ";\n  }\n"])), space(2, 'major')(styleProps), space(1, 'minor')(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var TopNavItem$1 = function TopNavItem(styleProps) {
  return css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose(["\n  align-items: center;\n  color: inherit;\n  height: 100%;\n  font-weight: ", ";\n  text-decoration: none;\n\n  &&&& {\n    display: flex;\n  }\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  &:hover {\n    ", "\n\n    ", "\n\n    & {\n      ", ";\n    }\n  }\n\n  &:focus {\n    outline: none;\n    color: ", ";\n    fill: ", ";\n\n    ", "\n\n    & {\n      ", ";\n    }\n  }\n\n  & {\n    ", ";\n  }\n"])), fontWeight('semibold')(styleProps), (styleProps.href || styleProps.onClick || styleProps.navId) && css$1(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose(["\n      &&&&&& {\n        cursor: pointer;\n        padding: 0 0.8rem;\n      }\n    "]))), styleProps.variant === 'default' && css$1(_templateObject5 || (_templateObject5 = _taggedTemplateLiteralLoose(["\n      min-height: 2.75rem;\n    "]))), styleProps.variant === 'pill' && css$1(_templateObject6 || (_templateObject6 = _taggedTemplateLiteralLoose(["\n      border-radius: ", ";\n      height: 44px;\n    "])), borderRadius('default')(styleProps)), styleProps.isActive && css$1(_templateObject7 || (_templateObject7 = _taggedTemplateLiteralLoose(["\n      color: ", ";\n      fill: ", ";\n\n      ", " & {\n        ", ";\n      }\n    "])), palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps), palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps), styleProps.variant === 'default' && css$1(_templateObject8 || (_templateObject8 = _taggedTemplateLiteralLoose(["\n        box-shadow: inset 0 -2px 0 0 ", ";\n      "])), palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps)), theme(styleProps.themeKey, "styles.active")(styleProps)), styleProps.variant !== 'pill' && css$1(_templateObject9 || (_templateObject9 = _taggedTemplateLiteralLoose(["\n        color: ", ";\n      "])), palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps)), styleProps.variant === 'pill' && css$1(_templateObject10 || (_templateObject10 = _taggedTemplateLiteralLoose(["\n        background-color: ", ";\n      "])), palette('white700', {
    dark: 'black200'
  })(styleProps)), theme(styleProps.themeKey, "styles.hover")(styleProps), palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps), palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps), styleProps.variant === 'default' && css$1(_templateObject11 || (_templateObject11 = _taggedTemplateLiteralLoose(["\n        box-shadow: inset 0 -2px 0 0 ", ";\n      "])), palette(styleProps.palette, {
    dark: styleProps.palette + "300"
  })(styleProps)), theme(styleProps.themeKey, "styles.focus")(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var TopNavContext = react.createContext({
  onChangeSelectedId: function onChangeSelectedId() {},
  selectedId: undefined,
  overrides: {}
});
var useProps$2 = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var children = props.children,
      defaultSelectedId = props.defaultSelectedId,
      onChange = props.onChange,
      overrides = props.overrides,
      _selectedId = props.selectedId,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children", "defaultSelectedId", "onChange", "overrides", "selectedId"]);

  var navigationProps = Navigation.useProps(restProps);
  var className = useClassName({
    style: TopNav$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: navigationProps.className
  });

  var _React$useState = react.useState(defaultSelectedId || ''),
      selectedId = _React$useState[0],
      setSelectedId = _React$useState[1];

  var handleChangeSelectedId = react.useCallback(function (id) {
    if (onChange) {
      onChange(id);
    } else {
      setSelectedId(id || '');
    }
  }, [onChange]);
  var contextValue = react.useMemo(function () {
    return {
      onChangeSelectedId: handleChangeSelectedId,
      selectedId: _selectedId || selectedId,
      overrides: overrides
    };
  }, [_selectedId, handleChangeSelectedId, overrides, selectedId]);
  return _objectSpread2$3(_objectSpread2$3({}, navigationProps), {}, {
    className: className,
    children: /*#__PURE__*/react.createElement(TopNavContext.Provider, {
      value: contextValue
    }, children)
  });
}, {
  themeKey: 'TopNav'
});
var TopNav = createComponent(function (props) {
  var textProps = useProps$2(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$2,
    displayName: 'TopNav'
  },
  themeKey: 'TopNav'
});

var useProps$1 = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  props.children;
      var overrides = props.overrides;
      props.title;
      var restProps = _objectWithoutPropertiesLoose$4(props, ["children", "overrides", "title"]);

  var listProps = List.useProps(_objectSpread2$3(_objectSpread2$3({}, restProps), {}, {
    orientation: 'horizontal'
  }));

  var _React$useContext = react.useContext(TopNavContext),
      topNavOverrides = _React$useContext.overrides;

  var className = useClassName({
    style: TopNavSection$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      overrides: _objectSpread2$3(_objectSpread2$3({}, topNavOverrides), overrides)
    }),
    themeKey: themeKey,
    prevClassName: listProps.className
  });
  return _objectSpread2$3(_objectSpread2$3({}, listProps), {}, {
    className: className
  });
}, {
  themeKey: 'TopNav.Section'
});
var TopNavSection = createComponent(function (props) {
  var textProps = useProps$1(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: textProps
  });
}, {
  attach: {
    useProps: useProps$1,
    displayName: 'TopNav.Section'
  },
  defaultProps: {
    use: 'ul'
  },
  themeKey: 'TopNav.Section'
});

var useProps = createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var children = props.children,
      href = props.href,
      isActive = props.isActive,
      navId = props.navId,
      onClick = props.onClick,
      overrides = props.overrides,
      restProps = _objectWithoutPropertiesLoose$4(props, ["children", "href", "isActive", "navId", "onClick", "overrides"]);

  var htmlProps;

  if (navId) {
    htmlProps = useButton(restProps);
  }

  htmlProps = ListItem.useProps(_objectSpread2$3(_objectSpread2$3({}, htmlProps), restProps));

  var _React$useContext = react.useContext(TopNavContext),
      onChangeSelectedId = _React$useContext.onChangeSelectedId,
      selectedId = _React$useContext.selectedId,
      topNavOverrides = _React$useContext.overrides;

  var className = useClassName({
    style: TopNavItem$1,
    styleProps: _objectSpread2$3(_objectSpread2$3({}, props), {}, {
      isActive: typeof isActive === 'boolean' ? isActive : selectedId === navId,
      overrides: _objectSpread2$3(_objectSpread2$3({}, topNavOverrides), overrides)
    }),
    themeKey: themeKey
  });
  return _objectSpread2$3(_objectSpread2$3({}, htmlProps), {}, {
    'aria-current': isActive || selectedId === navId ? 'page' : undefined,
    className: classnames$1(htmlProps.className, href || navId && react.isValidElement(children) ? undefined : className),
    onClick: href || navId && react.isValidElement(children) ? undefined : bindFns(onClick, function () {
      return onChangeSelectedId(navId);
    }),
    children: href || navId && react.isValidElement(children) ?
    /*
    // @ts-ignore */
    react.cloneElement(href ? /*#__PURE__*/react.createElement("a", {
      href: href
    }, children) : children, {
      className: className,
      onClick: bindFns(onClick, function () {
        return onChangeSelectedId(navId);
      })
    }) : children
  });
}, {
  defaultProps: {
    palette: 'primary',
    variant: 'default'
  },
  themeKey: 'TopNav.Item'
});
var TopNavItem = createComponent(function (props) {
  var TopNavItemProps = useProps(props);
  return createElement({
    children: props.children,
    component: Box$2,
    use: props.use,
    htmlProps: TopNavItemProps
  });
}, {
  attach: {
    useProps: useProps,
    displayName: 'TopNav.Item'
  },
  defaultProps: {
    use: 'li'
  },
  themeKey: 'TopNav.Item'
});

Object.assign(TopNav, {
  Section: TopNavSection,
  Item: TopNavItem
});

export { Button, Card, Code, FieldStack, Input, InputField, Provider, Stack };
